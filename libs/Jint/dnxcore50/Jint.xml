<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jint</name>
    </assembly>
    <members>
        <member name="M:Jint.Engine.ResetStatementsCount">
            <summary>
            Initializes the statements count
            </summary>
        </member>
        <member name="M:Jint.Engine.ResetCallStack">
            <summary>
            Initializes list of references of called functions
            </summary>
        </member>
        <member name="M:Jint.Engine.GetCompletionValue">
            <summary>
            Gets the last evaluated statement completion value
            </summary>
        </member>
        <member name="M:Jint.Engine.GetValue(System.Object)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.1
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Engine.PutValue(Jint.Runtime.References.Reference,Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.2
            </summary>
            <param name="reference"></param>
            <param name="value"></param>
        </member>
        <member name="M:Jint.Engine.PutPrimitiveBase(Jint.Native.JsValue,System.String,Jint.Native.JsValue,System.Boolean)">
            <summary>
            Used by PutValue when the reference has a primitive base value
            </summary>
            <param name="b"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="throwOnError"></param>
        </member>
        <member name="M:Jint.Engine.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.Invoke(System.String,System.Object,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The name of the function to call.</param>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Engine.GetValue(System.String)">
            <summary>
            Gets a named value from the Global scope.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
        </member>
        <member name="M:Jint.Engine.GetLastSyntaxNode">
            <summary>
            Gets the last evaluated <see cref="T:Jint.Parser.Ast.SyntaxNode"/>.
            </summary>
        </member>
        <member name="M:Jint.Engine.GetValue(Jint.Native.JsValue,System.String)">
            <summary>
            Gets a named value from the specified scope.
            </summary>
            <param name="scope">The scope to get the property from.</param>
            <param name="propertyName">The name of the property to return.</param>
        </member>
        <member name="M:Jint.Options.DiscardGlobal(System.Boolean)">
            <summary>
            When called, doesn't initialize the global scope.
            Can be useful in lightweight scripts for performance reason.
            </summary>
        </member>
        <member name="M:Jint.Options.Strict(System.Boolean)">
            <summary>
            Run the script in strict mode.
            </summary>
        </member>
        <member name="M:Jint.Options.AllowDebuggerStatement(System.Boolean)">
            <summary>
            Allow the <code>debugger</code> statement to be called in a script.
            </summary>
            <remarks>
            Because the <code>debugger</code> statement can start the 
            Visual Studio debugger, is it disabled by default
            </remarks>
        </member>
        <member name="M:Jint.Options.DebugMode(System.Boolean)">
            <summary>
            Allow to run the script in debug mode.
            </summary>
        </member>
        <member name="M:Jint.Options.AddObjectConverter(Jint.Runtime.Interop.IObjectConverter)">
            <summary>
            Adds a <see cref="T:Jint.Runtime.Interop.IObjectConverter"/> instance to convert CLR types to <see cref="T:Jint.Native.JsValue"/>
            </summary>
        </member>
        <member name="M:Jint.Options.AllowClr(System.Reflection.Assembly[])">
            <summary>
            Allows scripts to call CLR types directly like <example>System.IO.File</example>
            </summary>
        </member>
        <member name="M:Jint.Options.LimitRecursion(System.Int32)">
            <summary>
            Sets maximum allowed depth of recursion.
            </summary>
            <param name="maxRecursionDepth">
            The allowed depth.
            a) In case max depth is zero no recursion is allowed.
            b) In case max depth is equal to n it means that in one scope function can be called no more than n times.
            </param>
            <returns>Options instance for fluent syntax</returns>
        </member>
        <member name="M:Jint.Native.JsValue.FromObject(Jint.Engine,System.Object)">
            <summary>
            Creates a valid <see cref="T:Jint.Native.JsValue"/> instance from any <see cref="N:Jint.Native.Object"/> instance
            </summary>
            <param name="engine"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.JsValue.ToObject">
            <summary>
            Converts a <see cref="T:Jint.Native.JsValue"/> to its underlying CLR value.
            </summary>
            <returns>The underlying CLR value of the <see cref="T:Jint.Native.JsValue"/> instance.</returns>
        </member>
        <member name="M:Jint.Native.JsValue.Invoke(Jint.Native.JsValue[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Jint.Native.JsValue.Invoke(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="T:Jint.Native.Argument.ArgumentsInstance">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.6
            </summary>
        </member>
        <member name="M:Jint.Native.Argument.ArgumentsInstance.Put(System.String,Jint.Native.JsValue,System.Boolean)">
            Implementation from ObjectInstance official specs as the one 
            in ObjectInstance is optimized for the general case and wouldn't work 
            for arrays
        </member>
        <member name="M:Jint.Native.Array.ArrayInstance.Put(System.String,Jint.Native.JsValue,System.Boolean)">
            Implementation from ObjectInstance official specs as the one 
            in ObjectInstance is optimized for the general case and wouldn't work 
            for arrays
        </member>
        <member name="T:Jint.Native.Array.ArrayPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4
            </summary>
        </member>
        <member name="M:Jint.Native.Boolean.BooleanConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Jint.Native.Boolean.BooleanPrototype">
            <summary>
                http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.4
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DateConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Jint.Native.Date.DatePrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.EnsureDateInstance(Jint.Native.JsValue)">
            <summary>
            Converts a value to a <see cref="T:Jint.Native.Date.DateInstance"/> or throws a TypeError exception.
            c.f., http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.Day(System.Double)">
            <summary>
            15.9.1.2
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeWithinDay(System.Double)">
            <summary>
            15.9.1.2
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.DaysInYear(System.Double)">
            <summary>
            The number of days in a year
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.DayFromYear(System.Double)">
            <summary>
            The day number of the first day of the year.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.TimeFromYear(System.Double)">
            <summary>
            The time value of the start of the year
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.YearFromTime(System.Double)">
            <summary>
            The year of a time value.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.InLeapYear(System.Double)">
            <summary>
            <value>true</value> if the time is within a leap year, <value>false</value> otherwise
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.MonthFromTime(System.Double)">
            <summary>
            The month number of a time value.
            </summary>
        </member>
        <member name="M:Jint.Native.Date.DatePrototype.WeekDay(System.Double)">
            <summary>
            The weekday for a particular time value.
            </summary>
        </member>
        <member name="T:Jint.Native.Error.ErrorPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4
            </summary>
        </member>
        <member name="M:Jint.Native.Function.FunctionConstructor.CreateFunctionObject(Jint.Parser.Ast.FunctionDeclaration)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2
            </summary>
            <param name="functionDeclaration"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Function.FunctionInstance.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            Executed when a function object is used as a function
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Function.FunctionInstance.Get(System.String)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5.4
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Jint.Native.Function.FunctionPrototype">
            <summary>
                http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4
            </summary>
        </member>
        <member name="T:Jint.Native.Function.ScriptFunctionInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunctionInstance.#ctor(Jint.Engine,Jint.Parser.IFunctionDeclaration,Jint.Runtime.Environments.LexicalEnvironment,System.Boolean)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2
            </summary>
            <param name="engine"></param>
            <param name="functionDeclaration"></param>
            <param name="scope"></param>
            <param name="strict"></param>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunctionInstance.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.1
            </summary>
            <param name="thisArg"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Function.ScriptFunctionInstance.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.ParseInt(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.ParseFloat(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.3
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.IsNaN(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.4
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.IsFinite(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.5
            </summary>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.EncodeUri(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.2
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Global.GlobalObject.EncodeUriComponent(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Json.JsonParser.ParseJsonValue">
            <summary>
            Optimization.
            By calling Lex().Value for each type, we parse the token twice.
            It was already parsed by the peek() method.
            _lookahead.Value already contain the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Number.NumberConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Jint.Native.Number.NumberPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Call(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.1.1
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Prototype">
            <summary>
            The prototype of this object.
            </summary>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Extensible">
            <summary>
            If true, own properties may be added to the 
            object.
            </summary>
        </member>
        <member name="P:Jint.Native.Object.ObjectInstance.Class">
            <summary>
            A String value indicating a specification defined 
            classification of objects.
            </summary>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Get(System.String)">
            <summary>
            Returns the value of the named property.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.3
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.GetOwnProperty(System.String)">
            <summary>
            Returns the Property Descriptor of the named 
            own property of this object, or undefined if 
            absent.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.1
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.GetProperty(System.String)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.2
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Put(System.String,Jint.Native.JsValue,System.Boolean)">
            <summary>
            Sets the specified named property to the value 
            of the second parameter. The flag controls 
            failure handling.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwOnError"></param>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.CanPut(System.String)">
            <summary>
            Returns a Boolean value indicating whether a 
            [[Put]] operation with PropertyName can be 
            performed.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.4
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.HasProperty(System.String)">
            <summary>
            Returns a Boolean value indicating whether the 
            object already has a property with the given 
            name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.Delete(System.String,System.Boolean)">
            <summary>
            Removes the specified named own property 
            from the object. The flag controls failure 
            handling.
            </summary>
            <param name="propertyName"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.DefaultValue(Jint.Runtime.Types)">
            <summary>
            Hint is a String. Returns a default value for the 
            object.
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.DefineOwnProperty(System.String,Jint.Runtime.Descriptors.PropertyDescriptor,System.Boolean)">
            <summary>
            Creates or alters the named own property to 
            have the state described by a Property 
            Descriptor. The flag controls failure handling.
            </summary>
            <param name="propertyName"></param>
            <param name="desc"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FastAddProperty(System.String,Jint.Native.JsValue,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Optimized version of [[Put]] when the property is known to be undeclared already
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="writable"></param>
            <param name="configurable"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:Jint.Native.Object.ObjectInstance.FastSetProperty(System.String,Jint.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            Optimized version of [[Put]] when the property is known to be already declared 
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.ToObjectString(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.Object.ObjectPrototype.HasOwnProperty(Jint.Native.JsValue,Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.5
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.RegExp.RegExpConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.4
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Native.String.StringConstructor.Construct(Jint.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Jint.Native.String.StringPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4
            </summary>
        </member>
        <member name="T:Jint.Parser.IFunctionScope">
            <summary>
            Used to safe references to all function delcarations in a specific scope.
            </summary>
        </member>
        <member name="T:Jint.Parser.IVariableScope">
            <summary>
            Used to safe references to all variable delcarations in a specific scope.
            Hoisting.
            </summary>
        </member>
        <member name="T:Jint.Parser.Ast.IPropertyKeyExpression">
            <summary>
            Reprensents an expression which can be a key of a Property
            </summary>
        </member>
        <member name="M:Jint.Runtime.Arguments.At(Jint.Native.JsValue[],System.Int32,Jint.Native.JsValue)">
            <summary>
            Returns the arguments at the provided position or Undefined if not present
            </summary>
            <param name="args"></param>
            <param name="index">The index of the parameter to return</param>
            <param name="undefinedValue">The value to return is the parameter is not provided</param>
            <returns></returns>
        </member>
        <member name="T:Jint.Runtime.Completion">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.9
            </summary>
        </member>
        <member name="M:Jint.Runtime.ExpressionInterpreter.EvaluateMemberExpression(Jint.Parser.Ast.MemberExpression)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.JavaScriptException.ConstructCallStack(Jint.Parser.Location,Jint.Runtime.CallStack.JintCallStack)">
            <summary>
            Since JintCallStack differs in presentation between stacks we know from other languages 
            we modify it slightly to make it easier to read.
            
            Also internal callstack lucks current statement - this is why we call location. 
            </summary>
            <param name="location"></param>
            <param name="callStack"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteDoWhileStatement(Jint.Parser.Ast.DoWhileStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.1
            </summary>
            <param name="doWhileStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteWhileStatement(Jint.Parser.Ast.WhileStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.2
            </summary>
            <param name="whileStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteForStatement(Jint.Parser.Ast.ForStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.3
            </summary>
            <param name="forStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteForInStatement(Jint.Parser.Ast.ForInStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.4
            </summary>
            <param name="forInStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteContinueStatement(Jint.Parser.Ast.ContinueStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.7
            </summary>
            <param name="continueStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteBreakStatement(Jint.Parser.Ast.BreakStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.8
            </summary>
            <param name="breakStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteReturnStatement(Jint.Parser.Ast.ReturnStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.9
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteWithStatement(Jint.Parser.Ast.WithStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.10
            </summary>
            <param name="withStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteSwitchStatement(Jint.Parser.Ast.SwitchStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.11
            </summary>
            <param name="switchStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteThrowStatement(Jint.Parser.Ast.ThrowStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.13
            </summary>
            <param name="throwStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.StatementInterpreter.ExecuteTryStatement(Jint.Parser.Ast.TryStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.14
            </summary>
            <param name="tryStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToPrimitive(Jint.Native.JsValue,Jint.Runtime.Types)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.1
            </summary>
            <param name="input"></param>
            <param name="preferredType"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToBoolean(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.2
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToNumber(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.3
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInteger(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.4
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToInt32(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.5
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint32(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.6
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToUint16(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.7
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.TypeConverter.ToString(Jint.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.8
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Jint.Runtime.Descriptors.PropertyDescriptor.IsGenericDescriptor">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.10.3
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jint.Runtime.Environments.DeclarativeEnvironmentRecord">
            <summary>
            Represents a declarative environment record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.1
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.DeclarativeEnvironmentRecord.CreateImmutableBinding(System.String)">
            <summary>
            Creates a new but uninitialised immutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.DeclarativeEnvironmentRecord.InitializeImmutableBinding(System.String,Jint.Native.JsValue)">
            <summary>
            Sets the value of an already existing but uninitialised immutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="value">The value of the binding.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.DeclarativeEnvironmentRecord.GetAllBindingNames">
            <summary>
            Returns an array of all the defined binding names
            </summary>
            <returns>The array of all defined bindings</returns>
        </member>
        <member name="T:Jint.Runtime.Environments.EnvironmentRecord">
            <summary>
            Base implementation of an Environment Record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.HasBinding(System.String)">
            <summary>
            Determines if an environment record has a binding for an identifier. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><c>true</c> if it does and <c>false</c> if it does not.</returns>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.CreateMutableBinding(System.String,System.Boolean)">
            <summary>
            Creates a new mutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="canBeDeleted"><c>true</c> if the binding may be subsequently deleted.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.SetMutableBinding(System.String,Jint.Native.JsValue,System.Boolean)">
            <summary>
            Sets the value of an already existing mutable binding in an environment record. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="value">The value of the binding.</param>
            <param name="strict">The identify strict mode references.</param>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.GetBindingValue(System.String,System.Boolean)">
            <summary>
            Returns the value of an already existing binding from an environment record. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="strict">The identify strict mode references.</param>
            <return>The value of an already existing binding from an environment record.</return>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.DeleteBinding(System.String)">
            <summary>
            Delete a binding from an environment record. The String value N is the text of the bound name If a binding for N exists, remove the binding and return true. If the binding exists but cannot be removed return false. If the binding does not exist return true.
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><true>true</true> if the deletion is successfull.</returns>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.ImplicitThisValue">
            <summary>
            Returns the value to use as the <c>this</c> value on calls to function objects that are obtained as binding values from this environment record.
            </summary>
            <returns>The value to use as <c>this</c>.</returns>
        </member>
        <member name="M:Jint.Runtime.Environments.EnvironmentRecord.GetAllBindingNames">
            <summary>
            Returns an array of all the defined binding names
            </summary>
            <returns>The array of all defined bindings</returns>
        </member>
        <member name="T:Jint.Runtime.Environments.LexicalEnvironment">
            <summary>
            Represents a Liexical Environment (a.k.a Scope)
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.2
            </summary>
        </member>
        <member name="T:Jint.Runtime.Environments.ObjectEnvironmentRecord">
            <summary>
            Represents an object environment record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.2
            </summary>
        </member>
        <member name="M:Jint.Runtime.Environments.ObjectEnvironmentRecord.CreateMutableBinding(System.String,System.Boolean)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.2.2
            </summary>
            <param name="name"></param>
            <param name="configurable"></param>
        </member>
        <member name="T:Jint.Runtime.Interop.ClrFunctionInstance">
            <summary>
            Wraps a Clr method into a FunctionInstance
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.DelegateWrapper">
            <summary>
            Represents a FunctionInstance wrapper around a CLR method. This is used by user to pass
            custom methods to the engine.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.GetterFunctionInstance">
            <summary>
            Represents a FunctionInstance wrapping a Clr getter.
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.IObjectConverter">
            <summary>
            When implemented, converts a CLR value to a <see cref="T:Jint.Native.JsValue"/> instance
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.MethodInfoFunctionInstance.ProcessParamsArrays(Jint.Native.JsValue[],System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Reduces a flat list of parameters to a params array
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.NamespaceReference">
            <summary>
            Any instance on this class represents a reference to a CLR namespace.
            Accessing its properties will look for a class of the full name, or instantiate
            a new <see cref="T:Jint.Runtime.Interop.NamespaceReference"/> as it assumes that the property is a deeper
            level of the current namespace
            </summary>
        </member>
        <member name="M:Jint.Runtime.Interop.NamespaceReference.GetType(System.Reflection.Assembly,System.String)">
             <summary>   Gets a type. </summary>
            <remarks>Nested type separators are converted to '.' instead of '+' </remarks>
             <param name="assembly"> The assembly. </param>
             <param name="typeName"> Name of the type. </param>
            
             <returns>   The type. </returns>
        </member>
        <member name="T:Jint.Runtime.Interop.ObjectWrapper">
            <summary>
            Wraps a CLR instance
            </summary>
        </member>
        <member name="T:Jint.Runtime.Interop.SetterFunctionInstance">
            <summary>
            Represents a FunctionInstance wrapping a Clr setter.
            </summary>
        </member>
        <member name="T:Jint.Runtime.References.Reference">
            <summary>
            Represents the Reference Specification Type
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7
            </summary>
        </member>
    </members>
</doc>
