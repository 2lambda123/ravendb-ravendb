namespace Raven.Studio.Features.JsonEditor {
    using ActiproSoftware.Text.Parsing.Implementation;
    using System;
    using System.ComponentModel;
    using System.Reflection;
    
    
    /// <summary>
    /// Contains the AST node IDs for the <c>Json</c> language.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v12.1.561.0 (http://www.actiprosoftware.com).
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "12.1.561.0")]
    public partial class JsonAstNodeId : AstNodeIdProviderBase {
        
        /// <summary>
        /// Gets the <c>Array</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Array")]
        public const Int32 Array = 1;
        
        /// <summary>
        /// Gets the <c>Object</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Object")]
        public const Int32 Object = 2;
        
        /// <summary>
        /// Gets the <c>StringValue</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("String")]
        public const Int32 StringValue = 3;
        
        /// <summary>
        /// Gets the <c>Value</c> AST node ID.
        /// </summary>
        [DescriptionAttribute("Value")]
        public const Int32 Value = 4;
        
        /// <summary>
        /// Gets the minimum AST node ID returned by this provider.
        /// </summary>
        /// <value>The minimum AST node ID returned by this provider.</value>
        public override Int32 MinId {
            get {
                return 1;
            }
        }
        
        /// <summary>
        /// Gets the maximum AST node ID returned by this provider.
        /// </summary>
        /// <value>The maximum AST node ID returned by this provider.</value>
        public override Int32 MaxId {
            get {
                return 4;
            }
        }
        
        /// <summary>
        /// Returns whether the specified ID value is valid for this AST node ID provider.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns>
        public override Boolean ContainsId(Int32 id) {
            return ((id >= MinId) 
                        && (id <= MaxId));
        }
        
        /// <summary>
        /// Returns the actual string representation for the specified AST node ID.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns>The actual string representation for the specified AST node ID.</returns>
        public override String GetDescription(Int32 id) {
            FieldInfo[] fields = typeof(JsonAstNodeId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    Object[] customAttributes = field.GetCustomAttributes(typeof(DescriptionAttribute), false);
                    if (((customAttributes != null) 
                                && (customAttributes.Length > 0))) {
                        return ((DescriptionAttribute)(customAttributes[0])).Description;
                    }
                    else {
                        return field.Name;
                    }
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns the string-based key for the specified AST node ID.
        /// </summary>
        /// <param name="id">The AST node ID to examine.</param>
        /// <returns>The string-based key for the specified AST node ID.</returns>
        public override String GetKey(Int32 id) {
            FieldInfo[] fields = typeof(JsonAstNodeId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    return field.Name;
                }
            }
            return null;
        }
    }
}
