@use "sass:math";

input {
    &[type="checkbox"],
    &[type="radio"] {
        cursor: pointer;
    }
}

@mixin check-variant($color) {
    .form-check-input {
        border-color: $color;

        &:focus {
            box-shadow: 0 0 $input-btn-focus-blur $input-btn-focus-width rgba($color, $input-btn-focus-color-opacity);
        }

        &:checked {
            background-color: $color;
            border-color: $color;
        }
    }
}

.form-switch {
    .form-check-input {
        &[disabled],
        &:disabled {
            background-image: escape-svg(
                url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><path fill='#{$text-emphasis-color}' d='M0.1-2.9c-1.7,0-3,1.3-3,3s1.3,3,3,3s3-1.3,3-3S1.8-2.9,0.1-2.9z M0.1,2.3C-1,2.3-2,1.3-2,0.1S-1-2,0.1-2 s2.1,1,2.1,2.1S1.3,2.3,0.1,2.3z'/></svg>")
            );
            cursor: not-allowed;
        }
    }
}

@each $color, $value in $theme-colors {
    .form-check-#{$color} {
        @include check-variant($value);
    }
}
@mixin check-size-variant($ratio, $name) {
    .form-check-#{$name} {
        min-height: $form-check-min-height * $ratio;
        padding-left: $form-check-padding-start * $ratio;
        margin-bottom: $form-check-margin-bottom * $ratio;

        .form-check-input {
            margin-left: $form-check-padding-start * -1 * $ratio;
            width: $form-check-input-width * $ratio;
            height: $form-check-input-width * $ratio;
            //margin-top: ($line-height-base - $form-check-input-width) * .5  * $ratio;
        }

        &.form-check-reverse {
            padding-right: $form-check-padding-start * $ratio;
            padding-left: 0;

            .form-check-input {
                margin-right: $form-check-padding-start * -1 * $ratio;
            }
        }
    }
}

@include check-size-variant(1.61, "lg");
@include check-size-variant(0.61, "sm");