<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="2340" failures="0" errors="0" time="55.323">
  <testsuite name="rangeAggregator" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="24.795" tests="14">
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - When the work start time exactly equals the work end time" name="rangeAggregator Calculate number of concurrent working indexes - When the work start time exactly equals the work end time" time="0.008">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - When one range starts immidiately after previous range" name="rangeAggregator Calculate number of concurrent working indexes - When one range starts immidiately after previous range" time="0.004">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - More than one index is working at the same time ranges" name="rangeAggregator Calculate number of concurrent working indexes - More than one index is working at the same time ranges" time="0.004">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Multiple time ranges" name="rangeAggregator Calculate number of concurrent working indexes - Multiple time ranges" time="0.005">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Single time range" name="rangeAggregator Calculate number of concurrent working indexes - Single time range" time="0.001">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Two different, separated time ranges" name="rangeAggregator Calculate number of concurrent working indexes - Two different, separated time ranges" time="0.002">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Many indexes with the same start time, different end times" name="rangeAggregator Calculate number of concurrent working indexes - Many indexes with the same start time, different end times" time="0.002">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes, some with the same start &amp; end time points" name="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes, some with the same start &amp; end time points" time="0.007">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Many indexes with the same end time, different start times" name="rangeAggregator Calculate number of concurrent working indexes - Many indexes with the same end time, different start times" time="0.003">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 1" name="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 1" time="0.005">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 2" name="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 2" time="0.014">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 3" name="rangeAggregator Calculate number of concurrent working indexes - Multiple indexes with overlaping time ranges - sample flow 3" time="0.002">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Index time range is within another index time range" name="rangeAggregator Calculate number of concurrent working indexes - Index time range is within another index time range" time="0.002">
    </testcase>
    <testcase classname="rangeAggregator Calculate number of concurrent working indexes - Many indexes time range within another range" name="rangeAggregator Calculate number of concurrent working indexes - Many indexes time range within another range" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="graphHelper" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="24.893" tests="2">
    <testcase classname="graphHelper shortenLine Calculate shorten horizontal line left-&gt;right" name="graphHelper shortenLine Calculate shorten horizontal line left-&gt;right" time="0.005">
    </testcase>
    <testcase classname="graphHelper shortenLine Calculate shorten horizontal line right-&gt;left" name="graphHelper shortenLine Calculate shorten horizontal line right-&gt;left" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="documentHelpers" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="25.866" tests="3">
    <testcase classname="documentHelpers should find intersection on simple documents" name="documentHelpers should find intersection on simple documents" time="0.007">
    </testcase>
    <testcase classname="documentHelpers should find intersection on complex object" name="documentHelpers should find intersection on complex object" time="0.001">
    </testcase>
    <testcase classname="documentHelpers should infer @collection and ClrType from metadata" name="documentHelpers should infer @collection and ClrType from metadata" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="RQL Query Visitor" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="29.415" tests="6">
    <testcase classname="RQL Query Visitor can extract alias from collection - w/o as" name="RQL Query Visitor can extract alias from collection - w/o as" time="0.253">
    </testcase>
    <testcase classname="RQL Query Visitor can extract alias from collection - w as" name="RQL Query Visitor can extract alias from collection - w as" time="0.005">
    </testcase>
    <testcase classname="RQL Query Visitor can extract alias from index - w/o as" name="RQL Query Visitor can extract alias from index - w/o as" time="0.022">
    </testcase>
    <testcase classname="RQL Query Visitor can extract alias from index - w/ as" name="RQL Query Visitor can extract alias from index - w/ as" time="0.002">
    </testcase>
    <testcase classname="RQL Query Visitor doesn&apos;t throw when no from alias - index" name="RQL Query Visitor doesn&apos;t throw when no from alias - index" time="0.001">
    </testcase>
    <testcase classname="RQL Query Visitor doesn&apos;t throw when no from alias - collection" name="RQL Query Visitor doesn&apos;t throw when no from alias - collection" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ORDER BY statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="29.529" tests="1">
    <testcase classname="ORDER BY statement parser single" name="ORDER BY statement parser single" time="0.338">
    </testcase>
  </testsuite>
  <testsuite name="SELECT statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:14" time="1.086" tests="3">
    <testcase classname="SELECT statement parser single" name="SELECT statement parser single" time="0.183">
    </testcase>
    <testcase classname="SELECT statement parser distinct" name="SELECT statement parser distinct" time="0.007">
    </testcase>
    <testcase classname="SELECT statement parser javascript" name="SELECT statement parser javascript" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TimeSeries statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:14" time="1.333" tests="2">
    <testcase classname="TimeSeries statement parser declare timeseries" name="TimeSeries statement parser declare timeseries" time="0.41">
    </testcase>
    <testcase classname="TimeSeries statement parser timeseries in projection" name="TimeSeries statement parser timeseries in projection" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="WHERE statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:09" time="6.135" tests="8">
    <testcase classname="WHERE statement parser single literal" name="WHERE statement parser single literal" time="0.177">
    </testcase>
    <testcase classname="WHERE statement parser comma" name="WHERE statement parser comma" time="0.069">
    </testcase>
    <testcase classname="WHERE statement parser true and exist" name="WHERE statement parser true and exist" time="0.056">
    </testcase>
    <testcase classname="WHERE statement parser binary and all in()" name="WHERE statement parser binary and all in()" time="0.053">
    </testcase>
    <testcase classname="WHERE statement parser equal" name="WHERE statement parser equal" time="0.005">
    </testcase>
    <testcase classname="WHERE statement parser binary and between" name="WHERE statement parser binary and between" time="0.01">
    </testcase>
    <testcase classname="WHERE statement parser can&apos;t use `where` as from alias" name="WHERE statement parser can&apos;t use `where` as from alias" time="0.004">
    </testcase>
    <testcase classname="WHERE statement parser parsing function" name="WHERE statement parser parsing function" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="can complete order by " errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.294" tests="9">
    <testcase classname="can complete order by  can complete fields in order by - at root level" name="can complete order by  can complete fields in order by - at root level" time="0.168">
    </testcase>
    <testcase classname="can complete order by  can complete fields in order by - nested field" name="can complete order by  can complete fields in order by - nested field" time="0.033">
    </testcase>
    <testcase classname="can complete order by  can complete order by random()" name="can complete order by  can complete order by random()" time="0.003">
    </testcase>
    <testcase classname="can complete order by  can complete order by score()" name="can complete order by  can complete order by score()" time="0.003">
    </testcase>
    <testcase classname="can complete order by  can complete next keywords after field" name="can complete order by  can complete next keywords after field" time="0.062">
    </testcase>
    <testcase classname="can complete order by  can complete as operator after field" name="can complete order by  can complete as operator after field" time="0.003">
    </testcase>
    <testcase classname="can complete order by  can complete ordering type" name="can complete order by  can complete ordering type" time="0.016">
    </testcase>
    <testcase classname="can complete order by  can complete asc/desc when NO ordering type specified" name="can complete order by  can complete asc/desc when NO ordering type specified" time="0.004">
    </testcase>
    <testcase classname="can complete order by  can complete asc/desc when ordering type specified" name="can complete order by  can complete asc/desc when ordering type specified" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="can complete limit" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.32" tests="4">
    <testcase classname="can complete limit doesn&apos;t complete fields in limit - first position" name="can complete limit doesn&apos;t complete fields in limit - first position" time="0.264">
    </testcase>
    <testcase classname="can complete limit doesn&apos;t complete fields in limit - second position" name="can complete limit doesn&apos;t complete fields in limit - second position" time="0.06">
    </testcase>
    <testcase classname="can complete limit can suggest offset after limit provided" name="can complete limit can suggest offset after limit provided" time="0.007">
    </testcase>
    <testcase classname="can complete limit doesn&apos;t complete fields in offset" name="can complete limit doesn&apos;t complete fields in offset" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="can complete include" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.312" tests="6">
    <testcase classname="can complete include doesn&apos;t complete keywords as field name" name="can complete include doesn&apos;t complete keywords as field name" time="0.216">
    </testcase>
    <testcase classname="can complete include can complete field" name="can complete include can complete field" time="0.006">
    </testcase>
    <testcase classname="can complete include can complete next field" name="can complete include can complete next field" time="0.094">
    </testcase>
    <testcase classname="can complete include can include special functions" name="can complete include can include special functions" time="0.006">
    </testcase>
    <testcase classname="can complete include doesn&apos;t complete timings twice" name="can complete include doesn&apos;t complete timings twice" time="0.01">
    </testcase>
    <testcase classname="can complete include doesn&apos;t complete explanations twice" name="can complete include doesn&apos;t complete explanations twice" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="can complete from" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.355" tests="26">
    <testcase classname="can complete from empty" name="can complete from empty" time="0.14">
    </testcase>
    <testcase classname="can complete from partial" name="can complete from partial" time="0.089">
    </testcase>
    <testcase classname="can complete from declare function can complete declare function - empty query" name="can complete from declare function can complete declare function - empty query" time="0.002">
    </testcase>
    <testcase classname="can complete from declare function can complete declare function - before from stmt" name="can complete from declare function can complete declare function - before from stmt" time="0.022">
    </testcase>
    <testcase classname="can complete from from collection can complete @all_docs" name="can complete from from collection can complete @all_docs" time="0.018">
    </testcase>
    <testcase classname="can complete from from collection can complete collection" name="can complete from from collection can complete collection" time="0.006">
    </testcase>
    <testcase classname="can complete from from collection can complete quoted collection - open" name="can complete from from collection can complete quoted collection - open" time="0.009">
    </testcase>
    <testcase classname="can complete from from collection can complete quoted collection - closed" name="can complete from from collection can complete quoted collection - closed" time="0.002">
    </testcase>
    <testcase classname="can complete from from collection can complete collection name with where" name="can complete from from collection can complete collection name with where" time="0.023">
    </testcase>
    <testcase classname="can complete from from collection doesn&apos;t provide collection is already provided" name="can complete from from collection doesn&apos;t provide collection is already provided" time="0.003">
    </testcase>
    <testcase classname="can complete from from collection can complete inside" name="can complete from from collection can complete inside" time="0.002">
    </testcase>
    <testcase classname="can complete from from collection doesn&apos;t suggest special function in alias" name="can complete from from collection doesn&apos;t suggest special function in alias" time="0.004">
    </testcase>
    <testcase classname="can complete from from collection can complete collection with double quotes" name="can complete from from collection can complete collection with double quotes" time="0.001">
    </testcase>
    <testcase classname="can complete from from index can complete index" name="can complete from from index can complete index" time="0.009">
    </testcase>
    <testcase classname="can complete from from index can complete partial index" name="can complete from from index can complete partial index" time="0.003">
    </testcase>
    <testcase classname="can complete from from index can complete index name - no index yet defined" name="can complete from from index can complete index name - no index yet defined" time="0.002">
    </testcase>
    <testcase classname="can complete from from index can complete index name - when open double quote" name="can complete from from index can complete index name - when open double quote" time="0.003">
    </testcase>
    <testcase classname="can complete from from index can complete index name - when open single quote" name="can complete from from index can complete index name - when open single quote" time="0.002">
    </testcase>
    <testcase classname="can complete from from index can complete index name - when inside double quote" name="can complete from from index can complete index name - when inside double quote" time="0.002">
    </testcase>
    <testcase classname="can complete from from index can complete index name - when inside single quote" name="can complete from from index can complete index name - when inside single quote" time="0.001">
    </testcase>
    <testcase classname="can complete from from index can complete index name - when where exists" name="can complete from from index can complete index name - when where exists" time="0.002">
    </testcase>
    <testcase classname="can complete from with describe can complete from after declare function - w/o from ahead" name="can complete from with describe can complete from after declare function - w/o from ahead" time="0.009">
    </testcase>
    <testcase classname="can complete from with describe can complete from after declare function - with from ahead" name="can complete from with describe can complete from after declare function - with from ahead" time="0.002">
    </testcase>
    <testcase classname="can complete from alias has empty list when entering as alias" name="can complete from alias has empty list when entering as alias" time="0.006">
    </testcase>
    <testcase classname="can complete from alias can complete keywords when no alias yet defined" name="can complete from alias can complete keywords when no alias yet defined" time="0.002">
    </testcase>
    <testcase classname="can complete from alias can complete keywords when alias was defined" name="can complete from alias can complete keywords when alias was defined" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="can complete select" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.382" tests="13">
    <testcase classname="can complete select can complete fields - first field" name="can complete select can complete fields - first field" time="0.212">
    </testcase>
    <testcase classname="can complete select can complete fields - nested field - just after dot" name="can complete select can complete fields - nested field - just after dot" time="0.044">
    </testcase>
    <testcase classname="can complete select can complete fields - nested field - partial" name="can complete select can complete fields - nested field - partial" time="0.058">
    </testcase>
    <testcase classname="can complete select can complete fields - next field" name="can complete select can complete fields - next field" time="0.007">
    </testcase>
    <testcase classname="can complete select doesn&apos;t complete keywords in select" name="can complete select doesn&apos;t complete keywords in select" time="0.004">
    </testcase>
    <testcase classname="can complete select has empty list when defining select as alias" name="can complete select has empty list when defining select as alias" time="0.016">
    </testcase>
    <testcase classname="can complete select can suggest distinct in select stmt" name="can complete select can suggest distinct in select stmt" time="0.003">
    </testcase>
    <testcase classname="can complete select doesn&apos;t suggest distinct in select stmt, when after field" name="can complete select doesn&apos;t suggest distinct in select stmt, when after field" time="0.004">
    </testcase>
    <testcase classname="can complete select doesn&apos;t suggest group functions when no group by" name="can complete select doesn&apos;t suggest group functions when no group by" time="0.011">
    </testcase>
    <testcase classname="can complete select can suggest group functions when group by is defined" name="can complete select can suggest group functions when group by is defined" time="0.03">
    </testcase>
    <testcase classname="can complete select can complete suggest() function in select" name="can complete select can complete suggest() function in select" time="0.003">
    </testcase>
    <testcase classname="can complete select can complete declared functions in select" name="can complete select can complete declared functions in select" time="0.011">
    </testcase>
    <testcase classname="can complete select doesn&apos;t complete declared function argument names in select" name="can complete select doesn&apos;t complete declared function argument names in select" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="scanner seek" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.385" tests="17">
    <testcase classname="scanner seek can seek on empty - w/o whitespace after" name="scanner seek can seek on empty - w/o whitespace after" time="0.111">
    </testcase>
    <testcase classname="scanner seek can seek on empty - w/ whitespace before" name="scanner seek can seek on empty - w/ whitespace before" time="0.005">
    </testcase>
    <testcase classname="scanner seek can seek on empty - w/ whitespace after" name="scanner seek can seek on empty - w/ whitespace after" time="0.002">
    </testcase>
    <testcase classname="scanner seek can seek before empty collection - w/o whitespace after" name="scanner seek can seek before empty collection - w/o whitespace after" time="0.014">
    </testcase>
    <testcase classname="scanner seek can seek before empty collection - w/ whitespace after" name="scanner seek can seek before empty collection - w/ whitespace after" time="0.006">
    </testcase>
    <testcase classname="scanner seek just after token - w/o space after" name="scanner seek just after token - w/o space after" time="0.002">
    </testcase>
    <testcase classname="scanner seek just after token - w space after" name="scanner seek just after token - w space after" time="0.002">
    </testcase>
    <testcase classname="scanner seek can seek on partial collection - at the end" name="scanner seek can seek on partial collection - at the end" time="0.025">
    </testcase>
    <testcase classname="scanner seek can seek on partial collection - in the middle" name="scanner seek can seek on partial collection - in the middle" time="0.002">
    </testcase>
    <testcase classname="scanner seek can seek on partial collection" name="scanner seek can seek on partial collection" time="0.007">
    </testcase>
    <testcase classname="scanner seek can seek on after where - space after" name="scanner seek can seek on after where - space after" time="0.031">
    </testcase>
    <testcase classname="scanner seek can seek on after where - no space after" name="scanner seek can seek on after where - no space after" time="0.001">
    </testcase>
    <testcase classname="scanner seek can seek after closing bracket - w/o space after" name="scanner seek can seek after closing bracket - w/o space after" time="0.082">
    </testcase>
    <testcase classname="scanner seek can seek after closing bracket - w/ space after" name="scanner seek can seek after closing bracket - w/ space after" time="0.002">
    </testcase>
    <testcase classname="scanner seek can seek on nested path" name="scanner seek can seek on nested path" time="0.005">
    </testcase>
    <testcase classname="scanner seek can ignore whitespace" name="scanner seek can ignore whitespace" time="0.036">
    </testcase>
    <testcase classname="scanner seek can seek after declare function " name="scanner seek can seek after declare function " time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="can complete group by" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.405" tests="8">
    <testcase classname="can complete group by doesn&apos;t complete keywords as field name" name="can complete group by doesn&apos;t complete keywords as field name" time="0.225">
    </testcase>
    <testcase classname="can complete group by doesn&apos;t complete keywords as nested field name" name="can complete group by doesn&apos;t complete keywords as nested field name" time="0.014">
    </testcase>
    <testcase classname="can complete group by can complete Array() function in group by " name="can complete group by can complete Array() function in group by " time="0.004">
    </testcase>
    <testcase classname="can complete group by can complete next Array() function in group by " name="can complete group by can complete next Array() function in group by " time="0.085">
    </testcase>
    <testcase classname="can complete group by can complete next keywords after group by " name="can complete group by can complete next keywords after group by " time="0.024">
    </testcase>
    <testcase classname="can complete group by doesn&apos;t suggest array inside array" name="can complete group by doesn&apos;t suggest array inside array" time="0.004">
    </testcase>
    <testcase classname="can complete group by doesn&apos;t suggest array after nested property in array" name="can complete group by doesn&apos;t suggest array after nested property in array" time="0.02">
    </testcase>
    <testcase classname="can complete group by doesn&apos;t suggest array after field" name="can complete group by doesn&apos;t suggest array after field" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="can complete filter" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.422" tests="5">
    <testcase classname="can complete filter doesn&apos;t complete keywords as field name" name="can complete filter doesn&apos;t complete keywords as field name" time="0.186">
    </testcase>
    <testcase classname="can complete filter doesn&apos;t complete keywords as nested field name" name="can complete filter doesn&apos;t complete keywords as nested field name" time="0.02">
    </testcase>
    <testcase classname="can complete filter can complete next keywords after filter" name="can complete filter can complete next keywords after filter" time="0.095">
    </testcase>
    <testcase classname="can complete filter can complete filter_limit after filter" name="can complete filter can complete filter_limit after filter" time="0.021">
    </testcase>
    <testcase classname="can complete filter can&apos;t complete filter_limit when no filter" name="can complete filter can&apos;t complete filter_limit when no filter" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="can complete where" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:33:44" time="31.486" tests="9">
    <testcase classname="can complete where can complete special functions - collection has fields" name="can complete where can complete special functions - collection has fields" time="0.218">
    </testcase>
    <testcase classname="can complete where can complete special functions - collection doesn&apos;t have fields" name="can complete where can complete special functions - collection doesn&apos;t have fields" time="0.018">
    </testcase>
    <testcase classname="can complete where can complete fields - at root level" name="can complete where can complete fields - at root level" time="0.003">
    </testcase>
    <testcase classname="can complete where can complete fields - inside special functions" name="can complete where can complete fields - inside special functions" time="0.029">
    </testcase>
    <testcase classname="can complete where doesn&apos;t complete functions inside functions" name="can complete where doesn&apos;t complete functions inside functions" time="0.009">
    </testcase>
    <testcase classname="can complete where doesn&apos;t complete root keywords inside special functions" name="can complete where doesn&apos;t complete root keywords inside special functions" time="0.004">
    </testcase>
    <testcase classname="can complete where doesn&apos;t complete suggest in where" name="can complete where doesn&apos;t complete suggest in where" time="0.005">
    </testcase>
    <testcase classname="can complete where and / or  can complete and/or in where after predicate" name="can complete where and / or  can complete and/or in where after predicate" time="0.117">
    </testcase>
    <testcase classname="can complete where operators can complete math operators" name="can complete where operators can complete math operators" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="UPDATE statement" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:10" time="5.838" tests="3">
    <testcase classname="UPDATE statement doesn&apos;t throw when brackets are symmetrical" name="UPDATE statement doesn&apos;t throw when brackets are symmetrical" time="0.172">
    </testcase>
    <testcase classname="UPDATE statement doesn&apos;t throw with JSON inside" name="UPDATE statement doesn&apos;t throw with JSON inside" time="0.179">
    </testcase>
    <testcase classname="UPDATE statement throws when brackets aren&apos;t symmetrical" name="UPDATE statement throws when brackets aren&apos;t symmetrical" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="GROUP BY statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:15" time="1.054" tests="4">
    <testcase classname="GROUP BY statement parser single" name="GROUP BY statement parser single" time="0.187">
    </testcase>
    <testcase classname="GROUP BY statement parser with alias" name="GROUP BY statement parser with alias" time="0.008">
    </testcase>
    <testcase classname="GROUP BY statement parser unexpected comma before alias" name="GROUP BY statement parser unexpected comma before alias" time="0.014">
    </testcase>
    <testcase classname="GROUP BY statement parser can&apos;t use `group by` as from alias" name="GROUP BY statement parser can&apos;t use `group by` as from alias" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="can complete fields" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:09" time="7.079" tests="22">
    <testcase classname="can complete fields from collection can complete in group by - w/o prefix" name="can complete fields from collection can complete in group by - w/o prefix" time="0.199">
    </testcase>
    <testcase classname="can complete fields from collection can complete in group by - w/ prefix" name="can complete fields from collection can complete in group by - w/ prefix" time="0.015">
    </testcase>
    <testcase classname="can complete fields from collection can complete nested field in group by - w/ prefix" name="can complete fields from collection can complete nested field in group by - w/ prefix" time="0.009">
    </testcase>
    <testcase classname="can complete fields from collection can complete partial in group by " name="can complete fields from collection can complete partial in group by " time="0.041">
    </testcase>
    <testcase classname="can complete fields from collection can complete nested path in group by " name="can complete fields from collection can complete nested path in group by " time="0.048">
    </testcase>
    <testcase classname="can complete fields from collection can complete inner fields in group by - with spaces " name="can complete fields from collection can complete inner fields in group by - with spaces " time="0.003">
    </testcase>
    <testcase classname="can complete fields from collection can complete inner fields in group by - with out spaces " name="can complete fields from collection can complete inner fields in group by - with out spaces " time="0.003">
    </testcase>
    <testcase classname="can complete fields from collection can complete after comma - root" name="can complete fields from collection can complete after comma - root" time="0.015">
    </testcase>
    <testcase classname="can complete fields from collection can complete after comma - inner" name="can complete fields from collection can complete after comma - inner" time="0.005">
    </testcase>
    <testcase classname="can complete fields from collection doesn&apos;t complete when comma is missing" name="can complete fields from collection doesn&apos;t complete when comma is missing" time="0.005">
    </testcase>
    <testcase classname="can complete fields from collection can complete next field when no space after comma" name="can complete fields from collection can complete next field when no space after comma" time="0.005">
    </testcase>
    <testcase classname="can complete fields from collection can complete filed inside include revisions" name="can complete fields from collection can complete filed inside include revisions" time="0.015">
    </testcase>
    <testcase classname="can complete fields from index doesn&apos;t suggest group by on index" name="can complete fields from index doesn&apos;t suggest group by on index" time="0.009">
    </testcase>
    <testcase classname="can complete fields from index can complete index fields - w/o prefix" name="can complete fields from index can complete index fields - w/o prefix" time="0.061">
    </testcase>
    <testcase classname="can complete fields from index can complete index fields - w/ prefix" name="can complete fields from index can complete index fields - w/ prefix" time="0.021">
    </testcase>
    <testcase classname="can complete fields from index can complete fields with prefix when prefix is defined" name="can complete fields from index can complete fields with prefix when prefix is defined" time="0.028">
    </testcase>
    <testcase classname="can complete fields id() field can complete id field in index" name="can complete fields id() field can complete id field in index" time="0.003">
    </testcase>
    <testcase classname="can complete fields id() field can complete id() field in collection query" name="can complete fields id() field can complete id() field in collection query" time="0.003">
    </testcase>
    <testcase classname="can complete fields id() field doesn&apos;t complete id() field in collection query - when group by exist" name="can complete fields id() field doesn&apos;t complete id() field in collection query - when group by exist" time="0.004">
    </testcase>
    <testcase classname="can complete fields escaping can escape field with single quote" name="can complete fields escaping can escape field with single quote" time="0.004">
    </testcase>
    <testcase classname="can complete fields escaping can retain existing quotation - single" name="can complete fields escaping can retain existing quotation - single" time="0.017">
    </testcase>
    <testcase classname="can complete fields escaping can retain existing quotation - double" name="can complete fields escaping can retain existing quotation - double" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Parameter statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:15" time="1.214" tests="4">
    <testcase classname="Parameter statement parser uncompleted definition of parameter" name="Parameter statement parser uncompleted definition of parameter" time="0.254">
    </testcase>
    <testcase classname="Parameter statement parser before query" name="Parameter statement parser before query" time="0.018">
    </testcase>
    <testcase classname="Parameter statement parser JSON without bracelets throws" name="Parameter statement parser JSON without bracelets throws" time="0.012">
    </testcase>
    <testcase classname="Parameter statement parser Json object" name="Parameter statement parser Json object" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="LOAD statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:15" time="1.082" tests="3">
    <testcase classname="LOAD statement parser single" name="LOAD statement parser single" time="0.141">
    </testcase>
    <testcase classname="LOAD statement parser array" name="LOAD statement parser array" time="0.009">
    </testcase>
    <testcase classname="LOAD statement parser load with reduce" name="LOAD statement parser load with reduce" time="0.083">
    </testcase>
  </testsuite>
  <testsuite name="FROM statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="0.973" tests="7">
    <testcase classname="FROM statement parser from collection" name="FROM statement parser from collection" time="0.111">
    </testcase>
    <testcase classname="FROM statement parser from index (w/o quotes)" name="FROM statement parser from index (w/o quotes)" time="0.007">
    </testcase>
    <testcase classname="FROM statement parser from index (w/ quotes)" name="FROM statement parser from index (w/ quotes)" time="0.006">
    </testcase>
    <testcase classname="FROM statement parser from index (w/o collection)" name="FROM statement parser from index (w/o collection)" time="0.005">
    </testcase>
    <testcase classname="FROM statement parser from index &apos;" name="FROM statement parser from index &apos;" time="0.003">
    </testcase>
    <testcase classname="FROM statement parser from index d&quot;" name="FROM statement parser from index d&quot;" time="0.003">
    </testcase>
    <testcase classname="FROM statement parser can use index as projection field" name="FROM statement parser can use index as projection field" time="0.068">
    </testcase>
  </testsuite>
  <testsuite name="Filter statement parser" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="1.224" tests="11">
    <testcase classname="Filter statement parser single literal" name="Filter statement parser single literal" time="0.129">
    </testcase>
    <testcase classname="Filter statement parser comma" name="Filter statement parser comma" time="0.052">
    </testcase>
    <testcase classname="Filter statement parser true and exist and filter" name="Filter statement parser true and exist and filter" time="0.082">
    </testcase>
    <testcase classname="Filter statement parser spatial" name="Filter statement parser spatial" time="0.045">
    </testcase>
    <testcase classname="Filter statement parser equal" name="Filter statement parser equal" time="0.003">
    </testcase>
    <testcase classname="Filter statement parser binary and function" name="Filter statement parser binary and function" time="0.012">
    </testcase>
    <testcase classname="Filter statement parser can&apos;t use `filter` as from alias" name="Filter statement parser can&apos;t use `filter` as from alias" time="0.01">
    </testcase>
    <testcase classname="Filter statement parser parsing function" name="Filter statement parser parsing function" time="0.003">
    </testcase>
    <testcase classname="Filter statement parser binary and function with filterLimit" name="Filter statement parser binary and function with filterLimit" time="0.007">
    </testcase>
    <testcase classname="Filter statement parser binary and function with only filterLimit" name="Filter statement parser binary and function with only filterLimit" time="0.001">
    </testcase>
    <testcase classname="Filter statement parser binary and function with limit and the end" name="Filter statement parser binary and function with limit and the end" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="queryUtil" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="1.261" tests="13">
    <testcase classname="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can append select" name="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can append select" time="0.104">
    </testcase>
    <testcase classname="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can replace select stmt" name="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can replace select stmt" time="0.068">
    </testcase>
    <testcase classname="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can work with index and limit" name="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can work with index and limit" time="0.016">
    </testcase>
    <testcase classname="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can work with index and include" name="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can work with index and include" time="0.009">
    </testcase>
    <testcase classname="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can replace js select" name="queryUtil replaceSelectAndIncludeWithFetchAllStoredFields can replace js select" time="0.005">
    </testcase>
    <testcase classname="queryUtil getCollectionOrIndexName can get from collection" name="queryUtil getCollectionOrIndexName can get from collection" time="0.009">
    </testcase>
    <testcase classname="queryUtil getCollectionOrIndexName can get from index" name="queryUtil getCollectionOrIndexName can get from index" time="0.002">
    </testcase>
    <testcase classname="queryUtil getCollectionOrIndexName can handle unknown" name="queryUtil getCollectionOrIndexName can handle unknown" time="0.019">
    </testcase>
    <testcase classname="queryUtil isDynamicQuery from collection is dynamic" name="queryUtil isDynamicQuery from collection is dynamic" time="0.003">
    </testcase>
    <testcase classname="queryUtil isDynamicQuery from index is not dynamic" name="queryUtil isDynamicQuery from index is not dynamic" time="0.001">
    </testcase>
    <testcase classname="queryUtil escapeName adds quotes on simple names" name="queryUtil escapeName adds quotes on simple names" time="0.001">
    </testcase>
    <testcase classname="queryUtil escapeName escapes single quotes" name="queryUtil escapeName escapes single quotes" time="0">
    </testcase>
    <testcase classname="queryUtil escapeName escapes the escape char" name="queryUtil escapeName escapes the escape char" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="databasesManager" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="8.497" tests="6">
    <testcase classname="databasesManager can handle non-sharded database" name="databasesManager can handle non-sharded database" time="0.005">
    </testcase>
    <testcase classname="databasesManager can handle sharded database" name="databasesManager can handle sharded database" time="0.005">
    </testcase>
    <testcase classname="databasesManager can get single shard by name" name="databasesManager can get single shard by name" time="0.003">
    </testcase>
    <testcase classname="databasesManager can get sharded database by name" name="databasesManager can get sharded database by name" time="0.002">
    </testcase>
    <testcase classname="databasesManager can update manager after db was deleted" name="databasesManager can update manager after db was deleted" time="0.002">
    </testcase>
    <testcase classname="databasesManager can update manager after single shard was deleted" name="databasesManager can update manager after single shard was deleted" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RavenDB Queries" errors="0" failures="0" skipped="5" timestamp="2022-09-02T10:33:44" time="40.434" tests="2085">
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; group by &apos;1&apos; select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " name="RavenDB Queries can parse -  from &apos;Products&apos; group by &apos;1&apos; select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " time="0.269">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.JobId = $p0 and @metadata.Errored = $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.JobId = $p0 and @metadata.Errored = $p1 " time="0.102">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) select facet(id(&apos;facets/AttributeFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) select facet(id(&apos;facets/AttributeFacets&apos;)) " time="0.15">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0)) " name="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0)) " time="0.038">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByNameWithAdditionalSources&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByNameWithAdditionalSources&apos; where Name = $p0 limit $p1, $p2 " time="0.014">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices between $p0 and $p1) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices between $p0 and $p1) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.036">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitiesByLocation&apos; " name="RavenDB Queries can parse -  from index &apos;EntitiesByLocation&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age = $p0 limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyTsIndex/AllDocs&apos; " name="RavenDB Queries can parse -  from index &apos;MyTsIndex/AllDocs&apos; " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Days&apos;  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Days&apos;  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.084">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Simple/Index&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Simple/Index&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndexWithStoredArray&apos; as x select { Address : x.Address+&quot;22&quot;, StoredTennatns : x.StoredTennatns } " name="RavenDB Queries can parse -  from index &apos;UsersIndexWithStoredArray&apos; as x select { Address : x.Address+&quot;22&quot;, StoredTennatns : x.StoredTennatns } " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionDynamicParameter&apos; " name="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionDynamicParameter&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Clients&apos; where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Clients&apos; where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 " time="0.015">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() desc, Age as long " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() desc, Age as long " time="0.02">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Accounts/Search&apos; order by AccountId select AccountId, AccountName, UserName, DesignName " name="RavenDB Queries can parse -  from index &apos;Accounts/Search&apos; order by AccountId select AccountId, AccountName, UserName, DesignName " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, _function) {   	var _super = _function.AccountsReceivable;   	var _var = load(_function.EmployeesIds);   	return { Company : _function, Number : _super, Employees : _var.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as o load o.Company as _function select output(o, _function) " name="RavenDB Queries can parse -  declare function output(o, _function) {   	var _super = _function.AccountsReceivable;   	var _var = load(_function.EmployeesIds);   	return { Company : _function, Number : _super, Employees : _var.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as o load o.Company as _function select output(o, _function) " time="0.026">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &lt;= $p0 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &lt;= $p0 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { Children : (x.Children!=null?x.Children:[{},{Children:[{},{}]},{Names:[&quot;john&quot;,&quot;paul&quot;,&quot;george&quot;,&quot;ringo&quot;]}]) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { Children : (x.Children!=null?x.Children:[{},{Children:[{},{}]},{Names:[&quot;john&quot;,&quot;paul&quot;,&quot;george&quot;,&quot;ringo&quot;]}]) } limit $p0, $p1 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Teams&apos; where IsYellow = $p0 and IsGreen = $p1 " name="RavenDB Queries can parse -  from &apos;Teams&apos; where IsYellow = $p0 and IsGreen = $p1 " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Advice/Search&apos; where search(SearchField, $p0) select facet(id(&apos;facets/ArticleFacets&apos;)) include Sections limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Advice/Search&apos; where search(SearchField, $p0) select facet(id(&apos;facets/ArticleFacets&apos;)) include Sections limit $p1, $p2 " time="0.08">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrdersByCompany&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;OrdersByCompany&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccommodationsIndex&apos; where exists(ImageUrl) and exists(Categories) and ExistsInLanguage = $p0 " name="RavenDB Queries can parse -  from index &apos;AccommodationsIndex&apos; where exists(ImageUrl) and exists(Categories) and ExistsInLanguage = $p0 " time="0.012">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithTags&apos; where (Tags = $p0) and (Tags = $p1) " name="RavenDB Queries can parse -  from &apos;EntityWithTags&apos; where (Tags = $p0) and (Tags = $p1) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Categories/InUse/ByCity&apos; " name="RavenDB Queries can parse -  from index &apos;Categories/InUse/ByCity&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TagsCount&apos; order by Count as long desc limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TagsCount&apos; order by Count as long desc limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company as RenamedCompany, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company as RenamedCompany, count() " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Debtors&apos; as d select { Name : d.Name, OrderDays : d.OrderDays.filter((function(a){return a.Day!=null;})).reduce(function(_obj, _cur) {_obj[(function(a){return a.Day;})(_cur)] = (function(a){return a.Name;})(_cur);return _obj;}, {}) } " name="RavenDB Queries can parse -  from &apos;Debtors&apos; as d select { Name : d.Name, OrderDays : d.OrderDays.filter((function(a){return a.Day!=null;})).reduce(function(_obj, _cur) {_obj[(function(a){return a.Day;})(_cur)] = (function(a){return a.Name;})(_cur);return _obj;}, {}) } " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 select standarddeviation(), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 select standarddeviation(), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName/TimeSeries&apos; select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName/TimeSeries&apos; select Name limit $p0, $p1 " time="0.014">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where LastName = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where LastName = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate group by &apos;1 Months&apos;   select average(), max()) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate group by &apos;1 Months&apos;   select average(), max()) as __timeSeriesQueryFunction0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SearchableElements&apos; where PermittedUsers in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;SearchableElements&apos; where PermittedUsers in ($p0) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Friends&apos; " name="RavenDB Queries can parse -  from &apos;Friends&apos; " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(Address, $p0) " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(Address, $p0) " time="0.012">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArrayWithIndex = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u0006Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\u0006Users&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(BirthDate &gt;= $p1 and BirthDate &lt; $p2, BirthDate &gt;= $p3 and BirthDate &lt; $p4, $p0) " name="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(BirthDate &gt;= $p1 and BirthDate &lt; $p2, BirthDate &gt;= $p3 and BirthDate &lt; $p4, $p0) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LastAccessPerUserDateTimeDefaultIndex&apos; select Name, LastAccess " name="RavenDB Queries can parse -  from index &apos;LastAccessPerUserDateTimeDefaultIndex&apos; select Name, LastAccess " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where ShipTo.City = $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where ShipTo.City = $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestClasses&apos; select distinct Value2 " name="RavenDB Queries can parse -  from &apos;TestClasses&apos; select distinct Value2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OrdersMapReduceIndex&apos; " name="RavenDB Queries can parse -  from index &apos;OrdersMapReduceIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Courses/Search2&apos; where Query = $p0 " name="RavenDB Queries can parse -  from index &apos;Courses/Search2&apos; where Query = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 or (Name = $p1 and Name = $p2)) or (Name = $p3 and Name = $p4) " name="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 or (Name = $p1 and Name = $p2)) or (Name = $p3 and Name = $p4) " time="0.017">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ThenByIndex&apos; select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate " name="RavenDB Queries can parse -  from index &apos;ThenByIndex&apos; select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate " time="0.022">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product select key() as ProductName, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product select key() as ProductName, count() " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dogs&apos; where Cute = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Dogs&apos; where Cute = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) " name="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) " time="0.037">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeoutsIndex&apos; where Owner = $p0 order by Time select Time " name="RavenDB Queries can parse -  from index &apos;TimeoutsIndex&apos; where Owner = $p0 order by Time select Time " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedField2&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedField2&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where entry.IsPublic = $p0 load entry.TeamCityBuildLocalId as __load select __load.BuildDate " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where entry.IsPublic = $p0 load entry.TeamCityBuildLocalId as __load select __load.BuildDate " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DateIndex&apos; where DateTime = $p0 " name="RavenDB Queries can parse -  from index &apos;DateIndex&apos; where DateTime = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by N1_D_Range desc select SongId, NumericAttributes limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by N1_D_Range desc select SongId, NumericAttributes limit $p0, $p1 " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 and Name = $p1) and Name = $p2) or Name = $p3) or Name = $p4 " name="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 and Name = $p1) and Name = $p2) or Name = $p3) or Name = $p4 " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByPhone&apos; " name="RavenDB Queries can parse -  from index &apos;Companies/ByPhone&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; order by Id " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; order by Id " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DoubleIndex&apos; select id() as Id, DoubleValue " name="RavenDB Queries can parse -  from index &apos;DoubleIndex&apos; select id() as Id, DoubleValue " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByCompany&apos; " name="RavenDB Queries can parse -  from index &apos;Orders/ByCompany&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorterWithOperations_697&apos;) desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorterWithOperations_697&apos;) desc " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where Address_ZipCode = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where Address_ZipCode = $p0 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestViews&apos; as x select { Children : (x.Children!=null?x.Children:[]) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestViews&apos; as x select { Children : (x.Children!=null?x.Children:[]) } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex2&apos; where spatial.within(Coordinates, spatial.wkt($p0)) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex2&apos; where spatial.within(Coordinates, spatial.wkt($p0)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyJSIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName " name="RavenDB Queries can parse -  from index &apos;MyJSIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Index&apos; select NameDictionary, Name, NameArray, LongString limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;User/Index&apos; select NameDictionary, Name, NameArray, LongString limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Color/ForSearch&apos; where CreatedDate between $p0 and $p1 select facet(CreatedDate &lt; $p2, CreatedDate &gt;= $p3 and CreatedDate &lt; $p4, CreatedDate &gt;= $p5 and CreatedDate &lt; $p6, CreatedDate &gt;= $p7 and CreatedDate &lt; $p8, CreatedDate &gt;= $p9 and CreatedDate &lt; $p10, CreatedDate &gt;= $p11 and CreatedDate &lt; $p12, CreatedDate &gt;= $p13) as CreatedDate " name="RavenDB Queries can parse -  from index &apos;Color/ForSearch&apos; where CreatedDate between $p0 and $p1 select facet(CreatedDate &lt; $p2, CreatedDate &gt;= $p3 and CreatedDate &lt; $p4, CreatedDate &gt;= $p5 and CreatedDate &lt; $p6, CreatedDate &gt;= $p7 and CreatedDate &lt; $p8, CreatedDate &gt;= $p9 and CreatedDate &lt; $p10, CreatedDate &gt;= $p11 and CreatedDate &lt; $p12, CreatedDate &gt;= $p13) as CreatedDate " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArrayWithIndex = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Zoom &gt; $p0 select facet([NULL TO 2021-07-11T15-14-25.4134306], [2021-07-11T15-14-25.4134306 TO 2021-07-14T15-14-25.4134306], [2021-07-14T15-14-25.4134306 TO 2021-07-21T15-14-25.4134306], [2021-07-21T15-14-25.4134306 TO 2021-07-28T15-14-25.4134306], [2021-07-28T15-14-25.4134306 TO NULL]) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Zoom &gt; $p0 select facet([NULL TO 2021-07-11T15-14-25.4134306], [2021-07-11T15-14-25.4134306 TO 2021-07-14T15-14-25.4134306], [2021-07-14T15-14-25.4134306 TO 2021-07-21T15-14-25.4134306], [2021-07-21T15-14-25.4134306 TO 2021-07-28T15-14-25.4134306], [2021-07-28T15-14-25.4134306 TO NULL]) " time="0.04">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) order by CreatedDate " name="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) order by CreatedDate " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Items/Numbers&apos; select id() as Id, Int1, Int2, Double1, Double2, Decimal1, Decimal2, Long1, Long2 " name="RavenDB Queries can parse -  from index &apos;Items/Numbers&apos; select id() as Id, Int1, Int2, Double1, Double2, Decimal1, Decimal2, Long1, Long2 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; order by Name " name="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; order by Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where &apos;Fields_users/1-A&apos; = $p0 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where &apos;Fields_users/1-A&apos; = $p0 " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where p.Age &gt; $p0 select timeseries(from p.Heartrate between $p1 and $p2 load Tag as src where (Values[0] &lt;= src.Accuracy)) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where p.Age &gt; $p0 select timeseries(from p.Heartrate between $p1 and $p2 load Tag as src where (Values[0] &lt;= src.Accuracy)) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Status = $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Status = $p0 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Hour &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Hour &gt;= $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc select Title limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc select Title limit $p0, $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Users&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u001bUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\u001bUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Rations&apos; where Composition[].IngredientId = $p0 " name="RavenDB Queries can parse -  from &apos;Rations&apos; where Composition[].IngredientId = $p0 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 and Name = $p1) and Name = $p2) and Name = $p3) and Name = $p4 " name="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 and Name = $p1) and Name = $p2) and Name = $p3) and Name = $p4 " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Registrations&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Registrations&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	return { Company : update.Name };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " name="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	return { Company : update.Name };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as x select timeseries(from x.&apos;gas m3 usage&apos; group by &apos;1 Days&apos;   select min(), max()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as x select timeseries(from x.&apos;gas m3 usage&apos; group by &apos;1 Days&apos;   select min(), max()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance(&apos;spatial.point(Latitude, Longitude)&apos;, spatial.point($p3, $p4)) desc " name="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance(&apos;spatial.point(Latitude, Longitude)&apos;, spatial.point($p3, $p4)) desc " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.GivenName+&quot; &quot;+customer.FamilyName, Phone : Object.keys(customer.Phones).map(function(a){return{Key: a,Value:customer.Phones[a]};}).filter(function(phone){return phone.Key===&quot;Work&quot;;}) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.GivenName+&quot; &quot;+customer.FamilyName, Phone : Object.keys(customer.Phones).map(function(a){return{Key: a,Value:customer.Phones[a]};}).filter(function(phone){return phone.Key===&quot;Work&quot;;}) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; where search(Name, $p0) limit $p1, $p2 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; " name="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; select School.Id " name="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; select School.Id " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; order by Name " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; order by Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost &lt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost &lt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyMultiMapCounterIndex&apos; " name="RavenDB Queries can parse -  from index &apos;MyMultiMapCounterIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestClasses&apos; select distinct Value " name="RavenDB Queries can parse -  from &apos;TestClasses&apos; select distinct Value " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(Children_BirthDate &gt;= &apos;2000-01-01T00:00:00.0000000&apos; and Children_BirthDate &lt; &apos;2009-12-31T00:00:00.0000000&apos;, Children_BirthDate &gt;= &apos;2010-01-01T00:00:00.0000000&apos; and Children_BirthDate &lt; &apos;2019-12-31T00:00:00.0000000&apos;, $p0) " name="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(Children_BirthDate &gt;= &apos;2000-01-01T00:00:00.0000000&apos; and Children_BirthDate &lt; &apos;2009-12-31T00:00:00.0000000&apos;, Children_BirthDate &gt;= &apos;2010-01-01T00:00:00.0000000&apos; and Children_BirthDate &lt; &apos;2019-12-31T00:00:00.0000000&apos;, $p0) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;   select max(), min() scale 0.01) as __timeSeriesQueryFunction limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;   select max(), min() scale 0.01) as __timeSeriesQueryFunction limit $p3, $p4 " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;KmGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;KmGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Year = $p0 and Series = $p1 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Year = $p0 and Series = $p1 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where search(Name, $p0) limit $p1, $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, avg(Price)) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, avg(Price)) " time="0.028">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SomeIndex&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;SomeIndex&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select facet(Name) " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select facet(Name) " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex14&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex14&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/With/DynamicBlittableJson/Extension/Methods&apos; " name="RavenDB Queries can parse -  from index &apos;Index/With/DynamicBlittableJson/Extension/Methods&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccItems/Attributes&apos; select facet(id(&apos;facets/AttributeFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;AccItems/Attributes&apos; select facet(id(&apos;facets/AttributeFacets&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Does_Not_Exist&apos; where FirstName = $p0 " name="RavenDB Queries can parse -  from index &apos;Does_Not_Exist&apos; where FirstName = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 or Revision &lt;= $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 or Revision &lt;= $p1 " time="0.023">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where Name = $p0 select key() as Name, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where Name = $p0 select key() as Name, count() " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where lucene(ExternalId, $p0) and lucene(Name, $p1) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where lucene(ExternalId, $p0) and lucene(Name, $p1) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Claims&apos; where MatchingStatus = $p0 order by ControlNumber limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Claims&apos; where MatchingStatus = $p0 order by ControlNumber limit $p1, $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersAndProductsByName&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersAndProductsByName&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where Company = $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where Company = $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as __load select __load " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as __load select __load " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as x select { CityName : x.user_address.city_name, Foo : &quot;foo&quot;+x.Age } " name="RavenDB Queries can parse -  from &apos;Users&apos; as x select { CityName : x.user_address.city_name, Foo : &quot;foo&quot;+x.Age } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex15&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex15&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 and CaseId = $p1) and (CaseId != $p2 or HistoryCode = $p3) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 and CaseId = $p1) and (CaseId != $p2 or HistoryCode = $p3) " time="0.012">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Cameras&apos; order by Zoom as long " name="RavenDB Queries can parse -  from &apos;Cameras&apos; order by Zoom as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where startsWith(Query, $p0) select Query " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where startsWith(Query, $p0) select Query " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Catalogs&apos; where Type = $p0 " name="RavenDB Queries can parse -  from &apos;Catalogs&apos; where Type = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include AddressId " name="RavenDB Queries can parse -  from &apos;Users&apos; include AddressId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;indexes/users/default&apos; select id() as Id " name="RavenDB Queries can parse -  from index &apos;indexes/users/default&apos; select id() as Id " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TranTestIndex&apos; where search(Trans_en, $p0) " name="RavenDB Queries can parse -  from index &apos;TranTestIndex&apos; where search(Trans_en, $p0) " time="0.026">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where id() != $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where id() != $p0 limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RavenDB/3248/TestObject/ByName&apos; " name="RavenDB Queries can parse -  from index &apos;RavenDB/3248/TestObject/ByName&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CategoriesWithChildrenCount&apos; " name="RavenDB Queries can parse -  from index &apos;CategoriesWithChildrenCount&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where Name = $p0 select key() as Name, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where Name = $p0 select key() as Name, sum(Quantity) as OrderedQuantity " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanDays = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanDays = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = cmpxchg($p0) and LastName = cmpxchg($p1) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = cmpxchg($p0) and LastName = cmpxchg($p1) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithNullableFields&apos; where TheNullableField != $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;WithNullableFields&apos; where TheNullableField != $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceCountersIndex&apos; where CompanyName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MapReduceCountersIndex&apos; where CompanyName = $p0 limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDataObjects&apos; where (A in ($p0)) and (Created &gt;= $p1) " name="RavenDB Queries can parse -  from &apos;TestDataObjects&apos; where (A in ($p0)) and (Created &gt;= $p1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_3102&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_3102&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total), sum(Quantity), avg(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total), sum(Quantity), avg(Total)) " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByContact&apos; select Name, Phone " name="RavenDB Queries can parse -  from index &apos;Companies/ByContact&apos; select Name, Phone " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersAndCompaniesIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UsersAndCompaniesIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Accounts&apos; order by Profile.Name select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor " name="RavenDB Queries can parse -  from &apos;Accounts&apos; order by Profile.Name select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((CaseId != $p0 and OrganizationId = $p1)) and HistoryCode = $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((CaseId != $p0 and OrganizationId = $p1)) and HistoryCode = $p2 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; as item load item.Categories as categories[] select { Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {__rvn0:__rvn0,name2:__rvn0.cat.Name[$p1]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.name};}) } limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; as item load item.Categories as categories[] select { Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {__rvn0:__rvn0,name2:__rvn0.cat.Name[$p1]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.name};}) } limit $p2, $p3 " time="0.012">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { FailedMin : 0, BooleanValue : x.BooleanValue, IntValue : x.IntValue, DecimalValue : x.DecimalValue } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { FailedMin : 0, BooleanValue : x.BooleanValue, IntValue : x.IntValue, DecimalValue : x.DecimalValue } limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Suppliers&apos; " name="RavenDB Queries can parse -  from &apos;Suppliers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIdx&apos; order by Foo " name="RavenDB Queries can parse -  from index &apos;MyIdx&apos; order by Foo " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Bars.Count = $p0 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Bars.Count = $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; order by Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; order by Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Teams&apos; where Developers[].UserId = $p0 " name="RavenDB Queries can parse -  from &apos;Teams&apos; where Developers[].UserId = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) and Bedrooms = $p3 select facet(id(&apos;facets/AttributeFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) and Bedrooms = $p3 select facet(id(&apos;facets/AttributeFacets&apos;)) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select Name, Time " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select Name, Time " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] &gt; $p0) group by &apos;1 Months&apos;   select average(), max(), min()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] &gt; $p0) group by &apos;1 Months&apos;   select average(), max(), min()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TaskIndex&apos; select facet(AssigneeId) " name="RavenDB Queries can parse -  from index &apos;TaskIndex&apos; select facet(AssigneeId) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CustomersIndex&apos; where lucene(Occupation, $p0) select distinct CustomerId include &apos;id()&apos; limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CustomersIndex&apos; where lucene(Occupation, $p0) select distinct CustomerId include &apos;id()&apos; limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingTests&apos; where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) " name="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingTests&apos; where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) " time="0.046">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale2&apos; where Any = $p0 select facet(id(&apos;facets/ProductFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale2&apos; where Any = $p0 select facet(id(&apos;facets/ProductFacets&apos;)) " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) " time="0.024">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OrgIndex&apos; " name="RavenDB Queries can parse -  from index &apos;OrgIndex&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EmployeeByRegionAndSalary&apos; where Region = $p0 select facet(id(&apos;facets/EmployeeFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;EmployeeByRegionAndSalary&apos; where Region = $p0 select facet(id(&apos;facets/EmployeeFacets&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where search(FirstName, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where search(FirstName, $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; " name="RavenDB Queries can parse -  from &apos;Articles&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ContractClauses&apos; as __alias0 where __alias0.CompanyId = $p0 order by &apos;Group&apos;, SortOrder as long select id(__alias0) as Id, __alias0.Name, __alias0.&apos;Group&apos;, __alias0.SortOrder, __alias0.Description " name="RavenDB Queries can parse -  from &apos;ContractClauses&apos; as __alias0 where __alias0.CompanyId = $p0 order by &apos;Group&apos;, SortOrder as long select id(__alias0) as Id, __alias0.Name, __alias0.&apos;Group&apos;, __alias0.SortOrder, __alias0.Description " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ShortUrlMapIndex&apos; where LongUrl in ($p0) " name="RavenDB Queries can parse -  from index &apos;ShortUrlMapIndex&apos; where LongUrl in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(DateOfListing &lt; $p2, DateOfListing &gt; $p3 and DateOfListing &lt; $p4, DateOfListing &gt; $p5 and DateOfListing &lt; $p6, DateOfListing &gt; $p7 and DateOfListing &lt; $p8, DateOfListing &gt; $p9) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(DateOfListing &lt; $p2, DateOfListing &gt; $p3 and DateOfListing &lt; $p4, DateOfListing &gt; $p5 and DateOfListing &lt; $p6, DateOfListing &gt; $p7 and DateOfListing &lt; $p8, DateOfListing &gt; $p9) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyClasses&apos; select Index, S limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyClasses&apos; select Index, S limit $p0, $p1 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where Fields_1-A = $p0 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where Fields_1-A = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/4&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/4&apos; order by Date " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StudentIndex&apos; " name="RavenDB Queries can parse -  from index &apos;StudentIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Toss/TagPerDay&apos; " name="RavenDB Queries can parse -  from index &apos;Toss/TagPerDay&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Answers/ByAnswerEntity&apos; where search(Content, $p0) order by Content limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Answers/ByAnswerEntity&apos; where search(Content, $p0) order by Content limit $p1, $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users&apos; " name="RavenDB Queries can parse -  from index &apos;Users&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, Lines[].Quantity select Lines[].Product as ProductName, Lines[].Quantity as Quantity, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, Lines[].Quantity select Lines[].Product as ProductName, Lines[].Quantity as Quantity, count() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay != $p0 " name="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay != $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score(), Age as long " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score(), Age as long " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleIndex&apos; as r load r.IdOtherEnt as other select { Id : id(r), NameOtherEnt : other.Name, PropBase : r.PropBase, Prop1 : r.Prop1, Prop2 : r.Prop2, Str : r.Str } " name="RavenDB Queries can parse -  from index &apos;SampleIndex&apos; as r load r.IdOtherEnt as other select { Id : id(r), NameOtherEnt : other.Name, PropBase : r.PropBase, Prop1 : r.Prop1, Prop2 : r.Prop2, Str : r.Str } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by id() " name="RavenDB Queries can parse -  from &apos;Users&apos; order by id() " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, &apos;Kilometers&apos;)) " name="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, &apos;Kilometers&apos;)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tags&apos; order by Name " name="RavenDB Queries can parse -  from &apos;Tags&apos; order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;   select max(), min() scale 0.01) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;   select max(), min() scale 0.01) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where NumericDict.1 = $p0 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where NumericDict.1 = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex1&apos; " name="RavenDB Queries can parse -  from index &apos;TestIndex1&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dummies&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;Dummies&apos; where Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Ticks &gt; $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Ticks &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(doc, person) {   	var occupations = doc.UncoveredOccupationInfos.map(function(y){return load(y.Occupation.DocumentId);});   	var projects = doc.UncoveredProjectInfos.map(function(y){return load(y.Project.DocumentId);});   	var publications = doc.UncoveredPublicationInfos.map(function(y){return load(y.Publication.DocumentId);});   	var classifications = publications.map(function(y){return load(y.Classification.DocumentId);});   	var mentorshipsRunning = doc.UncoveredRunningMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	var mentorshipsFinalized = doc.UncoveredFinalizedMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	var mentorshipsDissertation = doc.UncoveredDissertationInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	return { IndexId : id(doc).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0], IsPublic : doc.IsPublic, IsConfirmed : doc.IsConfirmedEst, IsConfirmedEng : doc.IsConfirmedEng, HasPublicDataEst : doc.UserHasPublicDataEst, HasPublicDataEng : doc.UserHasPublicDataEng, PersonId : id(doc.Person).toString(), PersonName : person.Name, Occupations : doc.UncoveredOccupationInfos.map(function(occ){return {DocumentId:occ.Occupation.Id.toString(),Period:load(occ.Occupation.DocumentId).Period,IsActive:load(occ.Occupation.DocumentId).IsActive,IsPublicEst:occ.IsPublic,IsPublicEng:occ.IsEngPublic,DisplayString:load(occ.Occupation.DocumentId).DisplayString,DisplayStringEng:load(occ.Occupation.DocumentId).DisplayStringEng};}), Projects : doc.UncoveredProjectInfos.map(function(pr){return {DocumentId:pr.Project.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Project.DocumentId).DisplayInfoEst,DisplayStringEng:load(pr.Project.DocumentId).DisplayInfoEng,IsActive:load(pr.Project.DocumentId).IsActive,EndDate:load(pr.Project.DocumentId).General.EndDate,PeriodIsActive:load(pr.Project.DocumentId).General.ProjectPeriod.IsActive};}), Publications : doc.UncoveredPublicationInfos.map(function(pr){return {DocumentId:pr.Publication.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Publication.DocumentId).DisplayInfoHtml,DisplayStringEng:load(pr.Publication.DocumentId).DisplayInfoHtmlEng,PublishingYear:load(pr.Publication.DocumentId).PublishingYear,IsActive:load(pr.Publication.DocumentId).IsActive,ClassificationCode:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).Code:&quot;&quot;,ClassificationCodeName:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullName:&quot;&quot;,ClassificationCodeNameEng:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullNameEng:&quot;&quot;};}), Mentorships : doc.UncoveredRunningMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsFinalized : doc.UncoveredFinalizedMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsDissertation : doc.UncoveredDissertationInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}) };   }   from &apos;PersonProfileDocuments&apos; as doc where id() = $p0 load doc.Person.DocumentId as person select output(doc, person) limit $p1, $p2 " name="RavenDB Queries can parse -  declare function output(doc, person) {   	var occupations = doc.UncoveredOccupationInfos.map(function(y){return load(y.Occupation.DocumentId);});   	var projects = doc.UncoveredProjectInfos.map(function(y){return load(y.Project.DocumentId);});   	var publications = doc.UncoveredPublicationInfos.map(function(y){return load(y.Publication.DocumentId);});   	var classifications = publications.map(function(y){return load(y.Classification.DocumentId);});   	var mentorshipsRunning = doc.UncoveredRunningMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	var mentorshipsFinalized = doc.UncoveredFinalizedMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	var mentorshipsDissertation = doc.UncoveredDissertationInfos.map(function(y){return load(y.Mentorship.DocumentId);});   	return { IndexId : id(doc).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0], IsPublic : doc.IsPublic, IsConfirmed : doc.IsConfirmedEst, IsConfirmedEng : doc.IsConfirmedEng, HasPublicDataEst : doc.UserHasPublicDataEst, HasPublicDataEng : doc.UserHasPublicDataEng, PersonId : id(doc.Person).toString(), PersonName : person.Name, Occupations : doc.UncoveredOccupationInfos.map(function(occ){return {DocumentId:occ.Occupation.Id.toString(),Period:load(occ.Occupation.DocumentId).Period,IsActive:load(occ.Occupation.DocumentId).IsActive,IsPublicEst:occ.IsPublic,IsPublicEng:occ.IsEngPublic,DisplayString:load(occ.Occupation.DocumentId).DisplayString,DisplayStringEng:load(occ.Occupation.DocumentId).DisplayStringEng};}), Projects : doc.UncoveredProjectInfos.map(function(pr){return {DocumentId:pr.Project.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Project.DocumentId).DisplayInfoEst,DisplayStringEng:load(pr.Project.DocumentId).DisplayInfoEng,IsActive:load(pr.Project.DocumentId).IsActive,EndDate:load(pr.Project.DocumentId).General.EndDate,PeriodIsActive:load(pr.Project.DocumentId).General.ProjectPeriod.IsActive};}), Publications : doc.UncoveredPublicationInfos.map(function(pr){return {DocumentId:pr.Publication.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Publication.DocumentId).DisplayInfoHtml,DisplayStringEng:load(pr.Publication.DocumentId).DisplayInfoHtmlEng,PublishingYear:load(pr.Publication.DocumentId).PublishingYear,IsActive:load(pr.Publication.DocumentId).IsActive,ClassificationCode:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).Code:&quot;&quot;,ClassificationCodeName:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullName:&quot;&quot;,ClassificationCodeNameEng:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullNameEng:&quot;&quot;};}), Mentorships : doc.UncoveredRunningMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsFinalized : doc.UncoveredFinalizedMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsDissertation : doc.UncoveredDissertationInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}) };   }   from &apos;PersonProfileDocuments&apos; as doc where id() = $p0 load doc.Person.DocumentId as person select output(doc, person) limit $p1, $p2 " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OperationDoc/Index&apos; where Quantity &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;OperationDoc/Index&apos; where Quantity &gt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ToDoTasks&apos; group by DueDate, Completed where Completed = $p0 select DueDate, count() as TasksPerDate " name="RavenDB Queries can parse -  from &apos;ToDoTasks&apos; group by DueDate, Completed where Completed = $p0 select DueDate, count() as TasksPerDate " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;WeeklyStatsIndex&apos; order by WeeksPlays as long desc include AudioId " name="RavenDB Queries can parse -  from index &apos;WeeklyStatsIndex&apos; order by WeeksPlays as long desc include AudioId " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tracks&apos; order by Title as alphaNumeric select Title " name="RavenDB Queries can parse -  from &apos;Tracks&apos; order by Title as alphaNumeric select Title " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\vUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\vUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(item) {   	var prices = Object.map(item.PriceConfig, function(v, k){ return {Price:v.Item1,Quantity:v.Item2};});   	return { Name : item.Name, Prices : prices };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " name="RavenDB Queries can parse -  declare function output(item) {   	var prices = Object.map(item.PriceConfig, function(v, k){ return {Price:v.Item1,Quantity:v.Item2};});   	return { Name : item.Name, Prices : prices };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dogs&apos; where exists(Awards) " name="RavenDB Queries can parse -  from &apos;Dogs&apos; where exists(Awards) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;, &quot;en-US&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;, &quot;en-US&quot;) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Company = $p0 select facet(EmployeeByDay) include EmployeeByDay.Employee " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Company = $p0 select facet(EmployeeByDay) include EmployeeByDay.Employee " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Homes&apos; as page where id() = $p0 load $p1 as hero select { page : page, Hero : hero } " name="RavenDB Queries can parse -  from &apos;Homes&apos; as page where id() = $p0 load $p1 as hero select { page : page, Hero : hero } " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StatusIndex&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;StatusIndex&apos; where id() = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OtherDocuments&apos; " name="RavenDB Queries can parse -  from &apos;OtherDocuments&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where id() in ($p0) " name="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where id() in ($p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from &apos;People&apos; where Name in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, LastName where search(LastName, $p0) select Name, LastName, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, LastName where search(LastName, $p0) select Name, LastName, count() " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Age as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select Age as Id, Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where LastName = $p0 select Name, &quot;Bob&quot; as Friend, 79 as Age " name="RavenDB Queries can parse -  from &apos;Users&apos; where LastName = $p0 select Name, &quot;Bob&quot; as Friend, 79 as Age " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Posts&apos; group by Comments.Length select count(), key() as CommentsLength " name="RavenDB Queries can parse -  from &apos;Posts&apos; group by Comments.Length select count(), key() as CommentsLength " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where FirstName = $p0 or LastName = $p1 " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where FirstName = $p0 or LastName = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/TestDynamicQueries&apos; where ((Bar_SomeDictionary_Key = $p0 and Bar_SomeDictionary_Value = $p1) or (Bar_SomeOtherDictionary_Key = $p2 and Bar_SomeOtherDictionary_Value = $p3)) or Bar = $p4 " name="RavenDB Queries can parse -  from index &apos;Foos/TestDynamicQueries&apos; where ((Bar_SomeDictionary_Key = $p0 and Bar_SomeDictionary_Value = $p1) or (Bar_SomeOtherDictionary_Key = $p2 and Bar_SomeOtherDictionary_Value = $p3)) or Bar = $p4 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SearchIndex&apos; where PostStatus = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;SearchIndex&apos; where PostStatus = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where Name = $p0 or LastName = $p1 " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where Name = $p0 or LastName = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where id() = $p0 and Tokens = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where id() = $p0 and Tokens = $p1 limit $p2, $p3 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; select CurrentName, PreviousName " name="RavenDB Queries can parse -  from index &apos;Index1&apos; select CurrentName, PreviousName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MixedSelectWithAnonymusAndDictionary&apos; " name="RavenDB Queries can parse -  from index &apos;MixedSelectWithAnonymusAndDictionary&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where exact(Name = $p0) and search(LastName, $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Users&apos; where exact(Name = $p0) and search(LastName, $p1) limit $p2, $p3 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.&apos;Test-Property-1&apos; = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.&apos;Test-Property-1&apos; = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(result) {   	var children = load(result.Children.map((function(x){return id(x);})));   	return { ChildNames : children.map(function(x){return x.Name;}) };   }   from &apos;Documents&apos; as result where id() = $p0 select output(result) " name="RavenDB Queries can parse -  declare function output(result) {   	var children = load(result.Children.map((function(x){return id(x);})));   	return { ChildNames : children.map(function(x){return x.Name;}) };   }   from &apos;Documents&apos; as result where id() = $p0 select output(result) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(At, max(Total), min(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(At, max(Total), min(Total)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x select { HasTags : x.Tags.length &gt; 0, OriginalData : x.Tags, FilteredData : x.Tags.filter(function(t){return t!=null;}), All : x.Tags.every(function(s){return s!==&quot;a&quot;;}), Select : x.Tags.map(function(t){return t+&quot;,&quot;;}), Sum : x.Tags.map(function(t){return t.Length;}).reduce(function(a, b) { return a + b; }, 0), Where : x.Tags.filter(function(t){return t!=null;}), Contains : x.Tags.indexOf(&quot;a&quot;)&gt;=0, ToList : x.Tags.map(function(t){return t+&quot;,&quot;;}), Concat : x.Tags.concat([&quot;a&quot;]), Avg : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return a + b; }, 0)/(x.Tags.length||1), Max : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Max(a, b);}), Min : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Min(a, b);}), StrMax : x.Tags.reduce(function(a, b) { return Raven_Max(a, b);}), Count : x.Tags.length, ToDictionary : x.Tags.reduce(function(_obj, _cur) {_obj[(function(t){return t.Length;})(_cur)] = _cur;return _obj;}, {}), Reverse : x.Tags.slice().reverse(), Distinct : Array.from(new Set(x.Tags)) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x select { HasTags : x.Tags.length &gt; 0, OriginalData : x.Tags, FilteredData : x.Tags.filter(function(t){return t!=null;}), All : x.Tags.every(function(s){return s!==&quot;a&quot;;}), Select : x.Tags.map(function(t){return t+&quot;,&quot;;}), Sum : x.Tags.map(function(t){return t.Length;}).reduce(function(a, b) { return a + b; }, 0), Where : x.Tags.filter(function(t){return t!=null;}), Contains : x.Tags.indexOf(&quot;a&quot;)&gt;=0, ToList : x.Tags.map(function(t){return t+&quot;,&quot;;}), Concat : x.Tags.concat([&quot;a&quot;]), Avg : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return a + b; }, 0)/(x.Tags.length||1), Max : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Max(a, b);}), Min : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Min(a, b);}), StrMax : x.Tags.reduce(function(a, b) { return Raven_Max(a, b);}), Count : x.Tags.length, ToDictionary : x.Tags.reduce(function(_obj, _cur) {_obj[(function(t){return t.Length;})(_cur)] = _cur;return _obj;}, {}), Reverse : x.Tags.slice().reverse(), Distinct : Array.from(new Set(x.Tags)) } limit $p0, $p1 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; where DetailsId in ($p0) select Cno, DetailsId, Grade, id() as Id " name="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; where DetailsId in ($p0) select Cno, DetailsId, Grade, id() as Id " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos&apos; where Facet1 = $p0 and Facet1 = $p1 select facet(id(&apos;Facets&apos;)) " name="RavenDB Queries can parse -  from index &apos;Foos&apos; where Facet1 = $p0 and Facet1 = $p1 select facet(id(&apos;Facets&apos;)) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;en-US&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;en-US&quot;) } limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Movies/ByActor&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Movies/ByActor&apos; where lucene(Name, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WrapperClasses&apos; where offspring[].n = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;WrapperClasses&apos; where offspring[].n = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where (Name = $p0) and (Categories_Name = $p1) " name="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where (Name = $p0) and (Categories_Name = $p1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; order by spatial.distance(Coordinates, spatial.point($p0, $p1)) " name="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; order by spatial.distance(Coordinates, spatial.point($p0, $p1)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Count = $p0 order by Count as long " name="RavenDB Queries can parse -  from &apos;Users&apos; where Count = $p0 order by Count as long " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByShipment/Location&apos; where id() = $p0 order by spatial.distance(ShipmentLocation, spatial.point($p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;Orders/ByShipment/Location&apos; where id() = $p0 order by spatial.distance(ShipmentLocation, spatial.point($p1, $p2)) limit $p3, $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CompanyByType&apos; order by Type " name="RavenDB Queries can parse -  from index &apos;Companies/CompanyByType&apos; order by Type " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;QuadTreeIndex&apos; where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;QuadTreeIndex&apos; where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where endsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where endsWith(Name, $p0) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name between $p0 and $p1 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name between $p0 and $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() != $p0 " name="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() != $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsAnalyzed&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonsAnalyzed&apos; where search(Name, $p0) limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 and AddressId = $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 and AddressId = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Manufacturer = $p0 select facet(Manufacturer), facet(Cost &lt;= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost &gt;= $p8), facet(Megapixels &lt;= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels &gt;= $p14) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Manufacturer = $p0 select facet(Manufacturer), facet(Cost &lt;= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost &gt;= $p8), facet(Megapixels &lt;= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels &gt;= $p14) " time="0.039">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  with {from &apos;Foos&apos;} as Foo   match (Foo)-[Bars as _]-&gt;(Bars as Bar) limit $p0, $p1 " name="RavenDB Queries can parse -  with {from &apos;Foos&apos;} as Foo   match (Foo)-[Bars as _]-&gt;(Bars as Bar) limit $p0, $p1 " time="0">
      <skipped/>
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(Manufacturer), facet(Cost &lt;= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost &gt;= $p8), facet(Megapixels &lt;= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels &gt;= $p14) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(Manufacturer), facet(Cost &lt;= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost &gt;= $p8), facet(Megapixels &lt;= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels &gt;= $p14) " time="0.022">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GameServers/ConnectedPlayers&apos; where startsWith(PlayerName, $p0) order by id(), PlayerName select id() as Id, PlayerName, ConnectedOn, ServerName " name="RavenDB Queries can parse -  from index &apos;GameServers/ConnectedPlayers&apos; where startsWith(PlayerName, $p0) order by id(), PlayerName select id() as Id, PlayerName, ConnectedOn, ServerName " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Contacts[].FirstName = $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Contacts[].FirstName = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;someIndex&apos; where startsWith(Query, $p0) " name="RavenDB Queries can parse -  from index &apos;someIndex&apos; where startsWith(Query, $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithHashSet&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithHashSet&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make) " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(StringAge) " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(StringAge) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (true and not (Name = $p0 or Name = $p1)) " name="RavenDB Queries can parse -  from &apos;Users&apos; where (true and not (Name = $p0 or Name = $p1)) " time="0.023">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, sum(Price)) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, sum(Price)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Nearest) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Nearest) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis($p1, $p0) " name="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis($p1, $p0) " time="0.015">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; " name="RavenDB Queries can parse -  from &apos;Foos&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/test1&apos; " name="RavenDB Queries can parse -  from index &apos;Index/test1&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/Search&apos; where Query = $p0 " name="RavenDB Queries can parse -  from index &apos;Orders/Search&apos; where Query = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Filter in ($p0) " name="RavenDB Queries can parse -  from &apos;People&apos; where Filter in ($p0) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogPosts/PostsCountByTag&apos; " name="RavenDB Queries can parse -  from index &apos;BlogPosts/PostsCountByTag&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AdviceSearch&apos; where Sections = $p0 and search(SearchField, $p1) select facet(id(&apos;facets/ArticleFacets&apos;)) include Sections " name="RavenDB Queries can parse -  from index &apos;AdviceSearch&apos; where Sections = $p0 and search(SearchField, $p1) select facet(id(&apos;facets/ArticleFacets&apos;)) include Sections " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderSiteInstalls&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;OrderSiteInstalls&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name select id() as Id " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name select id() as Id " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1)) as __timeSeriesQueryFunction limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1)) as __timeSeriesQueryFunction limit $p4, $p5 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Leads/Index&apos; where Status_Value != $p0 " name="RavenDB Queries can parse -  from index &apos;Leads/Index&apos; where Status_Value != $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var elements = x.Elements.map(function(a){return a.Decimal;});   	var values = x.Values;   	var generated = x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {});   	return { TestDictionary1 : values, TestDictionary2 : x.Values, TestDictionaryDirectAccess1 : Object.keys(x.Values).length, TestDictionaryDirectAccess2 : Object.keys(x.Values), TestDictionaryDirectAccess4 : Object.keys(x.Values).map(function(a){return x.Values[a];}), TestDictionarySum1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0), TestDictionaryAverage1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(values).length||1), TestDictionaryAverage2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).length||1), TestDictionaryAverage3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).map(function(a){return x.Values[a];}).length||1), TestDictionaryFunc1 : Object.keys(x.Values).length, TestDictionaryFunc2 : Object.map(x.Values, function(v, k){ return v;}), TestGeneratedDictionary1 : generated, TestGeneratedDictionary2 : x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {}), TestGeneratedDictionary3 : Object.keys(generated).length, TestGeneratedDictionarySum1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionarySum2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionaryAverage1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(generated).length||1), TestGeneratedDictionaryAverage2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).length||1), TestGeneratedDictionaryDirectAccess1 : Object.keys(generated), TestGeneratedDictionaryDirectAccess2 : Object.keys(generated).map(function(a){return generated[a];}), TestGeneratedDictionaryDirectAccess3 : Object.keys(generated).length, TestList1 : elements.reduce(function(a, b) { return a + b; }, 0), TestList2 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList3 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList4 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.length||1), TestList5 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.map((function(a){return a.Decimal;})).length||1) };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var elements = x.Elements.map(function(a){return a.Decimal;});   	var values = x.Values;   	var generated = x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {});   	return { TestDictionary1 : values, TestDictionary2 : x.Values, TestDictionaryDirectAccess1 : Object.keys(x.Values).length, TestDictionaryDirectAccess2 : Object.keys(x.Values), TestDictionaryDirectAccess4 : Object.keys(x.Values).map(function(a){return x.Values[a];}), TestDictionarySum1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0), TestDictionaryAverage1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(values).length||1), TestDictionaryAverage2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).length||1), TestDictionaryAverage3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).map(function(a){return x.Values[a];}).length||1), TestDictionaryFunc1 : Object.keys(x.Values).length, TestDictionaryFunc2 : Object.map(x.Values, function(v, k){ return v;}), TestGeneratedDictionary1 : generated, TestGeneratedDictionary2 : x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {}), TestGeneratedDictionary3 : Object.keys(generated).length, TestGeneratedDictionarySum1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionarySum2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionaryAverage1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(generated).length||1), TestGeneratedDictionaryAverage2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).length||1), TestGeneratedDictionaryDirectAccess1 : Object.keys(generated), TestGeneratedDictionaryDirectAccess2 : Object.keys(generated).map(function(a){return generated[a];}), TestGeneratedDictionaryDirectAccess3 : Object.keys(generated).length, TestList1 : elements.reduce(function(a, b) { return a + b; }, 0), TestList2 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList3 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList4 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.length||1), TestList5 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.map((function(a){return a.Decimal;})).length||1) };   }   from &apos;Articles&apos; as x select output(x) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Pets in ($p0) " name="RavenDB Queries can parse -  from &apos;People&apos; where Pets in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDesc&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDesc&apos; where moreLikeThis(id() = $p1, $p0) " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; select distinct * " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; select distinct * " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Name " name="RavenDB Queries can parse -  from &apos;Users&apos; select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where AccountId = $p0 " name="RavenDB Queries can parse -  from index &apos;test&apos; where AccountId = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u) {   	var detailId = &quot;details/1-A&quot;;   	var name = u.Name;   	var detail = load(detailId);   	return { Name : name, DetailId : detailId, Detail : detail };   }   from &apos;Users&apos; as u select output(u) " name="RavenDB Queries can parse -  declare function output(u) {   	var detailId = &quot;details/1-A&quot;;   	var name = u.Name;   	var detail = load(detailId);   	return { Name : name, DetailId : detailId, Detail : detail };   }   from &apos;Users&apos; as u select output(u) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; as a load a.UdcId as udc select { Id : id(udc), UdcId : a.UdcId } " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; as a load a.UdcId as udc select { Id : id(udc), UdcId : a.UdcId } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DataResults&apos; where State = $p0 " name="RavenDB Queries can parse -  from &apos;DataResults&apos; where State = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Companies&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithArray&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithArray&apos; " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanOverrideCustomSorter_402&apos;) desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanOverrideCustomSorter_402&apos;) desc " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByDisplayNameReversed2&apos; where Chars = $p0 " name="RavenDB Queries can parse -  from index &apos;Users/ByDisplayNameReversed2&apos; where Chars = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Total)) as ProductMax, facet(Product) as ProductMin " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Total)) as ProductMax, facet(Product) as ProductMin " time="0.014">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;StockPrices@By6Hours&apos;, null,null) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;StockPrices@By6Hours&apos;, null,null) limit $p0, $p1 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where search(Name, $p0) limit $p1, $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooByBar&apos; where search(Bar, $p0) " name="RavenDB Queries can parse -  from index &apos;FooByBar&apos; where search(Bar, $p0) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; order by SortWeight as long " name="RavenDB Queries can parse -  from &apos;Blogs&apos; order by SortWeight as long " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product), Array(Lines[].Quantity) order by Count select Lines[].Product as Products, Lines[].Quantity as Quantities, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product), Array(Lines[].Quantity) order by Count select Lines[].Product as Products, Lines[].Quantity as Quantities, count() " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) or Value = $p1 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) or Value = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(a) {   	var udc = &quot;foo&quot;;   	return { Long : a.Long, Double : a.Double };   }   from index &apos;MyIndex&apos; as a select output(a) " name="RavenDB Queries can parse -  declare function output(a) {   	var udc = &quot;foo&quot;;   	return { Long : a.Long, Double : a.Double };   }   from index &apos;MyIndex&apos; as a select output(a) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\aUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\aUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where exact(Name = $p0) " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where exact(Name = $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select user_address.city_name as CityName " name="RavenDB Queries can parse -  from &apos;Users&apos; select user_address.city_name as CityName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DataSetIndex&apos; order by Split_N1_D_Range desc select SongId, Title, Interpret, Year, Attributes, SID, SetId limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DataSetIndex&apos; order by Split_N1_D_Range desc select SongId, Title, Interpret, Year, Attributes, SID, SetId limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DomainModels&apos; " name="RavenDB Queries can parse -  from &apos;DomainModels&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyMultiMapTsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;MyMultiMapTsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where search(Name, $p0) or boost(Category in ($p1), 0) order by score(), PricePerUnit as double desc limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where search(Name, $p0) or boost(Category in ($p1), 0) order by score(), PricePerUnit as double desc limit $p2, $p3 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0, and)) " name="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0, and)) " time="0.023">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByNameExact&apos; where Names in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Companies/ByNameExact&apos; where Names in ($p0) limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Grade as double " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Grade as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByNull&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByNull&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products&apos; select facet(id(&apos;facets/Products&apos;)) limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Products&apos; select facet(id(&apos;facets/Products&apos;)) limit $p0, $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Booking/ByConsultantId&apos; " name="RavenDB Queries can parse -  from index &apos;Booking/ByConsultantId&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 and Revision &lt; $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 and Revision &lt; $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where startsWith(Name, $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StatusIndex&apos; where StatusOverridden = $p0 and Status = $p1 and id() = $p2 limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;StatusIndex&apos; where StatusOverridden = $p0 and Status = $p1 and id() = $p2 limit $p3, $p4 " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(IntegerAge) " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(IntegerAge) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MessageIndex&apos; where (id() = $p0) and (Recipients_HasRead = $p1 and Recipients_To = $p2) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MessageIndex&apos; where (id() = $p0) and (Recipients_HasRead = $p1 and Recipients_To = $p2) limit $p3, $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByNumber&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByNumber&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByProductAndCount/MethodSyntax&apos; order by Count as long " name="RavenDB Queries can parse -  from index &apos;Orders/ByProductAndCount/MethodSyntax&apos; order by Count as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Zoom &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Zoom &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Core/Order&apos; " name="RavenDB Queries can parse -  from &apos;Core/Order&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where MyProperty in ($p0) " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where MyProperty in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Xyzs&apos; " name="RavenDB Queries can parse -  from &apos;Xyzs&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Users, $p1)) " name="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Users, $p1)) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithSortedSet&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithSortedSet&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TicketTimerIndex&apos; where LocationId in ($p0) and CriticalDate != $p1 and CriticalDate &lt; $p2 select LocationId, DateUpdated, CriticalDate " name="RavenDB Queries can parse -  from index &apos;TicketTimerIndex&apos; where LocationId in ($p0) and CriticalDate != $p1 and CriticalDate &lt; $p2 select LocationId, DateUpdated, CriticalDate " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/Totals&apos; " name="RavenDB Queries can parse -  from index &apos;Orders/Totals&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) order by Name, LastName " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) order by Name, LastName " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonAndAddressIndex&apos; " name="RavenDB Queries can parse -  from index &apos;PersonAndAddressIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict.&apos;c c&apos; = $p0 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict.&apos;c c&apos; = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Student/ByName&apos; where FirstName = $p0 or LastName = $p1 order by score(), LastName " name="RavenDB Queries can parse -  from index &apos;Student/ByName&apos; where FirstName = $p0 or LastName = $p1 order by score(), LastName " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDailyInvoices&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyDailyInvoices&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.LastName = $p0 load $p1 as detail select { Name : u.Name, Detail : detail } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.LastName = $p0 load $p1 as detail select { Name : u.Name, Detail : detail } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.wkt($p3)) " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.wkt($p3)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SomeClassIndex&apos; where (Culture = $p0 and (true and not (ModelId = $p1))) or CatalogId = $p2 " name="RavenDB Queries can parse -  from index &apos;SomeClassIndex&apos; where (Culture = $p0 and (true and not (ModelId = $p1))) or CatalogId = $p2 " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Documents&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country select distinct ShipTo.Country limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country select distinct ShipTo.Country limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CategoryIndex&apos; where search(Name, $p0) order by Name select Name " name="RavenDB Queries can parse -  from index &apos;CategoryIndex&apos; where search(Name, $p0) order by Name select Name " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersReducedByName&apos; where Count = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersReducedByName&apos; where Count = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(document) {   	var status = load((id(document)+&quot;/status&quot;));   	var overriddenStatus = status!=null&amp;&amp;status.OverriddenStatus!==&quot;NotSet&quot;;   	return { Id : id(document), Status : overriddenStatus?status.OverriddenStatus:document.Status, StatusOverridden : overriddenStatus&amp;&amp;status.OverriddenStatus!==document.Status };   }   from &apos;Documents&apos; as document select output(document) limit $p0, $p1 " name="RavenDB Queries can parse -  declare function output(document) {   	var status = load((id(document)+&quot;/status&quot;));   	var overriddenStatus = status!=null&amp;&amp;status.OverriddenStatus!==&quot;NotSet&quot;;   	return { Id : id(document), Status : overriddenStatus?status.OverriddenStatus:document.Status, StatusOverridden : overriddenStatus&amp;&amp;status.OverriddenStatus!==document.Status };   }   from &apos;Documents&apos; as document select output(document) limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Sales/ByMonth&apos; where Count = $p0 " name="RavenDB Queries can parse -  from index &apos;Product/Sales/ByMonth&apos; where Count = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; as __alias0 select __alias0.&apos;Offset&apos; " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; as __alias0 select __alias0.&apos;Offset&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;), 0.01) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;), 0.01) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DecimalAggregationMap&apos; select Total limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DecimalAggregationMap&apos; select Total limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : (u.Name!=null?u.Name:&quot;&quot;) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : (u.Name!=null?u.Name:&quot;&quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Providers&apos; where (Name = $p0) and (Categories[].Name = $p1) and (PracticeOffices[].Name = $p2) " name="RavenDB Queries can parse -  from &apos;Providers&apos; where (Name = $p0) and (Categories[].Name = $p1) and (PracticeOffices[].Name = $p2) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Addresses&apos; group by City where TotalCount = $p0 select key() as City, count() as TotalCount " name="RavenDB Queries can parse -  from &apos;Addresses&apos; group by City where TotalCount = $p0 select key() as City, count() as TotalCount " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; order by TransportId " name="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; order by TransportId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CarIndex&apos; where Cars_LeaseHistory_Id = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CarIndex&apos; where Cars_LeaseHistory_Id = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMinutes = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMinutes = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Appointments/Index&apos; where ProductIds in ($p0) " name="RavenDB Queries can parse -  from index &apos;Appointments/Index&apos; where ProductIds in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalQuantity as long select key() as NameOfProduct, sum(Quantity) as TotalQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalQuantity as long select key() as NameOfProduct, sum(Quantity) as TotalQuantity " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var test = x.Value===&quot;Value1&quot;;   	return { ShouldBeTrue : test };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var test = x.Value===&quot;Value1&quot;;   	return { ShouldBeTrue : test };   }   from &apos;Articles&apos; as x select output(x) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Clients&apos; where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 " name="RavenDB Queries can parse -  from &apos;Clients&apos; where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(Name = $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(Name = $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyClass/ByIndex&apos; select Index, Prop1 " name="RavenDB Queries can parse -  from index &apos;MyClass/ByIndex&apos; select Index, Prop1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where Events[].Key in ($p0) " name="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where Events[].Key in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyShortArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyShortArray = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d order by id() select { HasValue : d.NullableInt != null } " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d order by id() select { HasValue : d.NullableInt != null } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	var include = load(o.Employee);   	return { Company : update.Name, Employee : include.FirstName };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " name="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	var include = load(o.Employee);   	return { Company : update.Name, Employee : include.FirstName };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BigIndexOutput/WithDictionaryUsage&apos; " name="RavenDB Queries can parse -  from index &apos;BigIndexOutput/WithDictionaryUsage&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate first 90 Seconds group by &apos;10 Seconds&apos;   select average()) as __timeSeriesQueryFunction limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate first 90 Seconds group by &apos;10 Seconds&apos;   select average()) as __timeSeriesQueryFunction limit $p1, $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices group by &apos;7 Days&apos;   select average()) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices group by &apos;7 Days&apos;   select average()) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; order by Name, Name select distinct Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test&apos; order by Name, Name select distinct Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision between $p0 and $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision between $p0 and $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Document/Index&apos; " name="RavenDB Queries can parse -  from index &apos;Document/Index&apos; " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; where IsActive = $p0 order by NameForSorting " name="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; where IsActive = $p0 order by NameForSorting " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; select id() as Id, Category.Title as CategoryTitle limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Entities&apos; select id() as Id, Category.Title as CategoryTitle limit $p0, $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyJSIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyJSIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Age, Email " name="RavenDB Queries can parse -  from &apos;Users&apos; select Age, Email " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as FooId, Data " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as FooId, Data " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 order by Category limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 order by Category limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Date&apos; where Date = $p0 " name="RavenDB Queries can parse -  from index &apos;Date&apos; where Date = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where IsSecond = $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where IsSecond = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByString&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByString&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Outers&apos; where Inner.Flag = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Outers&apos; where Inner.Flag = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; include cmpxchg(&apos;ExternalId&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; include cmpxchg(&apos;ExternalId&apos;) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; select Values, Bars limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index&apos; select Values, Bars limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OperationDoc/Index&apos; where Quantity &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;OperationDoc/Index&apos; where Quantity &lt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Customers&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Customers&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where OrderedQuantity = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where OrderedQuantity = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NamedSpatialFieldIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;NamedSpatialFieldIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; order by Name, Name select distinct Name " name="RavenDB Queries can parse -  from index &apos;test&apos; order by Name, Name select distinct Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ResourceViewModels/ByTag&apos; " name="RavenDB Queries can parse -  from index &apos;ResourceViewModels/ByTag&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() in ($p0) " name="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where intersect(search(Description, $p0), Name = $p1)  " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where intersect(search(Description, $p0), Name = $p1)  " time="0.021">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;AccItems/Spatial&apos; where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where startsWith(Name, $p0) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; include explanations($p0) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; include explanations($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMaxVal = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dummies&apos; where Boolean = $p0 or Object != $p1 " name="RavenDB Queries can parse -  from &apos;Dummies&apos; where Boolean = $p0 or Object != $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where CaseId != $p0 or (OrganizationId = $p1 and HistoryCode = $p2) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where CaseId != $p0 or (OrganizationId = $p1 and HistoryCode = $p2) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyNewProfitsReferences&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyNewProfitsReferences&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Name in ($w0p0) " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Name in ($w0p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where id() = $p0 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where id() = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), Targets : d.Targets.filter(function(x){return Object.keys($p0).length===0||$p1.hasOwnProperty(x);}) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), Targets : d.Targets.filter(function(x){return Object.keys($p0).length===0||$p1.hasOwnProperty(x);}) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMapReduceIndexWithNestedField&apos; " name="RavenDB Queries can parse -  from index &apos;MultiMapReduceIndexWithNestedField&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence between $p0 and $p1 " name="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence between $p0 and $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where Employee = $p0 select Employee, ShipTo.Country as Country, ShipTo.City as City " name="RavenDB Queries can parse -  from &apos;Orders&apos; where Employee = $p0 select Employee, ShipTo.Country as Country, ShipTo.City as City " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where intersect(Name = $p0, search(Description, $p1))  " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where intersect(Name = $p0, search(Description, $p1))  " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where BookingRequests_StartDay &gt;= $p0 and BookingRequests_EndDay &lt;= $p1 " name="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where BookingRequests_StartDay &gt;= $p0 and BookingRequests_EndDay &lt;= $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(avg(Cost), sum(Cost), max(Cost), min(Cost)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(avg(Cost), sum(Cost), max(Cost), min(Cost)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MobaroLocations&apos; select timeseries(from DispatchEntries group by &apos;1 Months&apos;   select sum(), count()) as DispatchEntries, id() as LocationId, Name as LocationName " name="RavenDB Queries can parse -  from &apos;MobaroLocations&apos; select timeseries(from DispatchEntries group by &apos;1 Months&apos;   select sum(), count()) as DispatchEntries, id() as LocationId, Name as LocationName " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(Manufacturer, $p0) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(Manufacturer, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ContentSearchIndex&apos; where boost(search(Slug, $p3), 15) or boost(search(Title, $p4), 12) or search(Content, $p5) include highlight(Title,128,2,$p0),highlight(Slug,128,2,$p1),highlight(Content,128,2,$p2) " name="RavenDB Queries can parse -  from index &apos;ContentSearchIndex&apos; where boost(search(Slug, $p3), 15) or boost(search(Title, $p4), 12) or search(Content, $p5) include highlight(Title,128,2,$p0),highlight(Slug,128,2,$p1),highlight(Content,128,2,$p2) " time="0.036">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by random(&apos;seed2&apos;) " name="RavenDB Queries can parse -  from &apos;Users&apos; order by random(&apos;seed2&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count = $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OrderIndex&apos; where Id in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;OrderIndex&apos; where Id in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) select Name, Latitude, Longitude " name="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) select Name, Latitude, Longitude " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Answers/ByAnswerEntity&apos; order by Content limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Answers/ByAnswerEntity&apos; order by Content limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EmployeeByRegionAndSalary&apos; where Region = $p0 select facet(Salary &lt; $p1, Salary &gt;= $p2 and Salary &lt; $p3, Salary &gt;= $p4 and Salary &lt; $p5, Salary &gt;= $p6 and Salary &lt; $p7, Salary &gt; $p8) " name="RavenDB Queries can parse -  from index &apos;EmployeeByRegionAndSalary&apos; where Region = $p0 select facet(Salary &lt; $p1, Salary &gt;= $p2 and Salary &lt; $p3, Salary &gt;= $p4 and Salary &lt; $p5, Salary &gt;= $p6 and Salary &lt; $p7, Salary &gt; $p8) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; select id() as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; select id() as Id, Name limit $p0, $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex/Complex&apos; " name="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex/Complex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;Products&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Results&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Results&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Age as long " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Age as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include AddressId limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; include AddressId limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as categoryList, $p1 as departmentList select { Id : id(o), Items : $p2.map(function(i){return {i:i,category:categoryList.Categories[i.CategoryId]};}).map(function(__rvn0){return {__rvn0:__rvn0,department:departmentList.Departments[__rvn0.i.DepartmentId]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.i.Name,CategoryName:__rvn1.__rvn0.category.Name,DepartmentName:__rvn1.department.Name};}) } limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as categoryList, $p1 as departmentList select { Id : id(o), Items : $p2.map(function(i){return {i:i,category:categoryList.Categories[i.CategoryId]};}).map(function(__rvn0){return {__rvn0:__rvn0,department:departmentList.Departments[__rvn0.i.DepartmentId]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.i.Name,CategoryName:__rvn1.__rvn0.category.Name,DepartmentName:__rvn1.department.Name};}) } limit $p3, $p4 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Active = $p1 limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Active = $p1 limit $p4, $p5 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EmployeeIndex&apos; where FirstName = $p0 " name="RavenDB Queries can parse -  from index &apos;EmployeeIndex&apos; where FirstName = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Failing/index&apos; " name="RavenDB Queries can parse -  from index &apos;Failing/index&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric select Title limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric select Title limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; where (true and not Quantity in ($p0)) " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; where (true and not Quantity in ($p0)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_3102&apos;) desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_3102&apos;) desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanOverrideCustomSorter_402&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanOverrideCustomSorter_402&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleTimeSeriesMapReduce&apos; " name="RavenDB Queries can parse -  from index &apos;SimpleTimeSeriesMapReduce&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; group by &quot;Name&quot; select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " name="RavenDB Queries can parse -  from &apos;Products&apos; group by &quot;Name&quot; select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicByNameIndex&apos; order by Name " name="RavenDB Queries can parse -  from index &apos;DynamicByNameIndex&apos; order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags order by Count as long select count(), key() as Tags " name="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags order by Count as long select count(), key() as Tags " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; &apos;2020-07-21T15:27:24.2586044&apos;, DateIn &gt;= &apos;2020-07-21T15:27:24.2586044&apos; and DateIn &lt; &apos;2021-01-22T15:27:24.2586044&apos;, DateIn &gt;= &apos;2021-01-22T15:27:24.2586044&apos;) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; &apos;2020-07-21T15:27:24.2586044&apos;, DateIn &gt;= &apos;2020-07-21T15:27:24.2586044&apos; and DateIn &lt; &apos;2021-01-22T15:27:24.2586044&apos;, DateIn &gt;= &apos;2021-01-22T15:27:24.2586044&apos;) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;FinalFakeObjs&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;FinalFakeObjs&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, $p0, $p1, $p2, $p3) {   	var totalSpentOnOrder = function(order){return order.Lines.map(function(x){return x.PricePerUnit*x.Quantity*(1-$p0);}).reduce(function(a, b) { return a + b; }, 0);};   	return { Sum : totalSpentOnOrder(o), Any : o.Lines.some(function(x){return x.ProductName===$p1;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit&lt;$p2;}).map(function(y){return y.ProductName;}), Company : load($p3).Name };   }   from &apos;Orders&apos; as o select output(o, $p0, $p1, $p2, $p3) " name="RavenDB Queries can parse -  declare function output(o, $p0, $p1, $p2, $p3) {   	var totalSpentOnOrder = function(order){return order.Lines.map(function(x){return x.PricePerUnit*x.Quantity*(1-$p0);}).reduce(function(a, b) { return a + b; }, 0);};   	return { Sum : totalSpentOnOrder(o), Any : o.Lines.some(function(x){return x.ProductName===$p1;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit&lt;$p2;}).map(function(y){return y.ProductName;}), Company : load($p3).Name };   }   from &apos;Orders&apos; as o select output(o, $p0, $p1, $p2, $p3) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DesignResources&apos; where DesignId = $p0 " name="RavenDB Queries can parse -  from &apos;DesignResources&apos; where DesignId = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision = $p0 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AnimalsByName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;AnimalsByName&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TheIndex&apos; where ItemsCount &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;TheIndex&apos; where ItemsCount &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Month &gt; $p0 and Date_Month &lt;= $p1 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Month &gt; $p0 and Date_Month &lt;= $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LogEntry/CountByDate&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;LogEntry/CountByDate&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where Lines[].ProductName = $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where Lines[].ProductName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.&apos;HeartRate&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.&apos;HeartRate&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where NumericDict.1 &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where NumericDict.1 &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ThirdOutput&apos; " name="RavenDB Queries can parse -  from &apos;ThirdOutput&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Batches&apos; as batch select { DeviceName : batch.Job.Equipment.Device!=null?batch.Job.Equipment.Device.Name:&quot;&quot;, UnitName : batch.Job.Equipment.Device!=null&amp;&amp;batch.Job.Equipment.Device.IsBioUnitSelected?batch.Job.Equipment.Device.Unit.Name:&quot;&quot;, BatchName : batch.Job.Details.Media.map((function(m){return m.Name;})).join(&quot;, &quot;) } " name="RavenDB Queries can parse -  from &apos;Batches&apos; as batch select { DeviceName : batch.Job.Equipment.Device!=null?batch.Job.Equipment.Device.Name:&quot;&quot;, UnitName : batch.Job.Equipment.Device!=null&amp;&amp;batch.Job.Equipment.Device.IsBioUnitSelected?batch.Job.Equipment.Device.Unit.Name:&quot;&quot;, BatchName : batch.Job.Details.Media.map((function(m){return m.Name;})).join(&quot;, &quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingMRTests&apos; where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) " name="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingMRTests&apos; where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Version = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Version = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Active != $p0 select { Name : u.FirstName+&quot; &quot;+u.LastName, Active : u.Active } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Active != $p0 select { Name : u.FirstName+&quot; &quot;+u.LastName, Active : u.Active } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p3 and $p4 where (Values[0] &gt; $p1) and (Tag != $p2)   }   declare timeseries __timeSeriesQueryFunction1(p) {   from p.Stocks between $p7 and $p8 where (Tag == $p5) and (Values[0] &lt; $p6)   }   from &apos;People&apos; as p where p.Age &gt; $p0 select { Name : p.Name+&quot; &quot;+p.LastName, Heartrate : __timeSeriesQueryFunction0(p), Stocks : __timeSeriesQueryFunction1(p) } " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p3 and $p4 where (Values[0] &gt; $p1) and (Tag != $p2)   }   declare timeseries __timeSeriesQueryFunction1(p) {   from p.Stocks between $p7 and $p8 where (Tag == $p5) and (Values[0] &lt; $p6)   }   from &apos;People&apos; as p where p.Age &gt; $p0 select { Name : p.Name+&quot; &quot;+p.LastName, Heartrate : __timeSeriesQueryFunction0(p), Stocks : __timeSeriesQueryFunction1(p) } " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;en-US&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;en-US&quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u000fUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\u000fUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex2&apos; select School_Id " name="RavenDB Queries can parse -  from index &apos;UsersIndex2&apos; select School_Id " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByNameExact&apos; where Names = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Companies/ByNameExact&apos; where Names = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; as item select { Chars1 : item.Name.split(&apos;&apos;), Chars2 : item.Name.substr(3, 7).split(&apos;&apos;) } " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; as item select { Chars1 : item.Name.split(&apos;&apos;), Chars2 : item.Name.substr(3, 7).split(&apos;&apos;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as user select counter(user, Downloads) as DownloadsCount " name="RavenDB Queries can parse -  from &apos;Users&apos; as user select counter(user, Downloads) as DownloadsCount " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; where Name != $p0 select Name, School.Id as SchoolId " name="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; where Name != $p0 select Name, School.Id as SchoolId " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MovieIndex&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;MovieIndex&apos; where moreLikeThis(id() = $p1, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select counter(u, Downloads) as Downloads limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select counter(u, Downloads) as Downloads limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Foos&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CustomerByName&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CustomerByName&apos; where search(Name, $p0) limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMap&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;MultiMap&apos; order by Date " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High &gt; $p1)) as __timeSeriesQueryFunction0 limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High &gt; $p1)) as __timeSeriesQueryFunction0 limit $p4, $p5 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where exists(StringArray) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where exists(StringArray) limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleIndex&apos; where Key = $p0 and Value &gt; $p1 " name="RavenDB Queries can parse -  from index &apos;SimpleIndex&apos; where Key = $p0 and Value &gt; $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Document/Index&apos; where id() in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Document/Index&apos; where id() in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &gt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArray = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(__alias0) {   	var order = __alias0;   	var include = order.Company;   	var _load = load(include);   	var update = load(_load.EmployeesIds);   	var sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity*_load.AccountsReceivable;}).reduce(function(a, b) { return a + b; }, 0);   	return { Comapny : _load, Sum : sum, Employees : update.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as __alias0 select output(__alias0) " name="RavenDB Queries can parse -  declare function output(__alias0) {   	var order = __alias0;   	var include = order.Company;   	var _load = load(include);   	var update = load(_load.EmployeesIds);   	var sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity*_load.AccountsReceivable;}).reduce(function(a, b) { return a + b; }, 0);   	return { Comapny : _load, Sum : sum, Employees : update.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as __alias0 select output(__alias0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex20&apos; select Numbers limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex20&apos; select Numbers limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) " name="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(doc) {   	var p = doc.Lines.map(function(y){return load(y.Product);});   	return { p : p };   }   from &apos;Orders&apos; as doc select output(doc) " name="RavenDB Queries can parse -  declare function output(doc) {   	var p = doc.Lines.map(function(y){return load(y.Product);});   	return { p : p };   }   from &apos;Orders&apos; as doc select output(doc) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; select BirthDate.Day as BirthDay, BirthDate.Month as BirthMonth, BirthDate.Year as BirthYear, SinceBirth.TotalMilliseconds as SinceBirthTotalMilliseconds " name="RavenDB Queries can parse -  from &apos;People&apos; select BirthDate.Day as BirthDay, BirthDate.Month as BirthMonth, BirthDate.Year as BirthYear, SinceBirth.TotalMilliseconds as SinceBirthTotalMilliseconds " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EventsWithDates2s&apos; where Events[].Value in ($p0) " name="RavenDB Queries can parse -  from &apos;EventsWithDates2s&apos; where Events[].Value in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { collectionWithListParameter : (x.Children!=null?x.Children:$p0), staticList : (x.Children!=null?x.Children:$p1) } limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { collectionWithListParameter : (x.Children!=null?x.Children:$p0), staticList : (x.Children!=null?x.Children:$p1) } limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;domainobjects&apos; where id() = $p0 " name="RavenDB Queries can parse -  from &apos;domainobjects&apos; where id() = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &gt; $p0 and IsVaccinated = $p1 " name="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &gt; $p0 and IsVaccinated = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PrimarySkills&apos; where SkillId = $p0 " name="RavenDB Queries can parse -  from index &apos;PrimarySkills&apos; where SkillId = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var purchasedQuantities = x.PurchasedQuantityByUser;   	return { Quantity : x.TotalQuantity, Quantities : Object.map(purchasedQuantities, function(v, k){ return v;}), QuantityTotal : Object.keys(purchasedQuantities).map(function(a){return{Key: a,Value:purchasedQuantities[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0) };   }   from &apos;Purchases&apos; as x where id() = $p0 select output(x) limit $p1, $p2 " name="RavenDB Queries can parse -  declare function output(x) {   	var purchasedQuantities = x.PurchasedQuantityByUser;   	return { Quantity : x.TotalQuantity, Quantities : Object.map(purchasedQuantities, function(v, k){ return v;}), QuantityTotal : Object.keys(purchasedQuantities).map(function(a){return{Key: a,Value:purchasedQuantities[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0) };   }   from &apos;Purchases&apos; as x where id() = $p0 select output(x) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; include AddressId " name="RavenDB Queries can parse -  from &apos;People&apos; include AddressId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High &gt; $p1) group by &apos;7 Days&apos;   select max()) as __timeSeriesQueryFunction0 limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High &gt; $p1) group by &apos;7 Days&apos;   select max()) as __timeSeriesQueryFunction0 limit $p4, $p5 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanSeconds = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanSeconds = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (exists(Tags) and not search(Tags, $p0)) and (Name = $p1) " name="RavenDB Queries can parse -  from index &apos;test&apos; where (exists(Tags) and not search(Tags, $p0)) and (Name = $p1) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and search(Age, $p1) or Age &gt; $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and search(Age, $p1) or Age &gt; $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsAnalyzed&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;PersonsAnalyzed&apos; where search(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where Id = $p0 select Id, StrVal " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where Id = $p0 select Id, StrVal " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;GameServers&apos; order by Name " name="RavenDB Queries can parse -  from &apos;GameServers&apos; order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; " name="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) order by id() " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) order by id() " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Second = $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Second = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (boost(search(Tags, $p0), 3) or boost(search(Tags, $p1), 20) or boost(search(Tags, $p2), 13)) " name="RavenDB Queries can parse -  from index &apos;test&apos; where (boost(search(Tags, $p0), 3) or boost(search(Tags, $p1), 20) or boost(search(Tags, $p2), 13)) " time="0.029">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ContactsIndex&apos; where (IsActive = $p0) and (Tags = $p1) order by CompanyId as alphaNumeric select facet(CompanyId, $p2) " name="RavenDB Queries can parse -  from index &apos;ContactsIndex&apos; where (IsActive = $p0) and (Tags = $p1) order by CompanyId as alphaNumeric select facet(CompanyId, $p2) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByCompanyMostFrequentShippingCountry&apos; " name="RavenDB Queries can parse -  from index &apos;Orders/ByCompanyMostFrequentShippingCountry&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDocs&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;SampleDocs&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DocumentationPages&apos; where boost(search(Title, $p0), 50) or boost(search(TextContent, $p1), 35) " name="RavenDB Queries can parse -  from &apos;DocumentationPages&apos; where boost(search(Title, $p0), 50) or boost(search(TextContent, $p1), 35) " time="0.018">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/WithReferencedEmployees&apos; " name="RavenDB Queries can parse -  from index &apos;Companies/WithReferencedEmployees&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProductSalesByZip&apos; order by Zip, ProductId " name="RavenDB Queries can parse -  from index &apos;ProductSalesByZip&apos; order by Zip, ProductId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &lt; $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByRoles&apos; where RoleType != $p0 " name="RavenDB Queries can parse -  from index &apos;Users/ByRoles&apos; where RoleType != $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProcessStepIndex&apos; where &apos;Group&apos; = $p0 and LatestExecution = $p1 include StepExecutionsId " name="RavenDB Queries can parse -  from index &apos;ProcessStepIndex&apos; where &apos;Group&apos; = $p0 and LatestExecution = $p1 include StepExecutionsId " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name != $p0 load u.DetailId as detail select { FullName : u.Name+&quot; &quot;+u.LastName, Detail : detail.Number } include timings() " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name != $p0 load u.DetailId as detail select { FullName : u.Name+&quot; &quot;+u.LastName, Detail : detail.Number } include timings() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ReducedCustomersIndex&apos; where lucene(Occupation, $p0) select distinct CustomerId limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;ReducedCustomersIndex&apos; where lucene(Occupation, $p0) select distinct CustomerId limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2) as __timeSeriesQueryFunction limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2) as __timeSeriesQueryFunction limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyClasses&apos; order by whoops as long desc limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyClasses&apos; order by whoops as long desc limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Projects/Search&apos; where SiteId = $p0 order by site-322-portfolio as long " name="RavenDB Queries can parse -  from index &apos;Projects/Search&apos; where SiteId = $p0 order by site-322-portfolio as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, company) {   	var employee = load(company.EmployeesIds)[0];   	var manager = load(employee.ReportsTo);   	return { Company : company.Name, Employee : employee.FirstName+&quot; &quot;+employee.LastName, Manager : manager.FirstName+&quot; &quot;+manager.LastName };   }   from &apos;Orders&apos; as o load o.Company as company select output(o, company) " name="RavenDB Queries can parse -  declare function output(o, company) {   	var employee = load(company.EmployeesIds)[0];   	var manager = load(employee.ReportsTo);   	return { Company : company.Name, Employee : employee.FirstName+&quot; &quot;+employee.LastName, Manager : manager.FirstName+&quot; &quot;+manager.LastName };   }   from &apos;Orders&apos; as o load o.Company as company select output(o, company) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Albums&apos; " name="RavenDB Queries can parse -  from &apos;Albums&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt; $p0 " name="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; order by Age as long " name="RavenDB Queries can parse -  from &apos;Items&apos; order by Age as long " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; select facet(id(&apos;facets/BlogFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; select facet(id(&apos;facets/BlogFacets&apos;)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where ZipCodes2.Count = $p0 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where ZipCodes2.Count = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ThorIndex&apos; where Rel_Id = $p0 " name="RavenDB Queries can parse -  from index &apos;ThorIndex&apos; where Rel_Id = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; " name="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.wkt($p0)) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.wkt($p0)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersAndProductsByNameAndCount&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersAndProductsByNameAndCount&apos; where Name = $p0 limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StringReverseIndex&apos; where startsWith(ReverseName, $p0) " name="RavenDB Queries can parse -  from index &apos;StringReverseIndex&apos; where startsWith(ReverseName, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select timeseries(from u.Heartrate where (Tag == $p1)) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select timeseries(from u.Heartrate where (Tag == $p1)) as __timeSeriesQueryFunction0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Text, $p0) " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Text, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where intersect((StrVal1 = $p0), StrVal2 = $p1)  " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where intersect((StrVal1 = $p0), StrVal2 = $p1)  " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country desc " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country desc " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex2&apos; " name="RavenDB Queries can parse -  from index &apos;TestIndex2&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Matches/PlayerStats&apos; where Player = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Matches/PlayerStats&apos; where Player = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u) {   	var detail = load((&quot;details/&quot;+u.DetailShortId));   	return { Name : u.Name, Detail : detail };   }   from &apos;Users&apos; as u where u.LastName = $p0 select output(u) " name="RavenDB Queries can parse -  declare function output(u) {   	var detail = load((&quot;details/&quot;+u.DetailShortId));   	return { Name : u.Name, Detail : detail };   }   from &apos;Users&apos; as u where u.LastName = $p0 select output(u) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; as u where u.Name = $p0 select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; as u where u.Name = $p0 select { Name : u.Name+&quot; &quot;+u.LastName, Counter : counter(u, &quot;Downloads&quot;) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex2&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex2&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where CaseId != $p0 or CaseId != $p1 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where CaseId != $p0 or CaseId != $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithIEnumerable&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithIEnumerable&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; where spatial.within(Coordinates, spatial.wkt($p0)) order by spatial.distance(Coordinates, spatial.point($p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; where spatial.within(Coordinates, spatial.wkt($p0)) order by spatial.distance(Coordinates, spatial.point($p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FoosTotalByBarDate&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;FoosTotalByBarDate&apos; order by Date " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as Id, Data " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as Id, Data " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where Items[].Key = $p0 and Items[].Value = $p1 " name="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where Items[].Key = $p0 and Items[].Value = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogPostAll&apos; " name="RavenDB Queries can parse -  from index &apos;BlogPostAll&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where Name = $p0 limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndexForTest&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) select distinct Name " name="RavenDB Queries can parse -  from index &apos;SpatialIndexForTest&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) select distinct Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Name as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select Name as Id, Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select key() as GroupByEmployeeAndCompany, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select key() as GroupByEmployeeAndCompany, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; select FirstName, Count " name="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; select FirstName, Count " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude2, Longitude2), spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude2, Longitude2), spatial.circle($p0, $p1, $p2)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name = $p0 and Email = $p1 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name = $p0 and Email = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Bar &gt; $p0 order by Bar as long desc " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Bar &gt; $p0 order by Bar as long desc " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where ((id() = $p0 or id() = $p1) or id() = $p2) and (Age = $p3) " name="RavenDB Queries can parse -  from &apos;Users&apos; where ((id() = $p0 or id() = $p1) or id() = $p2) and (Age = $p3) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StockInfoIndex&apos; where (Total &gt; $p0 and Total != $p1) and (Delta &lt; $p2 and Delta != $p3) select id() as Id, Quantity, Title, InStock, Total " name="RavenDB Queries can parse -  from index &apos;StockInfoIndex&apos; where (Total &gt; $p0 and Total != $p1) and (Delta &lt; $p2 and Delta != $p3) select id() as Id, Quantity, Title, InStock, Total " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u001aUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\u001aUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { Name : x.Name+&quot; &quot;+x.Name, TotalLikes : counter(x, &quot;Total Likes&quot;) } " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { Name : x.Name+&quot; &quot;+x.Name, TotalLikes : counter(x, &quot;Total Likes&quot;) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(name) {   from name where (Values[0] &gt; $p1) and (Values[0] &lt; $p2)   }   declare function output(p) {   	var tsFunc = function(name){return __timeSeriesQueryFunction0(name).Results;};   	return { Name : p.Name+&quot; &quot;+p.LastName, Heartrate : tsFunc(&quot;Heartrate&quot;), Stocks : tsFunc(&quot;Stocks&quot;) };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p) " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(name) {   from name where (Values[0] &gt; $p1) and (Values[0] &lt; $p2)   }   declare function output(p) {   	var tsFunc = function(name){return __timeSeriesQueryFunction0(name).Results;};   	return { Name : p.Name+&quot; &quot;+p.LastName, Heartrate : tsFunc(&quot;Heartrate&quot;), Stocks : tsFunc(&quot;Stocks&quot;) };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentationPages/ByKey&apos; " name="RavenDB Queries can parse -  from index &apos;DocumentationPages/ByKey&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as user select { Name : user.Name+user.Age, Downloads : counter(user, &quot;Downloads&quot;) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as user select { Name : user.Name+user.Age, Downloads : counter(user, &quot;Downloads&quot;) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DailyInvoicesIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DailyInvoicesIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex2&apos; where Name != $p0 select Name, School_Id as SchoolId " name="RavenDB Queries can parse -  from index &apos;UsersIndex2&apos; where Name != $p0 select Name, School_Id as SchoolId " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Key = $p0 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Key = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 or Revision &lt; $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 or Revision &lt; $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; order by Numbers " name="RavenDB Queries can parse -  from &apos;Items&apos; order by Numbers " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Addresses&apos; order by City " name="RavenDB Queries can parse -  from &apos;Addresses&apos; order by City " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ExampleIndexCreationTask&apos; select id() as Id, OwnerId, Name, Description limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;ExampleIndexCreationTask&apos; select id() as Id, OwnerId, Name, Description limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ItineraryTrafficDemands&apos; group by AirLineCode, Demands[].ItineraryDay select AirLineCode, Demands[].ItineraryDay as ItineraryDay, sum(Demands[].POOrigDemand) as SumOfPOOrigDemand " name="RavenDB Queries can parse -  from &apos;ItineraryTrafficDemands&apos; group by AirLineCode, Demands[].ItineraryDay select AirLineCode, Demands[].ItineraryDay as ItineraryDay, sum(Demands[].POOrigDemand) as SumOfPOOrigDemand " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Val = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Val = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where At &lt; $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where At &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CounterIndex&apos; where CounterNames = $p0 " name="RavenDB Queries can parse -  from index &apos;CounterIndex&apos; where CounterNames = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dogs&apos; where (true and not exists(Awards)) " name="RavenDB Queries can parse -  from &apos;Dogs&apos; where (true and not exists(Awards)) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDocs&apos; " name="RavenDB Queries can parse -  from &apos;SampleDocs&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0)) as HeartRate, timeseries(from p.BloodPressure where (Tag == $p1)) as BloodPressure limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0)) as HeartRate, timeseries(from p.BloodPressure where (Tag == $p1)) as BloodPressure limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;FeedItems&apos; where RelatedProfiles in ($p0) " name="RavenDB Queries can parse -  from &apos;FeedItems&apos; where RelatedProfiles in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index2&apos; where search(Field, $p1) include highlight(Field,128,2,$p0) " name="RavenDB Queries can parse -  from index &apos;Index2&apos; where search(Field, $p1) include highlight(Field,128,2,$p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByNameMapArrowSyntax&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByNameMapArrowSyntax&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region), facet(Product, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Product_Name = $p0 " name="RavenDB Queries can parse -  from index &apos;test&apos; where Product_Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where (((((Name != $p0 and Name != $p1)) and Name != $p2)) and Name != $p3) limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where (((((Name != $p0 and Name != $p1)) and Name != $p2)) and Name != $p3) limit $p4, $p5 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test1&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test1&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArrayWithIndex = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Year as long " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Year as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TagsIndex&apos; where exact(Tags = $p0) " name="RavenDB Queries can parse -  from index &apos;TagsIndex&apos; where exact(Tags = $p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 or name = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 or name = $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SeasonVarietyGradeGroups&apos; " name="RavenDB Queries can parse -  from &apos;SeasonVarietyGradeGroups&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Total), min(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Total), min(Total)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; select facet(DateIn &lt; $p0) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; select facet(DateIn &lt; $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArrayWithIndexWithCount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestBlogs&apos; order by Weighting as long " name="RavenDB Queries can parse -  from &apos;TestBlogs&apos; order by Weighting as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { FailedMin : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Min(a, b);}), FailedMax : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Max(a, b);}) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { FailedMin : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Min(a, b);}), FailedMax : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Max(a, b);}) } limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Accounts&apos; select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor " name="RavenDB Queries can parse -  from &apos;Accounts&apos; select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Logfiles&apos; where (StoreId != $p0 and SharedOnFacebookActionId != $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Logfiles&apos; where (StoreId != $p0 and SharedOnFacebookActionId != $p1) limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; order by SortWeight as long desc " name="RavenDB Queries can parse -  from &apos;Blogs&apos; order by SortWeight as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Ent1Index/Dynamic&apos; select Description, DescriptionNoStorage " name="RavenDB Queries can parse -  from index &apos;Ent1Index/Dynamic&apos; select Description, DescriptionNoStorage " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OtherDataIndex&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;OtherDataIndex&apos; where moreLikeThis(id() = $p1, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where LongMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where LongMinVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Address1, $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Address1, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(item) {   	var artists = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   	return { Name : item.Name, AlbumsByArtists : artists };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " name="RavenDB Queries can parse -  declare function output(item) {   	var artists = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   	return { Name : item.Name, AlbumsByArtists : artists };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; select suggest(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; select suggest(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { Any : o.Lines.some(function(x){return x.ProductName===$p0;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit&lt;$p1;}).map(function(y){return y.ProductName;}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { Any : o.Lines.some(function(x){return x.ProductName===$p0;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit&lt;$p1;}).map(function(y){return y.ProductName;}) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex22&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex22&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as watch where (Value &lt;= watch.Accuracy) group by &apos;1 Months&apos;   select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as watch where (Value &lt;= watch.Accuracy) group by &apos;1 Months&apos;   select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; include Supplier " name="RavenDB Queries can parse -  from &apos;Products&apos; include Supplier " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by ShipTo.Country order by Country select key() as Country, sum(Lines[].Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by ShipTo.Country order by Country select key() as Country, sum(Lines[].Quantity) as OrderedQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LastAccessIndex&apos; where LastAccess = $p0 " name="RavenDB Queries can parse -  from index &apos;LastAccessIndex&apos; where LastAccess = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { TotalUses : cmpxchg(&quot;Total Uses&quot;) } " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { TotalUses : cmpxchg(&quot;Total Uses&quot;) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex17&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex17&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; " name="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex18&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex18&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { TotalUses : cmpxchg(&quot;Total Uses&quot;) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { TotalUses : cmpxchg(&quot;Total Uses&quot;) } limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; as e where startsWith(id(), $p0) select { Id : id(e), CodingSkillLevel : e.Skills.filter((function(s){return s.Name===&quot;Coding&quot;;}))[0].Level, Revision : e.Revision } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Employees&apos; as e where startsWith(id(), $p0) select { Id : id(e), CodingSkillLevel : e.Skills.filter((function(s){return s.Name===&quot;Coding&quot;;}))[0].Level, Revision : e.Revision } limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where Id = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where Id = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Contacts&apos; " name="RavenDB Queries can parse -  from &apos;Contacts&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; " name="RavenDB Queries can parse -  from &apos;Items&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Ent1Index&apos; select Description " name="RavenDB Queries can parse -  from index &apos;Ent1Index&apos; select Description " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; select Name, Value limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; select Name, Value limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyFloatArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyFloatArray = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Minute &lt;= $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Minute &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as p where p.Age &gt; $p0 select timeseries(from p.Heartrate between $p3 and $p4 where (Values[0] &gt; $p1) and (Values[0] &lt; $p2)) as __timeSeriesQueryFunction0 limit $p5, $p6 " name="RavenDB Queries can parse -  from &apos;Users&apos; as p where p.Age &gt; $p0 select timeseries(from p.Heartrate between $p3 and $p4 where (Values[0] &gt; $p1) and (Values[0] &lt; $p2)) as __timeSeriesQueryFunction0 limit $p5, $p6 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Type = $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Type = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products/Stats&apos; select facet(id(&apos;facets/StatsFacet&apos;)) " name="RavenDB Queries can parse -  from index &apos;Products/Stats&apos; select facet(id(&apos;facets/StatsFacet&apos;)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; select Name, Pet " name="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; select Name, Pet " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; order by Surname desc " name="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; order by Surname desc " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 or Name = $p1) or ((Name = $p2 and Name = $p3) and Name = $p4) " name="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 or Name = $p1) or ((Name = $p2 and Name = $p3) and Name = $p4) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as _load select { Employee : load(_load.Employee), Company : _load.Company } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as _load select { Employee : load(_load.Employee), Company : _load.Company } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.within(Shape, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.within(Shape, spatial.wkt($p0)) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Desc, $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Desc, $p0) " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Posts&apos; group by CreatedAt select sum(Comments.Length) as CommentsCount, count() as PostsCount " name="RavenDB Queries can parse -  from &apos;Posts&apos; group by CreatedAt select sum(Comments.Length) as CommentsCount, count() as PostsCount " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Tags[].Name = $p0 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Tags[].Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\&apos;Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\&apos;Users&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Toss/ByCreatedOn&apos; " name="RavenDB Queries can parse -  from index &apos;Toss/ByCreatedOn&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeries/Index/With/CompareExchange/MapReduce&apos; " name="RavenDB Queries can parse -  from index &apos;TimeSeries/Index/With/CompareExchange/MapReduce&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(endsWith(Name, $p0)) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(endsWith(Name, $p0)) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and (true and not (search(Name, $p1)) and not (search(Name, $p2))) " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and (true and not (search(Name, $p1)) and not (search(Name, $p2))) " time="0.082">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Day &lt; $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Day &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select employee " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select employee " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where boost(search(Name, $p0), 0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where boost(search(Name, $p0), 0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = $p0 select facet(Name, sum(Count)) " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = $p0 select facet(Name, sum(Count)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; " name="RavenDB Queries can parse -  from index &apos;test&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TheIndex&apos; where Visibility = $p0 order by UpdatedAt desc limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TheIndex&apos; where Visibility = $p0 order by UpdatedAt desc limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Nett)) " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Nett)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 select Name, Age " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 select Name, Age " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Gender = $p0 or Name = $p1 or Age = $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; where Gender = $p0 or Name = $p1 or Age = $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc select Title " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric desc select Title " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/QuerySyntax&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/QuerySyntax&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndexWithStoredArray&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UsersIndexWithStoredArray&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Attachments/Unused&apos; " name="RavenDB Queries can parse -  from index &apos;Attachments/Unused&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TShirtNested&apos; where intersect((Name = $p0), (Types_Color = $p1 and Types_Size = $p2), Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber as long " name="RavenDB Queries can parse -  from index &apos;TShirtNested&apos; where intersect((Name = $p0), (Types_Color = $p1 and Types_Size = $p2), Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; where lucene(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; where lucene(Name, $p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where BoolProp = $p0 and StringProp in ($p1) " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where BoolProp = $p0 and StringProp in ($p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Profits/References&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Profits/References&apos; limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by Name desc " name="RavenDB Queries can parse -  from &apos;Users&apos; order by Name desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where endsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where endsWith(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and CaseId != $p1)) or HistoryCode = $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and CaseId != $p1)) or HistoryCode = $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u001fUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\u001fUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SearchIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SearchIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where exists(Properties) " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where exists(Properties) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Sections&apos; order by Position as long desc select Position limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Sections&apos; order by Position as long desc select Position limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where MyProperty = $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where MyProperty = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Commands&apos; include cmpxchg(&apos;Id&apos;) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Commands&apos; include cmpxchg(&apos;Id&apos;) limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Tags/Count&apos; where Name = $p0 and UserId = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Tags/Count&apos; where Name = $p0 and UserId = $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StockInfoIndex&apos; " name="RavenDB Queries can parse -  from index &apos;StockInfoIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where search(FavoritePrimes, $p0, and) " name="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where search(FavoritePrimes, $p0, and) " time="0.014">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(doc) {   	var referenced = load(doc.References.map((function(x){return x.Document2Id;})));   	return { Data : referenced.map(function(x){return x.DataToUpdate;}) };   }   from &apos;Documents&apos; as doc where id() = $p0 select output(doc) limit $p1, $p2 " name="RavenDB Queries can parse -  declare function output(doc) {   	var referenced = load(doc.References.map((function(x){return x.Document2Id;})));   	return { Data : referenced.map(function(x){return x.DataToUpdate;}) };   }   from &apos;Documents&apos; as doc where id() = $p0 select output(doc) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AdviceSearch&apos; where Sections = $p0 and search(SearchField, $p1) order by score() desc include Sections " name="RavenDB Queries can parse -  from index &apos;AdviceSearch&apos; where Sections = $p0 and search(SearchField, $p1) order by score() desc include Sections " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProviderAndTaxonomyCodeIndex1&apos; where TaxonomyCode_EffectiveFrom = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;ProviderAndTaxonomyCodeIndex1&apos; where TaxonomyCode_EffectiveFrom = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where (Capacity &gt;= $p0 and Capacity &lt;= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date desc " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where (Capacity &gt;= $p0 and Capacity &lt;= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date desc " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Documents/TestIndex&apos; select id() as Id " name="RavenDB Queries can parse -  from index &apos;Documents/TestIndex&apos; select id() as Id " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] &gt; $p1) and (watch.Accuracy &gt;= $p2)   }   declare function output(person) {   	var customFunc = function(entries){return {Max:entries.map(function(entry){return entry.Values[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),HasApple:entries.map(function(x){return x.Tag;}).indexOf(&quot;watches/apple&quot;)&gt;=0,Accuracies:Array.from(new Set(load(entries.map((function(e){return e.Tag;}))).map((function(doc){return doc.Accuracy;}))))};};   	var tsQuery = __timeSeriesQueryFunction0(person, watch);   	return { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from &apos;People&apos; as person where person.Age &gt; $p0 select output(person) limit $p5, $p6 " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] &gt; $p1) and (watch.Accuracy &gt;= $p2)   }   declare function output(person) {   	var customFunc = function(entries){return {Max:entries.map(function(entry){return entry.Values[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),HasApple:entries.map(function(x){return x.Tag;}).indexOf(&quot;watches/apple&quot;)&gt;=0,Accuracies:Array.from(new Set(load(entries.map((function(e){return e.Tag;}))).map((function(doc){return doc.Accuracy;}))))};};   	var tsQuery = __timeSeriesQueryFunction0(person, watch);   	return { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from &apos;People&apos; as person where person.Age &gt; $p0 select output(person) limit $p5, $p6 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not (SomeProperty = $p0 or SomeProperty = $p1)) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not (SomeProperty = $p0 or SomeProperty = $p1)) limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where IntMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where IntMinVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PurchaseHistoryIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PurchaseHistoryIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where search(Name, $p0) limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(startsWith(Name, $p0)) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(startsWith(Name, $p0)) " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as _function select { Employee : load(_function.Employee), Company : _function.Company } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as _function select { Employee : load(_function.Employee), Company : _function.Company } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersReducedByNameReturnSyntax&apos; where Count = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersReducedByNameReturnSyntax&apos; where Count = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines.Count select count(), key() as LinesLength " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines.Count select count(), key() as LinesLength " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { Update : o.Company.substr(10), Include : o.Employee.substr(10) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { Update : o.Company.substr(10), Include : o.Employee.substr(10) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Articles/byArticleId&apos; order by id() limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Articles/byArticleId&apos; order by id() limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bunnies&apos; where (true and not id() in ($p0)) " name="RavenDB Queries can parse -  from &apos;Bunnies&apos; where (true and not id() in ($p0)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\nUsers&apos; " name="RavenDB Queries can parse -  from &apos;Test\nUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalQuantity as long desc select key() as NameOfProduct, sum(Quantity) as TotalQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalQuantity as long desc select key() as NameOfProduct, sum(Quantity) as TotalQuantity " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Clients&apos; where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 " name="RavenDB Queries can parse -  from &apos;Clients&apos; where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] &gt; $p0) group by &apos;1 Months&apos;   select average(), max(), min()) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] &gt; $p0) group by &apos;1 Months&apos;   select average(), max(), min()) as __timeSeriesQueryFunction0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByProductAndCount/QuerySyntax&apos; order by Count as long " name="RavenDB Queries can parse -  from index &apos;Orders/ByProductAndCount/QuerySyntax&apos; order by Count as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where id() in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where id() in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where LongMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where LongMaxVal = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where SomeProperty = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where SomeProperty = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Books&apos; " name="RavenDB Queries can parse -  from &apos;Books&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByPostCategory&apos; where moreLikeThis(id() = $p1, $p0) and Category = $p2 " name="RavenDB Queries can parse -  from index &apos;Posts/ByPostCategory&apos; where moreLikeThis(id() = $p1, $p0) and Category = $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;test&apos; where lucene(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { OrderId : id(o), OrderItems : o.OrderItems.map(function(i){return {i:i,item:load(i.ItemId)};}).map(function(__rvn0){return {__rvn0:__rvn0,category:load(__rvn0.item.CategoryId)};}).map(function(__rvn1){return {__rvn1:__rvn1,revenueStream:load(__rvn1.__rvn0.item.RevenueStreamId)};}).map(function(__rvn2){return {ItemId:__rvn2.__rvn1.__rvn0.i.ItemId,Price:__rvn2.__rvn1.__rvn0.i.Price,ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.category.Name,RevenueStreamName:__rvn2.revenueStream.Name};}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o select { OrderId : id(o), OrderItems : o.OrderItems.map(function(i){return {i:i,item:load(i.ItemId)};}).map(function(__rvn0){return {__rvn0:__rvn0,category:load(__rvn0.item.CategoryId)};}).map(function(__rvn1){return {__rvn1:__rvn1,revenueStream:load(__rvn1.__rvn0.item.RevenueStreamId)};}).map(function(__rvn2){return {ItemId:__rvn2.__rvn1.__rvn0.i.ItemId,Price:__rvn2.__rvn1.__rvn0.i.Price,ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.category.Name,RevenueStreamName:__rvn2.revenueStream.Name};}) } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where Address.Country = $p0 select distinct Address.Country as Country limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where Address.Country = $p0 select distinct Address.Country as Country limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Age &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Age &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SectionDatas&apos; " name="RavenDB Queries can parse -  from &apos;SectionDatas&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex&apos; " name="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Index&apos; " name="RavenDB Queries can parse -  from index &apos;User/Index&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;index&apos; where Email = $p0 " name="RavenDB Queries can parse -  from index &apos;index&apos; where Email = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where lucene(Title, $p2) or lucene(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where lucene(Title, $p2) or lucene(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; " name="RavenDB Queries can parse -  from index &apos;Index1&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DecimalAggregationReduce&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DecimalAggregationReduce&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; as o load o.Company as c select c.Name " name="RavenDB Queries can parse -  from index &apos;Index1&apos; as o load o.Company as c select c.Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Users, $p1)) and (Name = $p2) " name="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Users, $p1)) and (Name = $p2) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MilesGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MilesGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccruedRevenueIndex&apos; " name="RavenDB Queries can parse -  from index &apos;AccruedRevenueIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where endsWith(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where endsWith(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where FirstName = $p0 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where FirstName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapIndexWithCount&apos; select Count, Count2, ContainsIntInt, ContainsInt, ContainsDouble, ContainsShort, ContainsLong " name="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapIndexWithCount&apos; select Count, Count2, ContainsIntInt, ContainsInt, ContainsDouble, ContainsShort, ContainsLong " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TagCloud&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;TagCloud&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where FirstName = $p0 or FirstName = $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; where FirstName = $p0 or FirstName = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 order by random() limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 order by random() limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Casinos&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Casinos&apos; where id() = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ModelWithEnums&apos; where Category = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;ModelWithEnums&apos; where Category = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ClassWithDouble/Index&apos; order by Rating as double desc " name="RavenDB Queries can parse -  from index &apos;ClassWithDouble/Index&apos; order by Rating as double desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; select Face " name="RavenDB Queries can parse -  from &apos;People&apos; select Face " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TicketTimerIndex&apos; where (LocationId in ($p0) and CriticalDate != $p1 and CriticalDate &lt; $p2) select LocationId, DateUpdated, CriticalDate " name="RavenDB Queries can parse -  from index &apos;TicketTimerIndex&apos; where (LocationId in ($p0) and CriticalDate != $p1 and CriticalDate &lt; $p2) select LocationId, DateUpdated, CriticalDate " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Auto/Companies/ByPhone&apos; " name="RavenDB Queries can parse -  from index &apos;Auto/Companies/ByPhone&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) " name="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where (search(Title, $p0) or search(Desc, $p1)) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where (search(Title, $p0) or search(Desc, $p1)) " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 order by Age as long " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 order by Age as long " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Enumerable&apos; where Bars_Count = $p0 " name="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Enumerable&apos; where Bars_Count = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyClasses&apos; order by ThisWillWork as long limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyClasses&apos; order by ThisWillWork as long limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Blog/Search&apos; order by Price as double " name="RavenDB Queries can parse -  from index &apos;Blog/Search&apos; order by Price as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;People/ByName&apos; select suggest(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;People/ByName&apos; select suggest(Name, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GeohashIndexLevel7&apos; where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;GeohashIndexLevel7&apos; where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex2&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex2&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tests&apos; " name="RavenDB Queries can parse -  from &apos;Tests&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FanOutTestIndex&apos; where Comment = $p0 and Tags = $p1 select InnerDocId, Comment, Tags limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;FanOutTestIndex&apos; where Comment = $p0 and Tags = $p1 select InnerDocId, Comment, Tags limit $p2, $p3 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Letter desc limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Letter desc limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags2[] order by Count as long select count(), key() as Tag " name="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags2[] order by Count as long select count(), key() as Tag " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SimpleIndex&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where user_address.city_name = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where user_address.city_name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Title " name="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Title " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;RegexMes&apos; where regex(Text, $p0) select Text " name="RavenDB Queries can parse -  from &apos;RegexMes&apos; where regex(Text, $p0) select Text " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; select Count, FirstName " name="RavenDB Queries can parse -  from index &apos;SimpleMapReduceIndex&apos; select Count, FirstName " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; select facet(&apos;Colour with space&apos;) as &apos;Alias with space&apos;, facet(Ability) " name="RavenDB Queries can parse -  from &apos;Companies&apos; select facet(&apos;Colour with space&apos;) as &apos;Alias with space&apos;, facet(Ability) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where OrderedAt &lt; $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where OrderedAt &lt; $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestObjects&apos; where (DateRangesWithNumbers[].From &lt;= $p0 and DateRangesWithNumbers[].To &gt;= $p1) or (DateRangesWithNumbers[].From &lt;= $p2 and DateRangesWithNumbers[].To &gt;= $p3) " name="RavenDB Queries can parse -  from &apos;TestObjects&apos; where (DateRangesWithNumbers[].From &lt;= $p0 and DateRangesWithNumbers[].To &gt;= $p1) or (DateRangesWithNumbers[].From &lt;= $p2 and DateRangesWithNumbers[].To &gt;= $p3) " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by random(&apos;seed1&apos;) " name="RavenDB Queries can parse -  from &apos;Users&apos; order by random(&apos;seed1&apos;) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { EmptyHashSet : (x.Children!=null?x.Children:[]), HashSetWithInitializers : (x.Names!=null?x.Names:[&quot;john&quot;,&quot;paul&quot;,&quot;george&quot;,&quot;ringo&quot;]) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { EmptyHashSet : (x.Children!=null?x.Children:[]), HashSetWithInitializers : (x.Names!=null?x.Names:[&quot;john&quot;,&quot;paul&quot;,&quot;george&quot;,&quot;ringo&quot;]) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; " name="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EmailSequenceWithStatusIndex&apos; " name="RavenDB Queries can parse -  from index &apos;EmailSequenceWithStatusIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArrayWithIndex = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_3919&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_3919&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FanoutByPaymentsWithReduce&apos; where Amount = $p0 " name="RavenDB Queries can parse -  from index &apos;FanoutByPaymentsWithReduce&apos; where Amount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Profits/Monthly&apos; order by ProfitValue as double " name="RavenDB Queries can parse -  from index &apos;Profits/Monthly&apos; order by ProfitValue as double " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where (lucene(Query, $p0)) and exact(Department = $p1) " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where (lucene(Query, $p0)) and exact(Department = $p1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u) {   	var lastName = u.LastName;   	return { FullName : u.Name+&quot; &quot;+lastName };   }   from &apos;Users&apos; as u select output(u) " name="RavenDB Queries can parse -  declare function output(u) {   	var lastName = u.LastName;   	return { FullName : u.Name+&quot; &quot;+lastName };   }   from &apos;Users&apos; as u select output(u) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserByReverseName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;UserByReverseName&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)), Venue " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)), Venue " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; " name="RavenDB Queries can parse -  from &apos;Entities&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; select Company as &apos;Load&apos;, Employee as &apos;Include&apos; " name="RavenDB Queries can parse -  from &apos;Orders&apos; select Company as &apos;Load&apos;, Employee as &apos;Include&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where Active = $p0 select facet(Category), facet(Age &gt;= 0 AND Age &lt;= 1, Age &gt;= 1 AND Age &lt;= 2, Age &gt;= 2 AND Age &lt;= 3, Age &gt;= 3 AND Age &lt;= 4, Age &gt;= 4 AND Age &lt;= 5, Age &gt;= 5 AND Age &lt;= 6, Age &gt;= 6 AND Age &lt;= 7, Age &gt;= 7 AND Age &lt;= 8, Age &gt;= 8 AND Age &lt;= 9, Age &gt;= 9 AND Age &lt;= 10, Age &gt;= 10 AND Age &lt;= 11, Age &gt;= 11 AND Age &lt;= 12, Age &gt;= 12 AND Age &lt;= 13, Age &gt;= 13 AND Age &lt;= 14, Age &gt;= 14 AND Age &lt;= 15, Age &gt;= 15 AND Age &lt;= 16, Age &gt;= 16 AND Age &lt;= 17, Age &gt;= 17 AND Age &lt;= 18, Age &gt;= 18 AND Age &lt;= 19, Age &gt;= 19 AND Age &lt;= 20, Age &gt;= 20 AND Age &lt;= 21, Age &gt;= 21 AND Age &lt;= 22, Age &gt;= 22 AND Age &lt;= 23, Age &gt;= 23 AND Age &lt;= 24, Age &gt;= 24 AND Age &lt;= 25, Age &gt;= 25 AND Age &lt;= 26, Age &gt;= 26 AND Age &lt;= 27, Age &gt;= 27 AND Age &lt;= 28, Age &gt;= 28 AND Age &lt;= 29, Age &gt;= 29 AND Age &lt;= 30, Age &gt;= 30 AND Age &lt;= 31, Age &gt;= 31 AND Age &lt;= 32, Age &gt;= 32 AND Age &lt;= 33, Age &gt;= 33 AND Age &lt;= 34, Age &gt;= 34 AND Age &lt;= 35, Age &gt;= 35 AND Age &lt;= 36, Age &gt;= 36 AND Age &lt;= 37, Age &gt;= 37 AND Age &lt;= 38, Age &gt;= 38 AND Age &lt;= 39, Age &gt;= 39 AND Age &lt;= 40, Age &gt;= 40 AND Age &lt;= 41, Age &gt;= 41 AND Age &lt;= 42, Age &gt;= 42 AND Age &lt;= 43, Age &gt;= 43 AND Age &lt;= 44, Age &gt;= 44 AND Age &lt;= 45, Age &gt;= 45 AND Age &lt;= 46, Age &gt;= 46 AND Age &lt;= 47, Age &gt;= 47 AND Age &lt;= 48, Age &gt;= 48 AND Age &lt;= 49, Age &gt;= 49 AND Age &lt;= 50, Age &gt;= 50 AND Age &lt;= 51, Age &gt;= 51 AND Age &lt;= 52, Age &gt;= 52 AND Age &lt;= 53, Age &gt;= 53 AND Age &lt;= 54, Age &gt;= 54 AND Age &lt;= 55, Age &gt;= 55 AND Age &lt;= 56, Age &gt;= 56 AND Age &lt;= 57, Age &gt;= 57 AND Age &lt;= 58, Age &gt;= 58 AND Age &lt;= 59, Age &gt;= 59 AND Age &lt;= 60, Age &gt;= 60 AND Age &lt;= 61, Age &gt;= 61 AND Age &lt;= 62, Age &gt;= 62 AND Age &lt;= 63, Age &gt;= 63 AND Age &lt;= 64, Age &gt;= 64 AND Age &lt;= 65, Age &gt;= 65 AND Age &lt;= 66, Age &gt;= 66 AND Age &lt;= 67, Age &gt;= 67 AND Age &lt;= 68, Age &gt;= 68 AND Age &lt;= 69, Age &gt;= 69 AND Age &lt;= 70, Age &gt;= 70 AND Age &lt;= 71, Age &gt;= 71 AND Age &lt;= 72, Age &gt;= 72 AND Age &lt;= 73, Age &gt;= 73 AND Age &lt;= 74, Age &gt;= 74 AND Age &lt;= 75, Age &gt;= 75 AND Age &lt;= 76, Age &gt;= 76 AND Age &lt;= 77, Age &gt;= 77 AND Age &lt;= 78, Age &gt;= 78 AND Age &lt;= 79, Age &gt;= 79 AND Age &lt;= 80, Age &gt;= 80 AND Age &lt;= 81, Age &gt;= 81 AND Age &lt;= 82, Age &gt;= 82 AND Age &lt;= 83, Age &gt;= 83 AND Age &lt;= 84, Age &gt;= 84 AND Age &lt;= 85, Age &gt;= 85 AND Age &lt;= 86, Age &gt;= 86 AND Age &lt;= 87, Age &gt;= 87 AND Age &lt;= 88, Age &gt;= 88 AND Age &lt;= 89, Age &gt;= 89 AND Age &lt;= 90, Age &gt;= 90 AND Age &lt;= 91, Age &gt;= 91 AND Age &lt;= 92, Age &gt;= 92 AND Age &lt;= 93, Age &gt;= 93 AND Age &lt;= 94, Age &gt;= 94 AND Age &lt;= 95, Age &gt;= 95 AND Age &lt;= 96, Age &gt;= 96 AND Age &lt;= 97, Age &gt;= 97 AND Age &lt;= 98, Age &gt;= 98 AND Age &lt;= 99, Age &gt;= 99 AND Age &lt;= 100, Age &gt;= 100 AND Age &lt;= 101, Age &gt;= 101 AND Age &lt;= 102, Age &gt;= 102 AND Age &lt;= 103, Age &gt;= 103 AND Age &lt;= 104, Age &gt;= 104 AND Age &lt;= 105, Age &gt;= 105 AND Age &lt;= 106, Age &gt;= 106 AND Age &lt;= 107, Age &gt;= 107 AND Age &lt;= 108, Age &gt;= 108 AND Age &lt;= 109, Age &gt;= 109 AND Age &lt;= 110, Age &gt;= 110 AND Age &lt;= 111, Age &gt;= 111 AND Age &lt;= 112, Age &gt;= 112 AND Age &lt;= 113, Age &gt;= 113 AND Age &lt;= 114, Age &gt;= 114 AND Age &lt;= 115, Age &gt;= 115 AND Age &lt;= 116, Age &gt;= 116 AND Age &lt;= 117, Age &gt;= 117 AND Age &lt;= 118, Age &gt;= 118 AND Age &lt;= 119, Age &gt;= 119 AND Age &lt;= 120, Age &gt;= 120 AND Age &lt;= 121, Age &gt;= 121 AND Age &lt;= 122, Age &gt;= 122 AND Age &lt;= 123, Age &gt;= 123 AND Age &lt;= 124, Age &gt;= 124 AND Age &lt;= 125, Age &gt;= 125 AND Age &lt;= 126, Age &gt;= 126 AND Age &lt;= 127, Age &gt;= 127 AND Age &lt;= 128, Age &gt;= 128 AND Age &lt;= 129, Age &gt;= 129 AND Age &lt;= 130, Age &gt;= 130 AND Age &lt;= 131, Age &gt;= 131 AND Age &lt;= 132, Age &gt;= 132 AND Age &lt;= 133, Age &gt;= 133 AND Age &lt;= 134, Age &gt;= 134 AND Age &lt;= 135, Age &gt;= 135 AND Age &lt;= 136, Age &gt;= 136 AND Age &lt;= 137, Age &gt;= 137 AND Age &lt;= 138, Age &gt;= 138 AND Age &lt;= 139, Age &gt;= 139 AND Age &lt;= 140, Age &gt;= 140 AND Age &lt;= 141, Age &gt;= 141 AND Age &lt;= 142, Age &gt;= 142 AND Age &lt;= 143, Age &gt;= 143 AND Age &lt;= 144, Age &gt;= 144 AND Age &lt;= 145, Age &gt;= 145 AND Age &lt;= 146, Age &gt;= 146 AND Age &lt;= 147, Age &gt;= 147 AND Age &lt;= 148, Age &gt;= 148 AND Age &lt;= 149, Age &gt;= 149 AND Age &lt;= 150, Age &gt;= 150 AND Age &lt;= 151, Age &gt;= 151 AND Age &lt;= 152, Age &gt;= 152 AND Age &lt;= 153, Age &gt;= 153 AND Age &lt;= 154, Age &gt;= 154 AND Age &lt;= 155, Age &gt;= 155 AND Age &lt;= 156, Age &gt;= 156 AND Age &lt;= 157, Age &gt;= 157 AND Age &lt;= 158, Age &gt;= 158 AND Age &lt;= 159, Age &gt;= 159 AND Age &lt;= 160, Age &gt;= 160 AND Age &lt;= 161, Age &gt;= 161 AND Age &lt;= 162, Age &gt;= 162 AND Age &lt;= 163, Age &gt;= 163 AND Age &lt;= 164, Age &gt;= 164 AND Age &lt;= 165, Age &gt;= 165 AND Age &lt;= 166, Age &gt;= 166 AND Age &lt;= 167, Age &gt;= 167 AND Age &lt;= 168, Age &gt;= 168 AND Age &lt;= 169, Age &gt;= 169 AND Age &lt;= 170, Age &gt;= 170 AND Age &lt;= 171, Age &gt;= 171 AND Age &lt;= 172, Age &gt;= 172 AND Age &lt;= 173, Age &gt;= 173 AND Age &lt;= 174, Age &gt;= 174 AND Age &lt;= 175, Age &gt;= 175 AND Age &lt;= 176, Age &gt;= 176 AND Age &lt;= 177, Age &gt;= 177 AND Age &lt;= 178, Age &gt;= 178 AND Age &lt;= 179, Age &gt;= 179 AND Age &lt;= 180, Age &gt;= 180 AND Age &lt;= 181, Age &gt;= 181 AND Age &lt;= 182, Age &gt;= 182 AND Age &lt;= 183, Age &gt;= 183 AND Age &lt;= 184, Age &gt;= 184 AND Age &lt;= 185, Age &gt;= 185 AND Age &lt;= 186, Age &gt;= 186 AND Age &lt;= 187, Age &gt;= 187 AND Age &lt;= 188, Age &gt;= 188 AND Age &lt;= 189, Age &gt;= 189 AND Age &lt;= 190, Age &gt;= 190 AND Age &lt;= 191, Age &gt;= 191 AND Age &lt;= 192, Age &gt;= 192 AND Age &lt;= 193, Age &gt;= 193 AND Age &lt;= 194, Age &gt;= 194 AND Age &lt;= 195, Age &gt;= 195 AND Age &lt;= 196, Age &gt;= 196 AND Age &lt;= 197, Age &gt;= 197 AND Age &lt;= 198, Age &gt;= 198 AND Age &lt;= 199, Age &gt;= 199 AND Age &lt;= 200, Age &gt;= 200 AND Age &lt;= 201, Age &gt;= 201 AND Age &lt;= 202, Age &gt;= 202 AND Age &lt;= 203, Age &gt;= 203 AND Age &lt;= 204, Age &gt;= 204 AND Age &lt;= 205, Age &gt;= 205 AND Age &lt;= 206, Age &gt;= 206 AND Age &lt;= 207, Age &gt;= 207 AND Age &lt;= 208, Age &gt;= 208 AND Age &lt;= 209, Age &gt;= 209 AND Age &lt;= 210, Age &gt;= 210 AND Age &lt;= 211, Age &gt;= 211 AND Age &lt;= 212, Age &gt;= 212 AND Age &lt;= 213, Age &gt;= 213 AND Age &lt;= 214, Age &gt;= 214 AND Age &lt;= 215, Age &gt;= 215 AND Age &lt;= 216, Age &gt;= 216 AND Age &lt;= 217, Age &gt;= 217 AND Age &lt;= 218, Age &gt;= 218 AND Age &lt;= 219, Age &gt;= 219 AND Age &lt;= 220, Age &gt;= 220 AND Age &lt;= 221, Age &gt;= 221 AND Age &lt;= 222, Age &gt;= 222 AND Age &lt;= 223, Age &gt;= 223 AND Age &lt;= 224, Age &gt;= 224 AND Age &lt;= 225, Age &gt;= 225 AND Age &lt;= 226, Age &gt;= 226 AND Age &lt;= 227, Age &gt;= 227 AND Age &lt;= 228, Age &gt;= 228 AND Age &lt;= 229, Age &gt;= 229 AND Age &lt;= 230, Age &gt;= 230 AND Age &lt;= 231, Age &gt;= 231 AND Age &lt;= 232, Age &gt;= 232 AND Age &lt;= 233, Age &gt;= 233 AND Age &lt;= 234, Age &gt;= 234 AND Age &lt;= 235, Age &gt;= 235 AND Age &lt;= 236, Age &gt;= 236 AND Age &lt;= 237, Age &gt;= 237 AND Age &lt;= 238, Age &gt;= 238 AND Age &lt;= 239, Age &gt;= 239 AND Age &lt;= 240, Age &gt;= 240 AND Age &lt;= 241, Age &gt;= 241 AND Age &lt;= 242, Age &gt;= 242 AND Age &lt;= 243, Age &gt;= 243 AND Age &lt;= 244, Age &gt;= 244 AND Age &lt;= 245, Age &gt;= 245 AND Age &lt;= 246, Age &gt;= 246 AND Age &lt;= 247, Age &gt;= 247 AND Age &lt;= 248, Age &gt;= 248 AND Age &lt;= 249, Age &gt;= 249 AND Age &lt;= 250, Age &gt;= 250 AND Age &lt;= 251, Age &gt;= 251 AND Age &lt;= 252, Age &gt;= 252 AND Age &lt;= 253, Age &gt;= 253 AND Age &lt;= 254, Age &gt;= 254 AND Age &lt;= 255, Age &gt;= 255 AND Age &lt;= 256, Age &gt;= 256 AND Age &lt;= 257, Age &gt;= 257 AND Age &lt;= 258, Age &gt;= 258 AND Age &lt;= 259, Age &gt;= 259 AND Age &lt;= 260, Age &gt;= 260 AND Age &lt;= 261, Age &gt;= 261 AND Age &lt;= 262, Age &gt;= 262 AND Age &lt;= 263, Age &gt;= 263 AND Age &lt;= 264, Age &gt;= 264 AND Age &lt;= 265, Age &gt;= 265 AND Age &lt;= 266, Age &gt;= 266 AND Age &lt;= 267, Age &gt;= 267 AND Age &lt;= 268, Age &gt;= 268 AND Age &lt;= 269, Age &gt;= 269 AND Age &lt;= 270, Age &gt;= 270 AND Age &lt;= 271, Age &gt;= 271 AND Age &lt;= 272, Age &gt;= 272 AND Age &lt;= 273, Age &gt;= 273 AND Age &lt;= 274, Age &gt;= 274 AND Age &lt;= 275, Age &gt;= 275 AND Age &lt;= 276, Age &gt;= 276 AND Age &lt;= 277, Age &gt;= 277 AND Age &lt;= 278, Age &gt;= 278 AND Age &lt;= 279, Age &gt;= 279 AND Age &lt;= 280, Age &gt;= 280 AND Age &lt;= 281, Age &gt;= 281 AND Age &lt;= 282, Age &gt;= 282 AND Age &lt;= 283, Age &gt;= 283 AND Age &lt;= 284, Age &gt;= 284 AND Age &lt;= 285, Age &gt;= 285 AND Age &lt;= 286, Age &gt;= 286 AND Age &lt;= 287, Age &gt;= 287 AND Age &lt;= 288, Age &gt;= 288 AND Age &lt;= 289, Age &gt;= 289 AND Age &lt;= 290, Age &gt;= 290 AND Age &lt;= 291, Age &gt;= 291 AND Age &lt;= 292, Age &gt;= 292 AND Age &lt;= 293, Age &gt;= 293 AND Age &lt;= 294, Age &gt;= 294 AND Age &lt;= 295, Age &gt;= 295 AND Age &lt;= 296, Age &gt;= 296 AND Age &lt;= 297, Age &gt;= 297 AND Age &lt;= 298, Age &gt;= 298 AND Age &lt;= 299, Age &gt;= 299 AND Age &lt;= 300, Age &gt;= 300 AND Age &lt;= 301, Age &gt;= 301 AND Age &lt;= 302, Age &gt;= 302 AND Age &lt;= 303, Age &gt;= 303 AND Age &lt;= 304, Age &gt;= 304 AND Age &lt;= 305, Age &gt;= 305 AND Age &lt;= 306, Age &gt;= 306 AND Age &lt;= 307, Age &gt;= 307 AND Age &lt;= 308, Age &gt;= 308 AND Age &lt;= 309, Age &gt;= 309 AND Age &lt;= 310, Age &gt;= 310 AND Age &lt;= 311, Age &gt;= 311 AND Age &lt;= 312, Age &gt;= 312 AND Age &lt;= 313, Age &gt;= 313 AND Age &lt;= 314, Age &gt;= 314 AND Age &lt;= 315, Age &gt;= 315 AND Age &lt;= 316, Age &gt;= 316 AND Age &lt;= 317, Age &gt;= 317 AND Age &lt;= 318, Age &gt;= 318 AND Age &lt;= 319, Age &gt;= 319 AND Age &lt;= 320, Age &gt;= 320 AND Age &lt;= 321, Age &gt;= 321 AND Age &lt;= 322, Age &gt;= 322 AND Age &lt;= 323, Age &gt;= 323 AND Age &lt;= 324, Age &gt;= 324 AND Age &lt;= 325, Age &gt;= 325 AND Age &lt;= 326, Age &gt;= 326 AND Age &lt;= 327, Age &gt;= 327 AND Age &lt;= 328, Age &gt;= 328 AND Age &lt;= 329, Age &gt;= 329 AND Age &lt;= 330, Age &gt;= 330 AND Age &lt;= 331, Age &gt;= 331 AND Age &lt;= 332, Age &gt;= 332 AND Age &lt;= 333, Age &gt;= 333 AND Age &lt;= 334, Age &gt;= 334 AND Age &lt;= 335, Age &gt;= 335 AND Age &lt;= 336, Age &gt;= 336 AND Age &lt;= 337, Age &gt;= 337 AND Age &lt;= 338, Age &gt;= 338 AND Age &lt;= 339, Age &gt;= 339 AND Age &lt;= 340, Age &gt;= 340 AND Age &lt;= 341, Age &gt;= 341 AND Age &lt;= 342, Age &gt;= 342 AND Age &lt;= 343, Age &gt;= 343 AND Age &lt;= 344, Age &gt;= 344 AND Age &lt;= 345, Age &gt;= 345 AND Age &lt;= 346, Age &gt;= 346 AND Age &lt;= 347, Age &gt;= 347 AND Age &lt;= 348, Age &gt;= 348 AND Age &lt;= 349, Age &gt;= 349 AND Age &lt;= 350, Age &gt;= 350 AND Age &lt;= 351, Age &gt;= 351 AND Age &lt;= 352, Age &gt;= 352 AND Age &lt;= 353, Age &gt;= 353 AND Age &lt;= 354, Age &gt;= 354 AND Age &lt;= 355, Age &gt;= 355 AND Age &lt;= 356, Age &gt;= 356 AND Age &lt;= 357, Age &gt;= 357 AND Age &lt;= 358, Age &gt;= 358 AND Age &lt;= 359, Age &gt;= 359 AND Age &lt;= 360, Age &gt;= 360 AND Age &lt;= 361, Age &gt;= 361 AND Age &lt;= 362, Age &gt;= 362 AND Age &lt;= 363, Age &gt;= 363 AND Age &lt;= 364, Age &gt;= 364 AND Age &lt;= 365, Age &gt;= 365 AND Age &lt;= 366, Age &gt;= 366 AND Age &lt;= 367, Age &gt;= 367 AND Age &lt;= 368, Age &gt;= 368 AND Age &lt;= 369, Age &gt;= 369 AND Age &lt;= 370, Age &gt;= 370 AND Age &lt;= 371, Age &gt;= 371 AND Age &lt;= 372, Age &gt;= 372 AND Age &lt;= 373, Age &gt;= 373 AND Age &lt;= 374, Age &gt;= 374 AND Age &lt;= 375, Age &gt;= 375 AND Age &lt;= 376, Age &gt;= 376 AND Age &lt;= 377, Age &gt;= 377 AND Age &lt;= 378, Age &gt;= 378 AND Age &lt;= 379, Age &gt;= 379 AND Age &lt;= 380, Age &gt;= 380 AND Age &lt;= 381, Age &gt;= 381 AND Age &lt;= 382, Age &gt;= 382 AND Age &lt;= 383, Age &gt;= 383 AND Age &lt;= 384, Age &gt;= 384 AND Age &lt;= 385, Age &gt;= 385 AND Age &lt;= 386, Age &gt;= 386 AND Age &lt;= 387, Age &gt;= 387 AND Age &lt;= 388, Age &gt;= 388 AND Age &lt;= 389, Age &gt;= 389 AND Age &lt;= 390, Age &gt;= 390 AND Age &lt;= 391, Age &gt;= 391 AND Age &lt;= 392, Age &gt;= 392 AND Age &lt;= 393, Age &gt;= 393 AND Age &lt;= 394, Age &gt;= 394 AND Age &lt;= 395, Age &gt;= 395 AND Age &lt;= 396, Age &gt;= 396 AND Age &lt;= 397, Age &gt;= 397 AND Age &lt;= 398, Age &gt;= 398 AND Age &lt;= 399, Age &gt;= 399 AND Age &lt;= 400, Age &gt;= 400 AND Age &lt;= 401, Age &gt;= 401 AND Age &lt;= 402, Age &gt;= 402 AND Age &lt;= 403, Age &gt;= 403 AND Age &lt;= 404, Age &gt;= 404 AND Age &lt;= 405, Age &gt;= 405 AND Age &lt;= 406, Age &gt;= 406 AND Age &lt;= 407, Age &gt;= 407 AND Age &lt;= 408, Age &gt;= 408 AND Age &lt;= 409, Age &gt;= 409 AND Age &lt;= 410, Age &gt;= 410 AND Age &lt;= 411, Age &gt;= 411 AND Age &lt;= 412, Age &gt;= 412 AND Age &lt;= 413, Age &gt;= 413 AND Age &lt;= 414, Age &gt;= 414 AND Age &lt;= 415, Age &gt;= 415 AND Age &lt;= 416, Age &gt;= 416 AND Age &lt;= 417, Age &gt;= 417 AND Age &lt;= 418, Age &gt;= 418 AND Age &lt;= 419, Age &gt;= 419 AND Age &lt;= 420, Age &gt;= 420 AND Age &lt;= 421, Age &gt;= 421 AND Age &lt;= 422, Age &gt;= 422 AND Age &lt;= 423, Age &gt;= 423 AND Age &lt;= 424, Age &gt;= 424 AND Age &lt;= 425, Age &gt;= 425 AND Age &lt;= 426, Age &gt;= 426 AND Age &lt;= 427, Age &gt;= 427 AND Age &lt;= 428, Age &gt;= 428 AND Age &lt;= 429, Age &gt;= 429 AND Age &lt;= 430, Age &gt;= 430 AND Age &lt;= 431, Age &gt;= 431 AND Age &lt;= 432, Age &gt;= 432 AND Age &lt;= 433, Age &gt;= 433 AND Age &lt;= 434, Age &gt;= 434 AND Age &lt;= 435, Age &gt;= 435 AND Age &lt;= 436, Age &gt;= 436 AND Age &lt;= 437, Age &gt;= 437 AND Age &lt;= 438, Age &gt;= 438 AND Age &lt;= 439, Age &gt;= 439 AND Age &lt;= 440, Age &gt;= 440 AND Age &lt;= 441, Age &gt;= 441 AND Age &lt;= 442, Age &gt;= 442 AND Age &lt;= 443, Age &gt;= 443 AND Age &lt;= 444, Age &gt;= 444 AND Age &lt;= 445, Age &gt;= 445 AND Age &lt;= 446, Age &gt;= 446 AND Age &lt;= 447, Age &gt;= 447 AND Age &lt;= 448, Age &gt;= 448 AND Age &lt;= 449, Age &gt;= 449 AND Age &lt;= 450, Age &gt;= 450 AND Age &lt;= 451, Age &gt;= 451 AND Age &lt;= 452, Age &gt;= 452 AND Age &lt;= 453, Age &gt;= 453 AND Age &lt;= 454, Age &gt;= 454 AND Age &lt;= 455, Age &gt;= 455 AND Age &lt;= 456, Age &gt;= 456 AND Age &lt;= 457, Age &gt;= 457 AND Age &lt;= 458, Age &gt;= 458 AND Age &lt;= 459, Age &gt;= 459 AND Age &lt;= 460, Age &gt;= 460 AND Age &lt;= 461, Age &gt;= 461 AND Age &lt;= 462, Age &gt;= 462 AND Age &lt;= 463, Age &gt;= 463 AND Age &lt;= 464, Age &gt;= 464 AND Age &lt;= 465, Age &gt;= 465 AND Age &lt;= 466, Age &gt;= 466 AND Age &lt;= 467, Age &gt;= 467 AND Age &lt;= 468, Age &gt;= 468 AND Age &lt;= 469, Age &gt;= 469 AND Age &lt;= 470, Age &gt;= 470 AND Age &lt;= 471, Age &gt;= 471 AND Age &lt;= 472, Age &gt;= 472 AND Age &lt;= 473, Age &gt;= 473 AND Age &lt;= 474, Age &gt;= 474 AND Age &lt;= 475, Age &gt;= 475 AND Age &lt;= 476, Age &gt;= 476 AND Age &lt;= 477, Age &gt;= 477 AND Age &lt;= 478, Age &gt;= 478 AND Age &lt;= 479, Age &gt;= 479 AND Age &lt;= 480, Age &gt;= 480 AND Age &lt;= 481, Age &gt;= 481 AND Age &lt;= 482, Age &gt;= 482 AND Age &lt;= 483, Age &gt;= 483 AND Age &lt;= 484, Age &gt;= 484 AND Age &lt;= 485, Age &gt;= 485 AND Age &lt;= 486, Age &gt;= 486 AND Age &lt;= 487, Age &gt;= 487 AND Age &lt;= 488, Age &gt;= 488 AND Age &lt;= 489, Age &gt;= 489 AND Age &lt;= 490, Age &gt;= 490 AND Age &lt;= 491, Age &gt;= 491 AND Age &lt;= 492, Age &gt;= 492 AND Age &lt;= 493, Age &gt;= 493 AND Age &lt;= 494, Age &gt;= 494 AND Age &lt;= 495, Age &gt;= 495 AND Age &lt;= 496, Age &gt;= 496 AND Age &lt;= 497, Age &gt;= 497 AND Age &lt;= 498, Age &gt;= 498 AND Age &lt;= 499, Age &gt;= 499 AND Age &lt;= 500, Age &gt;= 500 AND Age &lt;= 501, Age &gt;= 501 AND Age &lt;= 502, Age &gt;= 502 AND Age &lt;= 503, Age &gt;= 503 AND Age &lt;= 504, Age &gt;= 504 AND Age &lt;= 505, Age &gt;= 505 AND Age &lt;= 506, Age &gt;= 506 AND Age &lt;= 507, Age &gt;= 507 AND Age &lt;= 508, Age &gt;= 508 AND Age &lt;= 509, Age &gt;= 509 AND Age &lt;= 510, Age &gt;= 510 AND Age &lt;= 511, Age &gt;= 511 AND Age &lt;= 512, Age &gt;= 512 AND Age &lt;= 513, Age &gt;= 513 AND Age &lt;= 514, Age &gt;= 514 AND Age &lt;= 515, Age &gt;= 515 AND Age &lt;= 516, Age &gt;= 516 AND Age &lt;= 517, Age &gt;= 517 AND Age &lt;= 518, Age &gt;= 518 AND Age &lt;= 519, Age &gt;= 519 AND Age &lt;= 520, Age &gt;= 520 AND Age &lt;= 521, Age &gt;= 521 AND Age &lt;= 522, Age &gt;= 522 AND Age &lt;= 523, Age &gt;= 523 AND Age &lt;= 524, Age &gt;= 524 AND Age &lt;= 525, Age &gt;= 525 AND Age &lt;= 526, Age &gt;= 526 AND Age &lt;= 527, Age &gt;= 527 AND Age &lt;= 528, Age &gt;= 528 AND Age &lt;= 529, Age &gt;= 529 AND Age &lt;= 530, Age &gt;= 530 AND Age &lt;= 531, Age &gt;= 531 AND Age &lt;= 532, Age &gt;= 532 AND Age &lt;= 533, Age &gt;= 533 AND Age &lt;= 534, Age &gt;= 534 AND Age &lt;= 535, Age &gt;= 535 AND Age &lt;= 536, Age &gt;= 536 AND Age &lt;= 537, Age &gt;= 537 AND Age &lt;= 538, Age &gt;= 538 AND Age &lt;= 539, Age &gt;= 539 AND Age &lt;= 540, Age &gt;= 540 AND Age &lt;= 541, Age &gt;= 541 AND Age &lt;= 542, Age &gt;= 542 AND Age &lt;= 543, Age &gt;= 543 AND Age &lt;= 544, Age &gt;= 544 AND Age &lt;= 545, Age &gt;= 545 AND Age &lt;= 546, Age &gt;= 546 AND Age &lt;= 547, Age &gt;= 547 AND Age &lt;= 548, Age &gt;= 548 AND Age &lt;= 549, Age &gt;= 549 AND Age &lt;= 550, Age &gt;= 550 AND Age &lt;= 551, Age &gt;= 551 AND Age &lt;= 552, Age &gt;= 552 AND Age &lt;= 553, Age &gt;= 553 AND Age &lt;= 554, Age &gt;= 554 AND Age &lt;= 555, Age &gt;= 555 AND Age &lt;= 556, Age &gt;= 556 AND Age &lt;= 557, Age &gt;= 557 AND Age &lt;= 558, Age &gt;= 558 AND Age &lt;= 559, Age &gt;= 559 AND Age &lt;= 560, Age &gt;= 560 AND Age &lt;= 561, Age &gt;= 561 AND Age &lt;= 562, Age &gt;= 562 AND Age &lt;= 563, Age &gt;= 563 AND Age &lt;= 564, Age &gt;= 564 AND Age &lt;= 565, Age &gt;= 565 AND Age &lt;= 566, Age &gt;= 566 AND Age &lt;= 567, Age &gt;= 567 AND Age &lt;= 568, Age &gt;= 568 AND Age &lt;= 569, Age &gt;= 569 AND Age &lt;= 570, Age &gt;= 570 AND Age &lt;= 571, Age &gt;= 571 AND Age &lt;= 572, Age &gt;= 572 AND Age &lt;= 573, Age &gt;= 573 AND Age &lt;= 574, Age &gt;= 574 AND Age &lt;= 575, Age &gt;= 575 AND Age &lt;= 576, Age &gt;= 576 AND Age &lt;= 577, Age &gt;= 577 AND Age &lt;= 578, Age &gt;= 578 AND Age &lt;= 579, Age &gt;= 579 AND Age &lt;= 580, Age &gt;= 580 AND Age &lt;= 581, Age &gt;= 581 AND Age &lt;= 582, Age &gt;= 582 AND Age &lt;= 583, Age &gt;= 583 AND Age &lt;= 584, Age &gt;= 584 AND Age &lt;= 585, Age &gt;= 585 AND Age &lt;= 586, Age &gt;= 586 AND Age &lt;= 587, Age &gt;= 587 AND Age &lt;= 588, Age &gt;= 588 AND Age &lt;= 589, Age &gt;= 589 AND Age &lt;= 590, Age &gt;= 590 AND Age &lt;= 591, Age &gt;= 591 AND Age &lt;= 592, Age &gt;= 592 AND Age &lt;= 593, Age &gt;= 593 AND Age &lt;= 594, Age &gt;= 594 AND Age &lt;= 595, Age &gt;= 595 AND Age &lt;= 596, Age &gt;= 596 AND Age &lt;= 597, Age &gt;= 597 AND Age &lt;= 598, Age &gt;= 598 AND Age &lt;= 599, Age &gt;= 599 AND Age &lt;= 600, Age &gt;= 600 AND Age &lt;= 601, Age &gt;= 601 AND Age &lt;= 602, Age &gt;= 602 AND Age &lt;= 603, Age &gt;= 603 AND Age &lt;= 604, Age &gt;= 604 AND Age &lt;= 605, Age &gt;= 605 AND Age &lt;= 606, Age &gt;= 606 AND Age &lt;= 607, Age &gt;= 607 AND Age &lt;= 608, Age &gt;= 608 AND Age &lt;= 609, Age &gt;= 609 AND Age &lt;= 610, Age &gt;= 610 AND Age &lt;= 611, Age &gt;= 611 AND Age &lt;= 612, Age &gt;= 612 AND Age &lt;= 613, Age &gt;= 613 AND Age &lt;= 614, Age &gt;= 614 AND Age &lt;= 615, Age &gt;= 615 AND Age &lt;= 616, Age &gt;= 616 AND Age &lt;= 617, Age &gt;= 617 AND Age &lt;= 618, Age &gt;= 618 AND Age &lt;= 619, Age &gt;= 619 AND Age &lt;= 620, Age &gt;= 620 AND Age &lt;= 621, Age &gt;= 621 AND Age &lt;= 622, Age &gt;= 622 AND Age &lt;= 623, Age &gt;= 623 AND Age &lt;= 624, Age &gt;= 624 AND Age &lt;= 625, Age &gt;= 625 AND Age &lt;= 626, Age &gt;= 626 AND Age &lt;= 627, Age &gt;= 627 AND Age &lt;= 628, Age &gt;= 628 AND Age &lt;= 629, Age &gt;= 629 AND Age &lt;= 630, Age &gt;= 630 AND Age &lt;= 631, Age &gt;= 631 AND Age &lt;= 632, Age &gt;= 632 AND Age &lt;= 633, Age &gt;= 633 AND Age &lt;= 634, Age &gt;= 634 AND Age &lt;= 635, Age &gt;= 635 AND Age &lt;= 636, Age &gt;= 636 AND Age &lt;= 637, Age &gt;= 637 AND Age &lt;= 638, Age &gt;= 638 AND Age &lt;= 639, Age &gt;= 639 AND Age &lt;= 640, Age &gt;= 640 AND Age &lt;= 641, Age &gt;= 641 AND Age &lt;= 642, Age &gt;= 642 AND Age &lt;= 643, Age &gt;= 643 AND Age &lt;= 644, Age &gt;= 644 AND Age &lt;= 645, Age &gt;= 645 AND Age &lt;= 646, Age &gt;= 646 AND Age &lt;= 647, Age &gt;= 647 AND Age &lt;= 648, Age &gt;= 648 AND Age &lt;= 649, Age &gt;= 649 AND Age &lt;= 650, Age &gt;= 650 AND Age &lt;= 651, Age &gt;= 651 AND Age &lt;= 652, Age &gt;= 652 AND Age &lt;= 653, Age &gt;= 653 AND Age &lt;= 654, Age &gt;= 654 AND Age &lt;= 655, Age &gt;= 655 AND Age &lt;= 656, Age &gt;= 656 AND Age &lt;= 657, Age &gt;= 657 AND Age &lt;= 658, Age &gt;= 658 AND Age &lt;= 659, Age &gt;= 659 AND Age &lt;= 660, Age &gt;= 660 AND Age &lt;= 661, Age &gt;= 661 AND Age &lt;= 662, Age &gt;= 662 AND Age &lt;= 663, Age &gt;= 663 AND Age &lt;= 664, Age &gt;= 664 AND Age &lt;= 665, Age &gt;= 665 AND Age &lt;= 666, Age &gt;= 666 AND Age &lt;= 667, Age &gt;= 667 AND Age &lt;= 668, Age &gt;= 668 AND Age &lt;= 669, Age &gt;= 669 AND Age &lt;= 670, Age &gt;= 670 AND Age &lt;= 671, Age &gt;= 671 AND Age &lt;= 672, Age &gt;= 672 AND Age &lt;= 673, Age &gt;= 673 AND Age &lt;= 674, Age &gt;= 674 AND Age &lt;= 675, Age &gt;= 675 AND Age &lt;= 676, Age &gt;= 676 AND Age &lt;= 677, Age &gt;= 677 AND Age &lt;= 678, Age &gt;= 678 AND Age &lt;= 679, Age &gt;= 679 AND Age &lt;= 680, Age &gt;= 680 AND Age &lt;= 681, Age &gt;= 681 AND Age &lt;= 682, Age &gt;= 682 AND Age &lt;= 683, Age &gt;= 683 AND Age &lt;= 684, Age &gt;= 684 AND Age &lt;= 685, Age &gt;= 685 AND Age &lt;= 686, Age &gt;= 686 AND Age &lt;= 687, Age &gt;= 687 AND Age &lt;= 688, Age &gt;= 688 AND Age &lt;= 689, Age &gt;= 689 AND Age &lt;= 690, Age &gt;= 690 AND Age &lt;= 691, Age &gt;= 691 AND Age &lt;= 692, Age &gt;= 692 AND Age &lt;= 693, Age &gt;= 693 AND Age &lt;= 694, Age &gt;= 694 AND Age &lt;= 695, Age &gt;= 695 AND Age &lt;= 696, Age &gt;= 696 AND Age &lt;= 697, Age &gt;= 697 AND Age &lt;= 698, Age &gt;= 698 AND Age &lt;= 699, Age &gt;= 699 AND Age &lt;= 700, Age &gt;= 700 AND Age &lt;= 701, Age &gt;= 701 AND Age &lt;= 702, Age &gt;= 702 AND Age &lt;= 703, Age &gt;= 703 AND Age &lt;= 704, Age &gt;= 704 AND Age &lt;= 705, Age &gt;= 705 AND Age &lt;= 706, Age &gt;= 706 AND Age &lt;= 707, Age &gt;= 707 AND Age &lt;= 708, Age &gt;= 708 AND Age &lt;= 709, Age &gt;= 709 AND Age &lt;= 710, Age &gt;= 710 AND Age &lt;= 711, Age &gt;= 711 AND Age &lt;= 712, Age &gt;= 712 AND Age &lt;= 713, Age &gt;= 713 AND Age &lt;= 714, Age &gt;= 714 AND Age &lt;= 715, Age &gt;= 715 AND Age &lt;= 716, Age &gt;= 716 AND Age &lt;= 717, Age &gt;= 717 AND Age &lt;= 718, Age &gt;= 718 AND Age &lt;= 719, Age &gt;= 719 AND Age &lt;= 720, Age &gt;= 720 AND Age &lt;= 721, Age &gt;= 721 AND Age &lt;= 722, Age &gt;= 722 AND Age &lt;= 723, Age &gt;= 723 AND Age &lt;= 724, Age &gt;= 724 AND Age &lt;= 725, Age &gt;= 725 AND Age &lt;= 726, Age &gt;= 726 AND Age &lt;= 727, Age &gt;= 727 AND Age &lt;= 728, Age &gt;= 728 AND Age &lt;= 729, Age &gt;= 729 AND Age &lt;= 730, Age &gt;= 730 AND Age &lt;= 731, Age &gt;= 731 AND Age &lt;= 732, Age &gt;= 732 AND Age &lt;= 733, Age &gt;= 733 AND Age &lt;= 734, Age &gt;= 734 AND Age &lt;= 735, Age &gt;= 735 AND Age &lt;= 736, Age &gt;= 736 AND Age &lt;= 737, Age &gt;= 737 AND Age &lt;= 738, Age &gt;= 738 AND Age &lt;= 739, Age &gt;= 739 AND Age &lt;= 740, Age &gt;= 740 AND Age &lt;= 741, Age &gt;= 741 AND Age &lt;= 742, Age &gt;= 742 AND Age &lt;= 743, Age &gt;= 743 AND Age &lt;= 744, Age &gt;= 744 AND Age &lt;= 745, Age &gt;= 745 AND Age &lt;= 746, Age &gt;= 746 AND Age &lt;= 747, Age &gt;= 747 AND Age &lt;= 748, Age &gt;= 748 AND Age &lt;= 749, Age &gt;= 749 AND Age &lt;= 750, Age &gt;= 750 AND Age &lt;= 751, Age &gt;= 751 AND Age &lt;= 752, Age &gt;= 752 AND Age &lt;= 753, Age &gt;= 753 AND Age &lt;= 754, Age &gt;= 754 AND Age &lt;= 755, Age &gt;= 755 AND Age &lt;= 756, Age &gt;= 756 AND Age &lt;= 757, Age &gt;= 757 AND Age &lt;= 758, Age &gt;= 758 AND Age &lt;= 759, Age &gt;= 759 AND Age &lt;= 760, Age &gt;= 760 AND Age &lt;= 761, Age &gt;= 761 AND Age &lt;= 762, Age &gt;= 762 AND Age &lt;= 763, Age &gt;= 763 AND Age &lt;= 764, Age &gt;= 764 AND Age &lt;= 765, Age &gt;= 765 AND Age &lt;= 766, Age &gt;= 766 AND Age &lt;= 767, Age &gt;= 767 AND Age &lt;= 768, Age &gt;= 768 AND Age &lt;= 769, Age &gt;= 769 AND Age &lt;= 770, Age &gt;= 770 AND Age &lt;= 771, Age &gt;= 771 AND Age &lt;= 772, Age &gt;= 772 AND Age &lt;= 773, Age &gt;= 773 AND Age &lt;= 774, Age &gt;= 774 AND Age &lt;= 775, Age &gt;= 775 AND Age &lt;= 776, Age &gt;= 776 AND Age &lt;= 777, Age &gt;= 777 AND Age &lt;= 778, Age &gt;= 778 AND Age &lt;= 779, Age &gt;= 779 AND Age &lt;= 780, Age &gt;= 780 AND Age &lt;= 781, Age &gt;= 781 AND Age &lt;= 782, Age &gt;= 782 AND Age &lt;= 783, Age &gt;= 783 AND Age &lt;= 784, Age &gt;= 784 AND Age &lt;= 785, Age &gt;= 785 AND Age &lt;= 786, Age &gt;= 786 AND Age &lt;= 787, Age &gt;= 787 AND Age &lt;= 788, Age &gt;= 788 AND Age &lt;= 789, Age &gt;= 789 AND Age &lt;= 790, Age &gt;= 790 AND Age &lt;= 791, Age &gt;= 791 AND Age &lt;= 792, Age &gt;= 792 AND Age &lt;= 793, Age &gt;= 793 AND Age &lt;= 794, Age &gt;= 794 AND Age &lt;= 795, Age &gt;= 795 AND Age &lt;= 796, Age &gt;= 796 AND Age &lt;= 797, Age &gt;= 797 AND Age &lt;= 798, Age &gt;= 798 AND Age &lt;= 799, Age &gt;= 799 AND Age &lt;= 800, Age &gt;= 800 AND Age &lt;= 801, Age &gt;= 801 AND Age &lt;= 802, Age &gt;= 802 AND Age &lt;= 803, Age &gt;= 803 AND Age &lt;= 804, Age &gt;= 804 AND Age &lt;= 805, Age &gt;= 805 AND Age &lt;= 806, Age &gt;= 806 AND Age &lt;= 807, Age &gt;= 807 AND Age &lt;= 808, Age &gt;= 808 AND Age &lt;= 809, Age &gt;= 809 AND Age &lt;= 810, Age &gt;= 810 AND Age &lt;= 811, Age &gt;= 811 AND Age &lt;= 812, Age &gt;= 812 AND Age &lt;= 813, Age &gt;= 813 AND Age &lt;= 814, Age &gt;= 814 AND Age &lt;= 815, Age &gt;= 815 AND Age &lt;= 816, Age &gt;= 816 AND Age &lt;= 817, Age &gt;= 817 AND Age &lt;= 818, Age &gt;= 818 AND Age &lt;= 819, Age &gt;= 819 AND Age &lt;= 820, Age &gt;= 820 AND Age &lt;= 821, Age &gt;= 821 AND Age &lt;= 822, Age &gt;= 822 AND Age &lt;= 823, Age &gt;= 823 AND Age &lt;= 824, Age &gt;= 824 AND Age &lt;= 825, Age &gt;= 825 AND Age &lt;= 826, Age &gt;= 826 AND Age &lt;= 827, Age &gt;= 827 AND Age &lt;= 828, Age &gt;= 828 AND Age &lt;= 829, Age &gt;= 829 AND Age &lt;= 830, Age &gt;= 830 AND Age &lt;= 831, Age &gt;= 831 AND Age &lt;= 832, Age &gt;= 832 AND Age &lt;= 833, Age &gt;= 833 AND Age &lt;= 834, Age &gt;= 834 AND Age &lt;= 835, Age &gt;= 835 AND Age &lt;= 836, Age &gt;= 836 AND Age &lt;= 837, Age &gt;= 837 AND Age &lt;= 838, Age &gt;= 838 AND Age &lt;= 839, Age &gt;= 839 AND Age &lt;= 840, Age &gt;= 840 AND Age &lt;= 841, Age &gt;= 841 AND Age &lt;= 842, Age &gt;= 842 AND Age &lt;= 843, Age &gt;= 843 AND Age &lt;= 844, Age &gt;= 844 AND Age &lt;= 845, Age &gt;= 845 AND Age &lt;= 846, Age &gt;= 846 AND Age &lt;= 847, Age &gt;= 847 AND Age &lt;= 848, Age &gt;= 848 AND Age &lt;= 849, Age &gt;= 849 AND Age &lt;= 850, Age &gt;= 850 AND Age &lt;= 851, Age &gt;= 851 AND Age &lt;= 852, Age &gt;= 852 AND Age &lt;= 853, Age &gt;= 853 AND Age &lt;= 854, Age &gt;= 854 AND Age &lt;= 855, Age &gt;= 855 AND Age &lt;= 856, Age &gt;= 856 AND Age &lt;= 857, Age &gt;= 857 AND Age &lt;= 858, Age &gt;= 858 AND Age &lt;= 859, Age &gt;= 859 AND Age &lt;= 860, Age &gt;= 860 AND Age &lt;= 861, Age &gt;= 861 AND Age &lt;= 862, Age &gt;= 862 AND Age &lt;= 863, Age &gt;= 863 AND Age &lt;= 864, Age &gt;= 864 AND Age &lt;= 865, Age &gt;= 865 AND Age &lt;= 866, Age &gt;= 866 AND Age &lt;= 867, Age &gt;= 867 AND Age &lt;= 868, Age &gt;= 868 AND Age &lt;= 869, Age &gt;= 869 AND Age &lt;= 870, Age &gt;= 870 AND Age &lt;= 871, Age &gt;= 871 AND Age &lt;= 872, Age &gt;= 872 AND Age &lt;= 873, Age &gt;= 873 AND Age &lt;= 874, Age &gt;= 874 AND Age &lt;= 875, Age &gt;= 875 AND Age &lt;= 876, Age &gt;= 876 AND Age &lt;= 877, Age &gt;= 877 AND Age &lt;= 878, Age &gt;= 878 AND Age &lt;= 879, Age &gt;= 879 AND Age &lt;= 880, Age &gt;= 880 AND Age &lt;= 881, Age &gt;= 881 AND Age &lt;= 882, Age &gt;= 882 AND Age &lt;= 883, Age &gt;= 883 AND Age &lt;= 884, Age &gt;= 884 AND Age &lt;= 885, Age &gt;= 885 AND Age &lt;= 886, Age &gt;= 886 AND Age &lt;= 887, Age &gt;= 887 AND Age &lt;= 888, Age &gt;= 888 AND Age &lt;= 889, Age &gt;= 889 AND Age &lt;= 890, Age &gt;= 890 AND Age &lt;= 891, Age &gt;= 891 AND Age &lt;= 892, Age &gt;= 892 AND Age &lt;= 893, Age &gt;= 893 AND Age &lt;= 894, Age &gt;= 894 AND Age &lt;= 895, Age &gt;= 895 AND Age &lt;= 896, Age &gt;= 896 AND Age &lt;= 897, Age &gt;= 897 AND Age &lt;= 898, Age &gt;= 898 AND Age &lt;= 899, Age &gt;= 899 AND Age &lt;= 900, Age &gt;= 900 AND Age &lt;= 901, Age &gt;= 901 AND Age &lt;= 902, Age &gt;= 902 AND Age &lt;= 903, Age &gt;= 903 AND Age &lt;= 904, Age &gt;= 904 AND Age &lt;= 905, Age &gt;= 905 AND Age &lt;= 906, Age &gt;= 906 AND Age &lt;= 907, Age &gt;= 907 AND Age &lt;= 908, Age &gt;= 908 AND Age &lt;= 909, Age &gt;= 909 AND Age &lt;= 910, Age &gt;= 910 AND Age &lt;= 911, Age &gt;= 911 AND Age &lt;= 912, Age &gt;= 912 AND Age &lt;= 913, Age &gt;= 913 AND Age &lt;= 914, Age &gt;= 914 AND Age &lt;= 915, Age &gt;= 915 AND Age &lt;= 916, Age &gt;= 916 AND Age &lt;= 917, Age &gt;= 917 AND Age &lt;= 918, Age &gt;= 918 AND Age &lt;= 919, Age &gt;= 919 AND Age &lt;= 920, Age &gt;= 920 AND Age &lt;= 921, Age &gt;= 921 AND Age &lt;= 922, Age &gt;= 922 AND Age &lt;= 923, Age &gt;= 923 AND Age &lt;= 924, Age &gt;= 924 AND Age &lt;= 925, Age &gt;= 925 AND Age &lt;= 926, Age &gt;= 926 AND Age &lt;= 927, Age &gt;= 927 AND Age &lt;= 928, Age &gt;= 928 AND Age &lt;= 929, Age &gt;= 929 AND Age &lt;= 930, Age &gt;= 930 AND Age &lt;= 931, Age &gt;= 931 AND Age &lt;= 932, Age &gt;= 932 AND Age &lt;= 933, Age &gt;= 933 AND Age &lt;= 934, Age &gt;= 934 AND Age &lt;= 935, Age &gt;= 935 AND Age &lt;= 936, Age &gt;= 936 AND Age &lt;= 937, Age &gt;= 937 AND Age &lt;= 938, Age &gt;= 938 AND Age &lt;= 939, Age &gt;= 939 AND Age &lt;= 940, Age &gt;= 940 AND Age &lt;= 941, Age &gt;= 941 AND Age &lt;= 942, Age &gt;= 942 AND Age &lt;= 943, Age &gt;= 943 AND Age &lt;= 944, Age &gt;= 944 AND Age &lt;= 945, Age &gt;= 945 AND Age &lt;= 946, Age &gt;= 946 AND Age &lt;= 947, Age &gt;= 947 AND Age &lt;= 948, Age &gt;= 948 AND Age &lt;= 949, Age &gt;= 949 AND Age &lt;= 950, Age &gt;= 950 AND Age &lt;= 951, Age &gt;= 951 AND Age &lt;= 952, Age &gt;= 952 AND Age &lt;= 953, Age &gt;= 953 AND Age &lt;= 954, Age &gt;= 954 AND Age &lt;= 955, Age &gt;= 955 AND Age &lt;= 956, Age &gt;= 956 AND Age &lt;= 957, Age &gt;= 957 AND Age &lt;= 958, Age &gt;= 958 AND Age &lt;= 959, Age &gt;= 959 AND Age &lt;= 960, Age &gt;= 960 AND Age &lt;= 961, Age &gt;= 961 AND Age &lt;= 962, Age &gt;= 962 AND Age &lt;= 963, Age &gt;= 963 AND Age &lt;= 964, Age &gt;= 964 AND Age &lt;= 965, Age &gt;= 965 AND Age &lt;= 966, Age &gt;= 966 AND Age &lt;= 967, Age &gt;= 967 AND Age &lt;= 968, Age &gt;= 968 AND Age &lt;= 969, Age &gt;= 969 AND Age &lt;= 970, Age &gt;= 970 AND Age &lt;= 971, Age &gt;= 971 AND Age &lt;= 972, Age &gt;= 972 AND Age &lt;= 973, Age &gt;= 973 AND Age &lt;= 974, Age &gt;= 974 AND Age &lt;= 975, Age &gt;= 975 AND Age &lt;= 976, Age &gt;= 976 AND Age &lt;= 977, Age &gt;= 977 AND Age &lt;= 978, Age &gt;= 978 AND Age &lt;= 979, Age &gt;= 979 AND Age &lt;= 980, Age &gt;= 980 AND Age &lt;= 981, Age &gt;= 981 AND Age &lt;= 982, Age &gt;= 982 AND Age &lt;= 983, Age &gt;= 983 AND Age &lt;= 984, Age &gt;= 984 AND Age &lt;= 985, Age &gt;= 985 AND Age &lt;= 986, Age &gt;= 986 AND Age &lt;= 987, Age &gt;= 987 AND Age &lt;= 988, Age &gt;= 988 AND Age &lt;= 989, Age &gt;= 989 AND Age &lt;= 990, Age &gt;= 990 AND Age &lt;= 991, Age &gt;= 991 AND Age &lt;= 992, Age &gt;= 992 AND Age &lt;= 993, Age &gt;= 993 AND Age &lt;= 994, Age &gt;= 994 AND Age &lt;= 995, Age &gt;= 995 AND Age &lt;= 996, Age &gt;= 996 AND Age &lt;= 997, Age &gt;= 997 AND Age &lt;= 998, Age &gt;= 998 AND Age &lt;= 999, Age &gt;= 999 AND Age &lt;= 1000, Age &gt;= 1000 AND Age &lt;= 1001, Age &gt;= 1001 AND Age &lt;= 1002, Age &gt;= 1002 AND Age &lt;= 1003, Age &gt;= 1003 AND Age &lt;= 1004, Age &gt;= 1004 AND Age &lt;= 1005, Age &gt;= 1005 AND Age &lt;= 1006, Age &gt;= 1006 AND Age &lt;= 1007, Age &gt;= 1007 AND Age &lt;= 1008, Age &gt;= 1008 AND Age &lt;= 1009, Age &gt;= 1009 AND Age &lt;= 1010, Age &gt;= 1010 AND Age &lt;= 1011, Age &gt;= 1011 AND Age &lt;= 1012, Age &gt;= 1012 AND Age &lt;= 1013, Age &gt;= 1013 AND Age &lt;= 1014, Age &gt;= 1014 AND Age &lt;= 1015, Age &gt;= 1015 AND Age &lt;= 1016, Age &gt;= 1016 AND Age &lt;= 1017, Age &gt;= 1017 AND Age &lt;= 1018, Age &gt;= 1018 AND Age &lt;= 1019, Age &gt;= 1019 AND Age &lt;= 1020, Age &gt;= 1020 AND Age &lt;= 1021, Age &gt;= 1021 AND Age &lt;= 1022, Age &gt;= 1022 AND Age &lt;= 1023, Age &gt;= 1023 AND Age &lt;= 1024, Age &gt;= 1024 AND Age &lt;= 1025, Age &gt;= 1025 AND Age &lt;= 1026, Age &gt;= 1026 AND Age &lt;= 1027, Age &gt;= 1027 AND Age &lt;= 1028, Age &gt;= 1028 AND Age &lt;= 1029, Age &gt;= 1029 AND Age &lt;= 1030, Age &gt;= 1030 AND Age &lt;= 1031, Age &gt;= 1031 AND Age &lt;= 1032, Age &gt;= 1032 AND Age &lt;= 1033, Age &gt;= 1033 AND Age &lt;= 1034, Age &gt;= 1034 AND Age &lt;= 1035, Age &gt;= 1035 AND Age &lt;= 1036, Age &gt;= 1036 AND Age &lt;= 1037, Age &gt;= 1037 AND Age &lt;= 1038, Age &gt;= 1038 AND Age &lt;= 1039, Age &gt;= 1039 AND Age &lt;= 1040, Age &gt;= 1040 AND Age &lt;= 1041, Age &gt;= 1041 AND Age &lt;= 1042, Age &gt;= 1042 AND Age &lt;= 1043, Age &gt;= 1043 AND Age &lt;= 1044, Age &gt;= 1044 AND Age &lt;= 1045, Age &gt;= 1045 AND Age &lt;= 1046, Age &gt;= 1046 AND Age &lt;= 1047, Age &gt;= 1047 AND Age &lt;= 1048, Age &gt;= 1048 AND Age &lt;= 1049, Age &gt;= 1049 AND Age &lt;= 1050, Age &gt;= 1050 AND Age &lt;= 1051, Age &gt;= 1051 AND Age &lt;= 1052, Age &gt;= 1052 AND Age &lt;= 1053, Age &gt;= 1053 AND Age &lt;= 1054, Age &gt;= 1054 AND Age &lt;= 1055, Age &gt;= 1055 AND Age &lt;= 1056, Age &gt;= 1056 AND Age &lt;= 1057, Age &gt;= 1057 AND Age &lt;= 1058, Age &gt;= 1058 AND Age &lt;= 1059, Age &gt;= 1059 AND Age &lt;= 1060, Age &gt;= 1060 AND Age &lt;= 1061, Age &gt;= 1061 AND Age &lt;= 1062, Age &gt;= 1062 AND Age &lt;= 1063, Age &gt;= 1063 AND Age &lt;= 1064, Age &gt;= 1064 AND Age &lt;= 1065, Age &gt;= 1065 AND Age &lt;= 1066, Age &gt;= 1066 AND Age &lt;= 1067, Age &gt;= 1067 AND Age &lt;= 1068, Age &gt;= 1068 AND Age &lt;= 1069, Age &gt;= 1069 AND Age &lt;= 1070, Age &gt;= 1070 AND Age &lt;= 1071, Age &gt;= 1071 AND Age &lt;= 1072, Age &gt;= 1072 AND Age &lt;= 1073, Age &gt;= 1073 AND Age &lt;= 1074, Age &gt;= 1074 AND Age &lt;= 1075, Age &gt;= 1075 AND Age &lt;= 1076, Age &gt;= 1076 AND Age &lt;= 1077, Age &gt;= 1077 AND Age &lt;= 1078, Age &gt;= 1078 AND Age &lt;= 1079, Age &gt;= 1079 AND Age &lt;= 1080, Age &gt;= 1080 AND Age &lt;= 1081, Age &gt;= 1081 AND Age &lt;= 1082, Age &gt;= 1082 AND Age &lt;= 1083, Age &gt;= 1083 AND Age &lt;= 1084, Age &gt;= 1084 AND Age &lt;= 1085, Age &gt;= 1085 AND Age &lt;= 1086, Age &gt;= 1086 AND Age &lt;= 1087, Age &gt;= 1087 AND Age &lt;= 1088, Age &gt;= 1088 AND Age &lt;= 1089, Age &gt;= 1089 AND Age &lt;= 1090, Age &gt;= 1090 AND Age &lt;= 1091, Age &gt;= 1091 AND Age &lt;= 1092, Age &gt;= 1092 AND Age &lt;= 1093, Age &gt;= 1093 AND Age &lt;= 1094, Age &gt;= 1094 AND Age &lt;= 1095, Age &gt;= 1095 AND Age &lt;= 1096, Age &gt;= 1096 AND Age &lt;= 1097, Age &gt;= 1097 AND Age &lt;= 1098, Age &gt;= 1098 AND Age &lt;= 1099, Age &gt;= 1099 AND Age &lt;= 1100, Age &gt;= 1100 AND Age &lt;= 1101, Age &gt;= 1101 AND Age &lt;= 1102, Age &gt;= 1102 AND Age &lt;= 1103, Age &gt;= 1103 AND Age &lt;= 1104, Age &gt;= 1104 AND Age &lt;= 1105, Age &gt;= 1105 AND Age &lt;= 1106, Age &gt;= 1106 AND Age &lt;= 1107, Age &gt;= 1107 AND Age &lt;= 1108, Age &gt;= 1108 AND Age &lt;= 1109, Age &gt;= 1109 AND Age &lt;= 1110, Age &gt;= 1110 AND Age &lt;= 1111, Age &gt;= 1111 AND Age &lt;= 1112, Age &gt;= 1112 AND Age &lt;= 1113, Age &gt;= 1113 AND Age &lt;= 1114, Age &gt;= 1114 AND Age &lt;= 1115, Age &gt;= 1115 AND Age &lt;= 1116, Age &gt;= 1116 AND Age &lt;= 1117, Age &gt;= 1117 AND Age &lt;= 1118, Age &gt;= 1118 AND Age &lt;= 1119, Age &gt;= 1119 AND Age &lt;= 1120, Age &gt;= 1120 AND Age &lt;= 1121, Age &gt;= 1121 AND Age &lt;= 1122, Age &gt;= 1122 AND Age &lt;= 1123, Age &gt;= 1123 AND Age &lt;= 1124, Age &gt;= 1124 AND Age &lt;= 1125, Age &gt;= 1125 AND Age &lt;= 1126, Age &gt;= 1126 AND Age &lt;= 1127, Age &gt;= 1127 AND Age &lt;= 1128, Age &gt;= 1128 AND Age &lt;= 1129, Age &gt;= 1129 AND Age &lt;= 1130, Age &gt;= 1130 AND Age &lt;= 1131, Age &gt;= 1131 AND Age &lt;= 1132, Age &gt;= 1132 AND Age &lt;= 1133, Age &gt;= 1133 AND Age &lt;= 1134, Age &gt;= 1134 AND Age &lt;= 1135, Age &gt;= 1135 AND Age &lt;= 1136, Age &gt;= 1136 AND Age &lt;= 1137, Age &gt;= 1137 AND Age &lt;= 1138, Age &gt;= 1138 AND Age &lt;= 1139, Age &gt;= 1139 AND Age &lt;= 1140, Age &gt;= 1140 AND Age &lt;= 1141, Age &gt;= 1141 AND Age &lt;= 1142, Age &gt;= 1142 AND Age &lt;= 1143, Age &gt;= 1143 AND Age &lt;= 1144, Age &gt;= 1144 AND Age &lt;= 1145, Age &gt;= 1145 AND Age &lt;= 1146, Age &gt;= 1146 AND Age &lt;= 1147, Age &gt;= 1147 AND Age &lt;= 1148, Age &gt;= 1148 AND Age &lt;= 1149, Age &gt;= 1149 AND Age &lt;= 1150, Age &gt;= 1150 AND Age &lt;= 1151, Age &gt;= 1151 AND Age &lt;= 1152, Age &gt;= 1152 AND Age &lt;= 1153, Age &gt;= 1153 AND Age &lt;= 1154, Age &gt;= 1154 AND Age &lt;= 1155, Age &gt;= 1155 AND Age &lt;= 1156, Age &gt;= 1156 AND Age &lt;= 1157, Age &gt;= 1157 AND Age &lt;= 1158, Age &gt;= 1158 AND Age &lt;= 1159, Age &gt;= 1159 AND Age &lt;= 1160, Age &gt;= 1160 AND Age &lt;= 1161, Age &gt;= 1161 AND Age &lt;= 1162, Age &gt;= 1162 AND Age &lt;= 1163, Age &gt;= 1163 AND Age &lt;= 1164, Age &gt;= 1164 AND Age &lt;= 1165, Age &gt;= 1165 AND Age &lt;= 1166, Age &gt;= 1166 AND Age &lt;= 1167, Age &gt;= 1167 AND Age &lt;= 1168, Age &gt;= 1168 AND Age &lt;= 1169, Age &gt;= 1169 AND Age &lt;= 1170, Age &gt;= 1170 AND Age &lt;= 1171, Age &gt;= 1171 AND Age &lt;= 1172, Age &gt;= 1172 AND Age &lt;= 1173, Age &gt;= 1173 AND Age &lt;= 1174, Age &gt;= 1174 AND Age &lt;= 1175, Age &gt;= 1175 AND Age &lt;= 1176, Age &gt;= 1176 AND Age &lt;= 1177, Age &gt;= 1177 AND Age &lt;= 1178, Age &gt;= 1178 AND Age &lt;= 1179, Age &gt;= 1179 AND Age &lt;= 1180, Age &gt;= 1180 AND Age &lt;= 1181, Age &gt;= 1181 AND Age &lt;= 1182, Age &gt;= 1182 AND Age &lt;= 1183, Age &gt;= 1183 AND Age &lt;= 1184, Age &gt;= 1184 AND Age &lt;= 1185, Age &gt;= 1185 AND Age &lt;= 1186, Age &gt;= 1186 AND Age &lt;= 1187, Age &gt;= 1187 AND Age &lt;= 1188, Age &gt;= 1188 AND Age &lt;= 1189, Age &gt;= 1189 AND Age &lt;= 1190, Age &gt;= 1190 AND Age &lt;= 1191, Age &gt;= 1191 AND Age &lt;= 1192, Age &gt;= 1192 AND Age &lt;= 1193, Age &gt;= 1193 AND Age &lt;= 1194, Age &gt;= 1194 AND Age &lt;= 1195, Age &gt;= 1195 AND Age &lt;= 1196, Age &gt;= 1196 AND Age &lt;= 1197, Age &gt;= 1197 AND Age &lt;= 1198, Age &gt;= 1198 AND Age &lt;= 1199, Age &gt;= 1199 AND Age &lt;= 1200, Age &gt;= 1200 AND Age &lt;= 1201, Age &gt;= 1201 AND Age &lt;= 1202, Age &gt;= 1202 AND Age &lt;= 1203, Age &gt;= 1203 AND Age &lt;= 1204, Age &gt;= 1204 AND Age &lt;= 1205, Age &gt;= 1205 AND Age &lt;= 1206, Age &gt;= 1206 AND Age &lt;= 1207, Age &gt;= 1207 AND Age &lt;= 1208, Age &gt;= 1208 AND Age &lt;= 1209, Age &gt;= 1209 AND Age &lt;= 1210, Age &gt;= 1210 AND Age &lt;= 1211, Age &gt;= 1211 AND Age &lt;= 1212, Age &gt;= 1212 AND Age &lt;= 1213, Age &gt;= 1213 AND Age &lt;= 1214, Age &gt;= 1214 AND Age &lt;= 1215, Age &gt;= 1215 AND Age &lt;= 1216, Age &gt;= 1216 AND Age &lt;= 1217, Age &gt;= 1217 AND Age &lt;= 1218, Age &gt;= 1218 AND Age &lt;= 1219, Age &gt;= 1219 AND Age &lt;= 1220, Age &gt;= 1220 AND Age &lt;= 1221, Age &gt;= 1221 AND Age &lt;= 1222, Age &gt;= 1222 AND Age &lt;= 1223, Age &gt;= 1223 AND Age &lt;= 1224, Age &gt;= 1224 AND Age &lt;= 1225, Age &gt;= 1225 AND Age &lt;= 1226, Age &gt;= 1226 AND Age &lt;= 1227, Age &gt;= 1227 AND Age &lt;= 1228, Age &gt;= 1228 AND Age &lt;= 1229, Age &gt;= 1229 AND Age &lt;= 1230, Age &gt;= 1230 AND Age &lt;= 1231, Age &gt;= 1231 AND Age &lt;= 1232, Age &gt;= 1232 AND Age &lt;= 1233, Age &gt;= 1233 AND Age &lt;= 1234, Age &gt;= 1234 AND Age &lt;= 1235, Age &gt;= 1235 AND Age &lt;= 1236, Age &gt;= 1236 AND Age &lt;= 1237, Age &gt;= 1237 AND Age &lt;= 1238, Age &gt;= 1238 AND Age &lt;= 1239, Age &gt;= 1239 AND Age &lt;= 1240, Age &gt;= 1240 AND Age &lt;= 1241, Age &gt;= 1241 AND Age &lt;= 1242, Age &gt;= 1242 AND Age &lt;= 1243, Age &gt;= 1243 AND Age &lt;= 1244, Age &gt;= 1244 AND Age &lt;= 1245, Age &gt;= 1245 AND Age &lt;= 1246, Age &gt;= 1246 AND Age &lt;= 1247, Age &gt;= 1247 AND Age &lt;= 1248, Age &gt;= 1248 AND Age &lt;= 1249, Age &gt;= 1249 AND Age &lt;= 1250, Age &gt;= 1250 AND Age &lt;= 1251, Age &gt;= 1251 AND Age &lt;= 1252, Age &gt;= 1252 AND Age &lt;= 1253, Age &gt;= 1253 AND Age &lt;= 1254, Age &gt;= 1254 AND Age &lt;= 1255, Age &gt;= 1255 AND Age &lt;= 1256, Age &gt;= 1256 AND Age &lt;= 1257, Age &gt;= 1257 AND Age &lt;= 1258, Age &gt;= 1258 AND Age &lt;= 1259, Age &gt;= 1259 AND Age &lt;= 1260, Age &gt;= 1260 AND Age &lt;= 1261, Age &gt;= 1261 AND Age &lt;= 1262, Age &gt;= 1262 AND Age &lt;= 1263, Age &gt;= 1263 AND Age &lt;= 1264, Age &gt;= 1264 AND Age &lt;= 1265, Age &gt;= 1265 AND Age &lt;= 1266, Age &gt;= 1266 AND Age &lt;= 1267, Age &gt;= 1267 AND Age &lt;= 1268, Age &gt;= 1268 AND Age &lt;= 1269, Age &gt;= 1269 AND Age &lt;= 1270, Age &gt;= 1270 AND Age &lt;= 1271, Age &gt;= 1271 AND Age &lt;= 1272, Age &gt;= 1272 AND Age &lt;= 1273, Age &gt;= 1273 AND Age &lt;= 1274, Age &gt;= 1274 AND Age &lt;= 1275, Age &gt;= 1275 AND Age &lt;= 1276, Age &gt;= 1276 AND Age &lt;= 1277, Age &gt;= 1277 AND Age &lt;= 1278, Age &gt;= 1278 AND Age &lt;= 1279, Age &gt;= 1279 AND Age &lt;= 1280, Age &gt;= 1280 AND Age &lt;= 1281, Age &gt;= 1281 AND Age &lt;= 1282, Age &gt;= 1282 AND Age &lt;= 1283, Age &gt;= 1283 AND Age &lt;= 1284, Age &gt;= 1284 AND Age &lt;= 1285, Age &gt;= 1285 AND Age &lt;= 1286, Age &gt;= 1286 AND Age &lt;= 1287, Age &gt;= 1287 AND Age &lt;= 1288, Age &gt;= 1288 AND Age &lt;= 1289, Age &gt;= 1289 AND Age &lt;= 1290, Age &gt;= 1290 AND Age &lt;= 1291, Age &gt;= 1291 AND Age &lt;= 1292, Age &gt;= 1292 AND Age &lt;= 1293, Age &gt;= 1293 AND Age &lt;= 1294, Age &gt;= 1294 AND Age &lt;= 1295, Age &gt;= 1295 AND Age &lt;= 1296, Age &gt;= 1296 AND Age &lt;= 1297, Age &gt;= 1297 AND Age &lt;= 1298, Age &gt;= 1298 AND Age &lt;= 1299, Age &gt;= 1299 AND Age &lt;= 1300, Age &gt;= 1300 AND Age &lt;= 1301, Age &gt;= 1301 AND Age &lt;= 1302, Age &gt;= 1302 AND Age &lt;= 1303, Age &gt;= 1303 AND Age &lt;= 1304, Age &gt;= 1304 AND Age &lt;= 1305, Age &gt;= 1305 AND Age &lt;= 1306, Age &gt;= 1306 AND Age &lt;= 1307, Age &gt;= 1307 AND Age &lt;= 1308, Age &gt;= 1308 AND Age &lt;= 1309, Age &gt;= 1309 AND Age &lt;= 1310, Age &gt;= 1310 AND Age &lt;= 1311, Age &gt;= 1311 AND Age &lt;= 1312, Age &gt;= 1312 AND Age &lt;= 1313, Age &gt;= 1313 AND Age &lt;= 1314, Age &gt;= 1314 AND Age &lt;= 1315, Age &gt;= 1315 AND Age &lt;= 1316, Age &gt;= 1316 AND Age &lt;= 1317, Age &gt;= 1317 AND Age &lt;= 1318, Age &gt;= 1318 AND Age &lt;= 1319, Age &gt;= 1319 AND Age &lt;= 1320, Age &gt;= 1320 AND Age &lt;= 1321, Age &gt;= 1321 AND Age &lt;= 1322, Age &gt;= 1322 AND Age &lt;= 1323, Age &gt;= 1323 AND Age &lt;= 1324, Age &gt;= 1324 AND Age &lt;= 1325, Age &gt;= 1325 AND Age &lt;= 1326, Age &gt;= 1326 AND Age &lt;= 1327, Age &gt;= 1327 AND Age &lt;= 1328, Age &gt;= 1328 AND Age &lt;= 1329, Age &gt;= 1329 AND Age &lt;= 1330, Age &gt;= 1330 AND Age &lt;= 1331, Age &gt;= 1331 AND Age &lt;= 1332, Age &gt;= 1332 AND Age &lt;= 1333, Age &gt;= 1333 AND Age &lt;= 1334, Age &gt;= 1334 AND Age &lt;= 1335, Age &gt;= 1335 AND Age &lt;= 1336, Age &gt;= 1336 AND Age &lt;= 1337, Age &gt;= 1337 AND Age &lt;= 1338, Age &gt;= 1338 AND Age &lt;= 1339, Age &gt;= 1339 AND Age &lt;= 1340, Age &gt;= 1340 AND Age &lt;= 1341, Age &gt;= 1341 AND Age &lt;= 1342, Age &gt;= 1342 AND Age &lt;= 1343, Age &gt;= 1343 AND Age &lt;= 1344, Age &gt;= 1344 AND Age &lt;= 1345, Age &gt;= 1345 AND Age &lt;= 1346, Age &gt;= 1346 AND Age &lt;= 1347, Age &gt;= 1347 AND Age &lt;= 1348, Age &gt;= 1348 AND Age &lt;= 1349, Age &gt;= 1349 AND Age &lt;= 1350, Age &gt;= 1350 AND Age &lt;= 1351, Age &gt;= 1351 AND Age &lt;= 1352, Age &gt;= 1352 AND Age &lt;= 1353, Age &gt;= 1353 AND Age &lt;= 1354, Age &gt;= 1354 AND Age &lt;= 1355, Age &gt;= 1355 AND Age &lt;= 1356, Age &gt;= 1356 AND Age &lt;= 1357, Age &gt;= 1357 AND Age &lt;= 1358, Age &gt;= 1358 AND Age &lt;= 1359, Age &gt;= 1359 AND Age &lt;= 1360, Age &gt;= 1360 AND Age &lt;= 1361, Age &gt;= 1361 AND Age &lt;= 1362, Age &gt;= 1362 AND Age &lt;= 1363, Age &gt;= 1363 AND Age &lt;= 1364, Age &gt;= 1364 AND Age &lt;= 1365, Age &gt;= 1365 AND Age &lt;= 1366, Age &gt;= 1366 AND Age &lt;= 1367, Age &gt;= 1367 AND Age &lt;= 1368, Age &gt;= 1368 AND Age &lt;= 1369, Age &gt;= 1369 AND Age &lt;= 1370, Age &gt;= 1370 AND Age &lt;= 1371, Age &gt;= 1371 AND Age &lt;= 1372, Age &gt;= 1372 AND Age &lt;= 1373, Age &gt;= 1373 AND Age &lt;= 1374, Age &gt;= 1374 AND Age &lt;= 1375, Age &gt;= 1375 AND Age &lt;= 1376, Age &gt;= 1376 AND Age &lt;= 1377, Age &gt;= 1377 AND Age &lt;= 1378, Age &gt;= 1378 AND Age &lt;= 1379, Age &gt;= 1379 AND Age &lt;= 1380, Age &gt;= 1380 AND Age &lt;= 1381, Age &gt;= 1381 AND Age &lt;= 1382, Age &gt;= 1382 AND Age &lt;= 1383, Age &gt;= 1383 AND Age &lt;= 1384, Age &gt;= 1384 AND Age &lt;= 1385, Age &gt;= 1385 AND Age &lt;= 1386, Age &gt;= 1386 AND Age &lt;= 1387, Age &gt;= 1387 AND Age &lt;= 1388, Age &gt;= 1388 AND Age &lt;= 1389, Age &gt;= 1389 AND Age &lt;= 1390, Age &gt;= 1390 AND Age &lt;= 1391, Age &gt;= 1391 AND Age &lt;= 1392, Age &gt;= 1392 AND Age &lt;= 1393, Age &gt;= 1393 AND Age &lt;= 1394, Age &gt;= 1394 AND Age &lt;= 1395, Age &gt;= 1395 AND Age &lt;= 1396, Age &gt;= 1396 AND Age &lt;= 1397, Age &gt;= 1397 AND Age &lt;= 1398, Age &gt;= 1398 AND Age &lt;= 1399, Age &gt;= 1399 AND Age &lt;= 1400, Age &gt;= 1400 AND Age &lt;= 1401, Age &gt;= 1401 AND Age &lt;= 1402, Age &gt;= 1402 AND Age &lt;= 1403, Age &gt;= 1403 AND Age &lt;= 1404, Age &gt;= 1404 AND Age &lt;= 1405, Age &gt;= 1405 AND Age &lt;= 1406, Age &gt;= 1406 AND Age &lt;= 1407, Age &gt;= 1407 AND Age &lt;= 1408, Age &gt;= 1408 AND Age &lt;= 1409, Age &gt;= 1409 AND Age &lt;= 1410, Age &gt;= 1410 AND Age &lt;= 1411, Age &gt;= 1411 AND Age &lt;= 1412, Age &gt;= 1412 AND Age &lt;= 1413, Age &gt;= 1413 AND Age &lt;= 1414, Age &gt;= 1414 AND Age &lt;= 1415, Age &gt;= 1415 AND Age &lt;= 1416, Age &gt;= 1416 AND Age &lt;= 1417, Age &gt;= 1417 AND Age &lt;= 1418, Age &gt;= 1418 AND Age &lt;= 1419, Age &gt;= 1419 AND Age &lt;= 1420, Age &gt;= 1420 AND Age &lt;= 1421, Age &gt;= 1421 AND Age &lt;= 1422, Age &gt;= 1422 AND Age &lt;= 1423, Age &gt;= 1423 AND Age &lt;= 1424, Age &gt;= 1424 AND Age &lt;= 1425, Age &gt;= 1425 AND Age &lt;= 1426, Age &gt;= 1426 AND Age &lt;= 1427, Age &gt;= 1427 AND Age &lt;= 1428, Age &gt;= 1428 AND Age &lt;= 1429, Age &gt;= 1429 AND Age &lt;= 1430, Age &gt;= 1430 AND Age &lt;= 1431, Age &gt;= 1431 AND Age &lt;= 1432, Age &gt;= 1432 AND Age &lt;= 1433, Age &gt;= 1433 AND Age &lt;= 1434, Age &gt;= 1434 AND Age &lt;= 1435, Age &gt;= 1435 AND Age &lt;= 1436, Age &gt;= 1436 AND Age &lt;= 1437, Age &gt;= 1437 AND Age &lt;= 1438, Age &gt;= 1438 AND Age &lt;= 1439, Age &gt;= 1439 AND Age &lt;= 1440, Age &gt;= 1440 AND Age &lt;= 1441, Age &gt;= 1441 AND Age &lt;= 1442, Age &gt;= 1442 AND Age &lt;= 1443, Age &gt;= 1443 AND Age &lt;= 1444, Age &gt;= 1444 AND Age &lt;= 1445, Age &gt;= 1445 AND Age &lt;= 1446, Age &gt;= 1446 AND Age &lt;= 1447, Age &gt;= 1447 AND Age &lt;= 1448, Age &gt;= 1448 AND Age &lt;= 1449, Age &gt;= 1449 AND Age &lt;= 1450, Age &gt;= 1450 AND Age &lt;= 1451, Age &gt;= 1451 AND Age &lt;= 1452, Age &gt;= 1452 AND Age &lt;= 1453, Age &gt;= 1453 AND Age &lt;= 1454, Age &gt;= 1454 AND Age &lt;= 1455, Age &gt;= 1455 AND Age &lt;= 1456, Age &gt;= 1456 AND Age &lt;= 1457, Age &gt;= 1457 AND Age &lt;= 1458, Age &gt;= 1458 AND Age &lt;= 1459, Age &gt;= 1459 AND Age &lt;= 1460, Age &gt;= 1460 AND Age &lt;= 1461, Age &gt;= 1461 AND Age &lt;= 1462, Age &gt;= 1462 AND Age &lt;= 1463, Age &gt;= 1463 AND Age &lt;= 1464, Age &gt;= 1464 AND Age &lt;= 1465, Age &gt;= 1465 AND Age &lt;= 1466, Age &gt;= 1466 AND Age &lt;= 1467, Age &gt;= 1467 AND Age &lt;= 1468, Age &gt;= 1468 AND Age &lt;= 1469, Age &gt;= 1469 AND Age &lt;= 1470, Age &gt;= 1470 AND Age &lt;= 1471, Age &gt;= 1471 AND Age &lt;= 1472, Age &gt;= 1472 AND Age &lt;= 1473, Age &gt;= 1473 AND Age &lt;= 1474, Age &gt;= 1474 AND Age &lt;= 1475, Age &gt;= 1475 AND Age &lt;= 1476, Age &gt;= 1476 AND Age &lt;= 1477, Age &gt;= 1477 AND Age &lt;= 1478, Age &gt;= 1478 AND Age &lt;= 1479, Age &gt;= 1479 AND Age &lt;= 1480, Age &gt;= 1480 AND Age &lt;= 1481, Age &gt;= 1481 AND Age &lt;= 1482, Age &gt;= 1482 AND Age &lt;= 1483, Age &gt;= 1483 AND Age &lt;= 1484, Age &gt;= 1484 AND Age &lt;= 1485, Age &gt;= 1485 AND Age &lt;= 1486, Age &gt;= 1486 AND Age &lt;= 1487, Age &gt;= 1487 AND Age &lt;= 1488, Age &gt;= 1488 AND Age &lt;= 1489, Age &gt;= 1489 AND Age &lt;= 1490, Age &gt;= 1490 AND Age &lt;= 1491, Age &gt;= 1491 AND Age &lt;= 1492, Age &gt;= 1492 AND Age &lt;= 1493, Age &gt;= 1493 AND Age &lt;= 1494, Age &gt;= 1494 AND Age &lt;= 1495, Age &gt;= 1495 AND Age &lt;= 1496, Age &gt;= 1496 AND Age &lt;= 1497, Age &gt;= 1497 AND Age &lt;= 1498, Age &gt;= 1498 AND Age &lt;= 1499, Age &gt;= 1499 AND Age &lt;= 1500, Age &gt;= 1500 AND Age &lt;= 1501, Age &gt;= 1501 AND Age &lt;= 1502, Age &gt;= 1502 AND Age &lt;= 1503, Age &gt;= 1503 AND Age &lt;= 1504, Age &gt;= 1504 AND Age &lt;= 1505, Age &gt;= 1505 AND Age &lt;= 1506, Age &gt;= 1506 AND Age &lt;= 1507, Age &gt;= 1507 AND Age &lt;= 1508, Age &gt;= 1508 AND Age &lt;= 1509, Age &gt;= 1509 AND Age &lt;= 1510, Age &gt;= 1510 AND Age &lt;= 1511, Age &gt;= 1511 AND Age &lt;= 1512, Age &gt;= 1512 AND Age &lt;= 1513, Age &gt;= 1513 AND Age &lt;= 1514, Age &gt;= 1514 AND Age &lt;= 1515, Age &gt;= 1515 AND Age &lt;= 1516, Age &gt;= 1516 AND Age &lt;= 1517, Age &gt;= 1517 AND Age &lt;= 1518, Age &gt;= 1518 AND Age &lt;= 1519, Age &gt;= 1519 AND Age &lt;= 1520, Age &gt;= 1520 AND Age &lt;= 1521, Age &gt;= 1521 AND Age &lt;= 1522, Age &gt;= 1522 AND Age &lt;= 1523, Age &gt;= 1523 AND Age &lt;= 1524, Age &gt;= 1524 AND Age &lt;= 1525, Age &gt;= 1525 AND Age &lt;= 1526, Age &gt;= 1526 AND Age &lt;= 1527, Age &gt;= 1527 AND Age &lt;= 1528, Age &gt;= 1528 AND Age &lt;= 1529, Age &gt;= 1529 AND Age &lt;= 1530, Age &gt;= 1530 AND Age &lt;= 1531, Age &gt;= 1531 AND Age &lt;= 1532, Age &gt;= 1532 AND Age &lt;= 1533, Age &gt;= 1533 AND Age &lt;= 1534, Age &gt;= 1534 AND Age &lt;= 1535, Age &gt;= 1535 AND Age &lt;= 1536, Age &gt;= 1536 AND Age &lt;= 1537, Age &gt;= 1537 AND Age &lt;= 1538, Age &gt;= 1538 AND Age &lt;= 1539, Age &gt;= 1539 AND Age &lt;= 1540, Age &gt;= 1540 AND Age &lt;= 1541, Age &gt;= 1541 AND Age &lt;= 1542, Age &gt;= 1542 AND Age &lt;= 1543, Age &gt;= 1543 AND Age &lt;= 1544, Age &gt;= 1544 AND Age &lt;= 1545, Age &gt;= 1545 AND Age &lt;= 1546, Age &gt;= 1546 AND Age &lt;= 1547, Age &gt;= 1547 AND Age &lt;= 1548, Age &gt;= 1548 AND Age &lt;= 1549, Age &gt;= 1549 AND Age &lt;= 1550, Age &gt;= 1550 AND Age &lt;= 1551, Age &gt;= 1551 AND Age &lt;= 1552, Age &gt;= 1552 AND Age &lt;= 1553, Age &gt;= 1553 AND Age &lt;= 1554, Age &gt;= 1554 AND Age &lt;= 1555, Age &gt;= 1555 AND Age &lt;= 1556, Age &gt;= 1556 AND Age &lt;= 1557, Age &gt;= 1557 AND Age &lt;= 1558, Age &gt;= 1558 AND Age &lt;= 1559, Age &gt;= 1559 AND Age &lt;= 1560, Age &gt;= 1560 AND Age &lt;= 1561, Age &gt;= 1561 AND Age &lt;= 1562, Age &gt;= 1562 AND Age &lt;= 1563, Age &gt;= 1563 AND Age &lt;= 1564, Age &gt;= 1564 AND Age &lt;= 1565, Age &gt;= 1565 AND Age &lt;= 1566, Age &gt;= 1566 AND Age &lt;= 1567, Age &gt;= 1567 AND Age &lt;= 1568, Age &gt;= 1568 AND Age &lt;= 1569, Age &gt;= 1569 AND Age &lt;= 1570, Age &gt;= 1570 AND Age &lt;= 1571, Age &gt;= 1571 AND Age &lt;= 1572, Age &gt;= 1572 AND Age &lt;= 1573, Age &gt;= 1573 AND Age &lt;= 1574, Age &gt;= 1574 AND Age &lt;= 1575, Age &gt;= 1575 AND Age &lt;= 1576, Age &gt;= 1576 AND Age &lt;= 1577, Age &gt;= 1577 AND Age &lt;= 1578, Age &gt;= 1578 AND Age &lt;= 1579, Age &gt;= 1579 AND Age &lt;= 1580, Age &gt;= 1580 AND Age &lt;= 1581, Age &gt;= 1581 AND Age &lt;= 1582, Age &gt;= 1582 AND Age &lt;= 1583, Age &gt;= 1583 AND Age &lt;= 1584, Age &gt;= 1584 AND Age &lt;= 1585, Age &gt;= 1585 AND Age &lt;= 1586, Age &gt;= 1586 AND Age &lt;= 1587, Age &gt;= 1587 AND Age &lt;= 1588, Age &gt;= 1588 AND Age &lt;= 1589, Age &gt;= 1589 AND Age &lt;= 1590, Age &gt;= 1590 AND Age &lt;= 1591, Age &gt;= 1591 AND Age &lt;= 1592, Age &gt;= 1592 AND Age &lt;= 1593, Age &gt;= 1593 AND Age &lt;= 1594, Age &gt;= 1594 AND Age &lt;= 1595, Age &gt;= 1595 AND Age &lt;= 1596, Age &gt;= 1596 AND Age &lt;= 1597, Age &gt;= 1597 AND Age &lt;= 1598, Age &gt;= 1598 AND Age &lt;= 1599, Age &gt;= 1599 AND Age &lt;= 1600, Age &gt;= 1600 AND Age &lt;= 1601, Age &gt;= 1601 AND Age &lt;= 1602, Age &gt;= 1602 AND Age &lt;= 1603, Age &gt;= 1603 AND Age &lt;= 1604, Age &gt;= 1604 AND Age &lt;= 1605, Age &gt;= 1605 AND Age &lt;= 1606, Age &gt;= 1606 AND Age &lt;= 1607, Age &gt;= 1607 AND Age &lt;= 1608, Age &gt;= 1608 AND Age &lt;= 1609, Age &gt;= 1609 AND Age &lt;= 1610, Age &gt;= 1610 AND Age &lt;= 1611, Age &gt;= 1611 AND Age &lt;= 1612, Age &gt;= 1612 AND Age &lt;= 1613, Age &gt;= 1613 AND Age &lt;= 1614, Age &gt;= 1614 AND Age &lt;= 1615, Age &gt;= 1615 AND Age &lt;= 1616, Age &gt;= 1616 AND Age &lt;= 1617, Age &gt;= 1617 AND Age &lt;= 1618, Age &gt;= 1618 AND Age &lt;= 1619, Age &gt;= 1619 AND Age &lt;= 1620, Age &gt;= 1620 AND Age &lt;= 1621, Age &gt;= 1621 AND Age &lt;= 1622, Age &gt;= 1622 AND Age &lt;= 1623, Age &gt;= 1623 AND Age &lt;= 1624, Age &gt;= 1624 AND Age &lt;= 1625, Age &gt;= 1625 AND Age &lt;= 1626, Age &gt;= 1626 AND Age &lt;= 1627, Age &gt;= 1627 AND Age &lt;= 1628, Age &gt;= 1628 AND Age &lt;= 1629, Age &gt;= 1629 AND Age &lt;= 1630, Age &gt;= 1630 AND Age &lt;= 1631, Age &gt;= 1631 AND Age &lt;= 1632, Age &gt;= 1632 AND Age &lt;= 1633, Age &gt;= 1633 AND Age &lt;= 1634, Age &gt;= 1634 AND Age &lt;= 1635, Age &gt;= 1635 AND Age &lt;= 1636, Age &gt;= 1636 AND Age &lt;= 1637, Age &gt;= 1637 AND Age &lt;= 1638, Age &gt;= 1638 AND Age &lt;= 1639, Age &gt;= 1639 AND Age &lt;= 1640, Age &gt;= 1640 AND Age &lt;= 1641, Age &gt;= 1641 AND Age &lt;= 1642, Age &gt;= 1642 AND Age &lt;= 1643, Age &gt;= 1643 AND Age &lt;= 1644, Age &gt;= 1644 AND Age &lt;= 1645, Age &gt;= 1645 AND Age &lt;= 1646, Age &gt;= 1646 AND Age &lt;= 1647, Age &gt;= 1647 AND Age &lt;= 1648, Age &gt;= 1648 AND Age &lt;= 1649, Age &gt;= 1649 AND Age &lt;= 1650, Age &gt;= 1650 AND Age &lt;= 1651, Age &gt;= 1651 AND Age &lt;= 1652, Age &gt;= 1652 AND Age &lt;= 1653, Age &gt;= 1653 AND Age &lt;= 1654, Age &gt;= 1654 AND Age &lt;= 1655, Age &gt;= 1655 AND Age &lt;= 1656, Age &gt;= 1656 AND Age &lt;= 1657, Age &gt;= 1657 AND Age &lt;= 1658, Age &gt;= 1658 AND Age &lt;= 1659, Age &gt;= 1659 AND Age &lt;= 1660, Age &gt;= 1660 AND Age &lt;= 1661, Age &gt;= 1661 AND Age &lt;= 1662, Age &gt;= 1662 AND Age &lt;= 1663, Age &gt;= 1663 AND Age &lt;= 1664, Age &gt;= 1664 AND Age &lt;= 1665, Age &gt;= 1665 AND Age &lt;= 1666, Age &gt;= 1666 AND Age &lt;= 1667, Age &gt;= 1667 AND Age &lt;= 1668, Age &gt;= 1668 AND Age &lt;= 1669, Age &gt;= 1669 AND Age &lt;= 1670, Age &gt;= 1670 AND Age &lt;= 1671, Age &gt;= 1671 AND Age &lt;= 1672, Age &gt;= 1672 AND Age &lt;= 1673, Age &gt;= 1673 AND Age &lt;= 1674, Age &gt;= 1674 AND Age &lt;= 1675, Age &gt;= 1675 AND Age &lt;= 1676, Age &gt;= 1676 AND Age &lt;= 1677, Age &gt;= 1677 AND Age &lt;= 1678, Age &gt;= 1678 AND Age &lt;= 1679, Age &gt;= 1679 AND Age &lt;= 1680, Age &gt;= 1680 AND Age &lt;= 1681, Age &gt;= 1681 AND Age &lt;= 1682, Age &gt;= 1682 AND Age &lt;= 1683, Age &gt;= 1683 AND Age &lt;= 1684, Age &gt;= 1684 AND Age &lt;= 1685, Age &gt;= 1685 AND Age &lt;= 1686, Age &gt;= 1686 AND Age &lt;= 1687, Age &gt;= 1687 AND Age &lt;= 1688, Age &gt;= 1688 AND Age &lt;= 1689, Age &gt;= 1689 AND Age &lt;= 1690, Age &gt;= 1690 AND Age &lt;= 1691, Age &gt;= 1691 AND Age &lt;= 1692, Age &gt;= 1692 AND Age &lt;= 1693, Age &gt;= 1693 AND Age &lt;= 1694, Age &gt;= 1694 AND Age &lt;= 1695, Age &gt;= 1695 AND Age &lt;= 1696, Age &gt;= 1696 AND Age &lt;= 1697, Age &gt;= 1697 AND Age &lt;= 1698, Age &gt;= 1698 AND Age &lt;= 1699, Age &gt;= 1699 AND Age &lt;= 1700, Age &gt;= 1700 AND Age &lt;= 1701, Age &gt;= 1701 AND Age &lt;= 1702, Age &gt;= 1702 AND Age &lt;= 1703, Age &gt;= 1703 AND Age &lt;= 1704, Age &gt;= 1704 AND Age &lt;= 1705, Age &gt;= 1705 AND Age &lt;= 1706, Age &gt;= 1706 AND Age &lt;= 1707, Age &gt;= 1707 AND Age &lt;= 1708, Age &gt;= 1708 AND Age &lt;= 1709, Age &gt;= 1709 AND Age &lt;= 1710, Age &gt;= 1710 AND Age &lt;= 1711, Age &gt;= 1711 AND Age &lt;= 1712, Age &gt;= 1712 AND Age &lt;= 1713, Age &gt;= 1713 AND Age &lt;= 1714, Age &gt;= 1714 AND Age &lt;= 1715, Age &gt;= 1715 AND Age &lt;= 1716, Age &gt;= 1716 AND Age &lt;= 1717, Age &gt;= 1717 AND Age &lt;= 1718, Age &gt;= 1718 AND Age &lt;= 1719, Age &gt;= 1719 AND Age &lt;= 1720, Age &gt;= 1720 AND Age &lt;= 1721, Age &gt;= 1721 AND Age &lt;= 1722, Age &gt;= 1722 AND Age &lt;= 1723, Age &gt;= 1723 AND Age &lt;= 1724, Age &gt;= 1724 AND Age &lt;= 1725, Age &gt;= 1725 AND Age &lt;= 1726, Age &gt;= 1726 AND Age &lt;= 1727, Age &gt;= 1727 AND Age &lt;= 1728, Age &gt;= 1728 AND Age &lt;= 1729, Age &gt;= 1729 AND Age &lt;= 1730, Age &gt;= 1730 AND Age &lt;= 1731, Age &gt;= 1731 AND Age &lt;= 1732, Age &gt;= 1732 AND Age &lt;= 1733, Age &gt;= 1733 AND Age &lt;= 1734, Age &gt;= 1734 AND Age &lt;= 1735, Age &gt;= 1735 AND Age &lt;= 1736, Age &gt;= 1736 AND Age &lt;= 1737, Age &gt;= 1737 AND Age &lt;= 1738, Age &gt;= 1738 AND Age &lt;= 1739, Age &gt;= 1739 AND Age &lt;= 1740, Age &gt;= 1740 AND Age &lt;= 1741, Age &gt;= 1741 AND Age &lt;= 1742, Age &gt;= 1742 AND Age &lt;= 1743, Age &gt;= 1743 AND Age &lt;= 1744, Age &gt;= 1744 AND Age &lt;= 1745, Age &gt;= 1745 AND Age &lt;= 1746, Age &gt;= 1746 AND Age &lt;= 1747, Age &gt;= 1747 AND Age &lt;= 1748, Age &gt;= 1748 AND Age &lt;= 1749, Age &gt;= 1749 AND Age &lt;= 1750, Age &gt;= 1750 AND Age &lt;= 1751, Age &gt;= 1751 AND Age &lt;= 1752, Age &gt;= 1752 AND Age &lt;= 1753, Age &gt;= 1753 AND Age &lt;= 1754, Age &gt;= 1754 AND Age &lt;= 1755, Age &gt;= 1755 AND Age &lt;= 1756, Age &gt;= 1756 AND Age &lt;= 1757, Age &gt;= 1757 AND Age &lt;= 1758, Age &gt;= 1758 AND Age &lt;= 1759, Age &gt;= 1759 AND Age &lt;= 1760, Age &gt;= 1760 AND Age &lt;= 1761, Age &gt;= 1761 AND Age &lt;= 1762, Age &gt;= 1762 AND Age &lt;= 1763, Age &gt;= 1763 AND Age &lt;= 1764, Age &gt;= 1764 AND Age &lt;= 1765, Age &gt;= 1765 AND Age &lt;= 1766, Age &gt;= 1766 AND Age &lt;= 1767, Age &gt;= 1767 AND Age &lt;= 1768, Age &gt;= 1768 AND Age &lt;= 1769, Age &gt;= 1769 AND Age &lt;= 1770, Age &gt;= 1770 AND Age &lt;= 1771, Age &gt;= 1771 AND Age &lt;= 1772, Age &gt;= 1772 AND Age &lt;= 1773, Age &gt;= 1773 AND Age &lt;= 1774, Age &gt;= 1774 AND Age &lt;= 1775, Age &gt;= 1775 AND Age &lt;= 1776, Age &gt;= 1776 AND Age &lt;= 1777, Age &gt;= 1777 AND Age &lt;= 1778, Age &gt;= 1778 AND Age &lt;= 1779, Age &gt;= 1779 AND Age &lt;= 1780, Age &gt;= 1780 AND Age &lt;= 1781, Age &gt;= 1781 AND Age &lt;= 1782, Age &gt;= 1782 AND Age &lt;= 1783, Age &gt;= 1783 AND Age &lt;= 1784, Age &gt;= 1784 AND Age &lt;= 1785, Age &gt;= 1785 AND Age &lt;= 1786, Age &gt;= 1786 AND Age &lt;= 1787, Age &gt;= 1787 AND Age &lt;= 1788, Age &gt;= 1788 AND Age &lt;= 1789, Age &gt;= 1789 AND Age &lt;= 1790, Age &gt;= 1790 AND Age &lt;= 1791, Age &gt;= 1791 AND Age &lt;= 1792, Age &gt;= 1792 AND Age &lt;= 1793, Age &gt;= 1793 AND Age &lt;= 1794, Age &gt;= 1794 AND Age &lt;= 1795, Age &gt;= 1795 AND Age &lt;= 1796, Age &gt;= 1796 AND Age &lt;= 1797, Age &gt;= 1797 AND Age &lt;= 1798, Age &gt;= 1798 AND Age &lt;= 1799, Age &gt;= 1799 AND Age &lt;= 1800, Age &gt;= 1800 AND Age &lt;= 1801, Age &gt;= 1801 AND Age &lt;= 1802, Age &gt;= 1802 AND Age &lt;= 1803, Age &gt;= 1803 AND Age &lt;= 1804, Age &gt;= 1804 AND Age &lt;= 1805, Age &gt;= 1805 AND Age &lt;= 1806, Age &gt;= 1806 AND Age &lt;= 1807, Age &gt;= 1807 AND Age &lt;= 1808, Age &gt;= 1808 AND Age &lt;= 1809, Age &gt;= 1809 AND Age &lt;= 1810, Age &gt;= 1810 AND Age &lt;= 1811, Age &gt;= 1811 AND Age &lt;= 1812, Age &gt;= 1812 AND Age &lt;= 1813, Age &gt;= 1813 AND Age &lt;= 1814, Age &gt;= 1814 AND Age &lt;= 1815, Age &gt;= 1815 AND Age &lt;= 1816, Age &gt;= 1816 AND Age &lt;= 1817, Age &gt;= 1817 AND Age &lt;= 1818, Age &gt;= 1818 AND Age &lt;= 1819, Age &gt;= 1819 AND Age &lt;= 1820, Age &gt;= 1820 AND Age &lt;= 1821, Age &gt;= 1821 AND Age &lt;= 1822, Age &gt;= 1822 AND Age &lt;= 1823, Age &gt;= 1823 AND Age &lt;= 1824, Age &gt;= 1824 AND Age &lt;= 1825, Age &gt;= 1825 AND Age &lt;= 1826, Age &gt;= 1826 AND Age &lt;= 1827, Age &gt;= 1827 AND Age &lt;= 1828, Age &gt;= 1828 AND Age &lt;= 1829, Age &gt;= 1829 AND Age &lt;= 1830, Age &gt;= 1830 AND Age &lt;= 1831, Age &gt;= 1831 AND Age &lt;= 1832, Age &gt;= 1832 AND Age &lt;= 1833, Age &gt;= 1833 AND Age &lt;= 1834, Age &gt;= 1834 AND Age &lt;= 1835, Age &gt;= 1835 AND Age &lt;= 1836, Age &gt;= 1836 AND Age &lt;= 1837, Age &gt;= 1837 AND Age &lt;= 1838, Age &gt;= 1838 AND Age &lt;= 1839, Age &gt;= 1839 AND Age &lt;= 1840, Age &gt;= 1840 AND Age &lt;= 1841, Age &gt;= 1841 AND Age &lt;= 1842, Age &gt;= 1842 AND Age &lt;= 1843, Age &gt;= 1843 AND Age &lt;= 1844, Age &gt;= 1844 AND Age &lt;= 1845, Age &gt;= 1845 AND Age &lt;= 1846, Age &gt;= 1846 AND Age &lt;= 1847, Age &gt;= 1847 AND Age &lt;= 1848, Age &gt;= 1848 AND Age &lt;= 1849, Age &gt;= 1849 AND Age &lt;= 1850, Age &gt;= 1850 AND Age &lt;= 1851, Age &gt;= 1851 AND Age &lt;= 1852, Age &gt;= 1852 AND Age &lt;= 1853, Age &gt;= 1853 AND Age &lt;= 1854, Age &gt;= 1854 AND Age &lt;= 1855, Age &gt;= 1855 AND Age &lt;= 1856, Age &gt;= 1856 AND Age &lt;= 1857, Age &gt;= 1857 AND Age &lt;= 1858, Age &gt;= 1858 AND Age &lt;= 1859, Age &gt;= 1859 AND Age &lt;= 1860, Age &gt;= 1860 AND Age &lt;= 1861, Age &gt;= 1861 AND Age &lt;= 1862, Age &gt;= 1862 AND Age &lt;= 1863, Age &gt;= 1863 AND Age &lt;= 1864, Age &gt;= 1864 AND Age &lt;= 1865, Age &gt;= 1865 AND Age &lt;= 1866, Age &gt;= 1866 AND Age &lt;= 1867, Age &gt;= 1867 AND Age &lt;= 1868, Age &gt;= 1868 AND Age &lt;= 1869, Age &gt;= 1869 AND Age &lt;= 1870, Age &gt;= 1870 AND Age &lt;= 1871, Age &gt;= 1871 AND Age &lt;= 1872, Age &gt;= 1872 AND Age &lt;= 1873, Age &gt;= 1873 AND Age &lt;= 1874, Age &gt;= 1874 AND Age &lt;= 1875, Age &gt;= 1875 AND Age &lt;= 1876, Age &gt;= 1876 AND Age &lt;= 1877, Age &gt;= 1877 AND Age &lt;= 1878, Age &gt;= 1878 AND Age &lt;= 1879, Age &gt;= 1879 AND Age &lt;= 1880, Age &gt;= 1880 AND Age &lt;= 1881, Age &gt;= 1881 AND Age &lt;= 1882, Age &gt;= 1882 AND Age &lt;= 1883, Age &gt;= 1883 AND Age &lt;= 1884, Age &gt;= 1884 AND Age &lt;= 1885, Age &gt;= 1885 AND Age &lt;= 1886, Age &gt;= 1886 AND Age &lt;= 1887, Age &gt;= 1887 AND Age &lt;= 1888, Age &gt;= 1888 AND Age &lt;= 1889, Age &gt;= 1889 AND Age &lt;= 1890, Age &gt;= 1890 AND Age &lt;= 1891, Age &gt;= 1891 AND Age &lt;= 1892, Age &gt;= 1892 AND Age &lt;= 1893, Age &gt;= 1893 AND Age &lt;= 1894, Age &gt;= 1894 AND Age &lt;= 1895, Age &gt;= 1895 AND Age &lt;= 1896, Age &gt;= 1896 AND Age &lt;= 1897, Age &gt;= 1897 AND Age &lt;= 1898, Age &gt;= 1898 AND Age &lt;= 1899, Age &gt;= 1899 AND Age &lt;= 1900, Age &gt;= 1900 AND Age &lt;= 1901, Age &gt;= 1901 AND Age &lt;= 1902, Age &gt;= 1902 AND Age &lt;= 1903, Age &gt;= 1903 AND Age &lt;= 1904, Age &gt;= 1904 AND Age &lt;= 1905, Age &gt;= 1905 AND Age &lt;= 1906, Age &gt;= 1906 AND Age &lt;= 1907, Age &gt;= 1907 AND Age &lt;= 1908, Age &gt;= 1908 AND Age &lt;= 1909, Age &gt;= 1909 AND Age &lt;= 1910, Age &gt;= 1910 AND Age &lt;= 1911, Age &gt;= 1911 AND Age &lt;= 1912, Age &gt;= 1912 AND Age &lt;= 1913, Age &gt;= 1913 AND Age &lt;= 1914, Age &gt;= 1914 AND Age &lt;= 1915, Age &gt;= 1915 AND Age &lt;= 1916, Age &gt;= 1916 AND Age &lt;= 1917, Age &gt;= 1917 AND Age &lt;= 1918, Age &gt;= 1918 AND Age &lt;= 1919, Age &gt;= 1919 AND Age &lt;= 1920, Age &gt;= 1920 AND Age &lt;= 1921, Age &gt;= 1921 AND Age &lt;= 1922, Age &gt;= 1922 AND Age &lt;= 1923, Age &gt;= 1923 AND Age &lt;= 1924, Age &gt;= 1924 AND Age &lt;= 1925, Age &gt;= 1925 AND Age &lt;= 1926, Age &gt;= 1926 AND Age &lt;= 1927, Age &gt;= 1927 AND Age &lt;= 1928, Age &gt;= 1928 AND Age &lt;= 1929, Age &gt;= 1929 AND Age &lt;= 1930, Age &gt;= 1930 AND Age &lt;= 1931, Age &gt;= 1931 AND Age &lt;= 1932, Age &gt;= 1932 AND Age &lt;= 1933, Age &gt;= 1933 AND Age &lt;= 1934, Age &gt;= 1934 AND Age &lt;= 1935, Age &gt;= 1935 AND Age &lt;= 1936, Age &gt;= 1936 AND Age &lt;= 1937, Age &gt;= 1937 AND Age &lt;= 1938, Age &gt;= 1938 AND Age &lt;= 1939, Age &gt;= 1939 AND Age &lt;= 1940, Age &gt;= 1940 AND Age &lt;= 1941, Age &gt;= 1941 AND Age &lt;= 1942, Age &gt;= 1942 AND Age &lt;= 1943, Age &gt;= 1943 AND Age &lt;= 1944, Age &gt;= 1944 AND Age &lt;= 1945, Age &gt;= 1945 AND Age &lt;= 1946, Age &gt;= 1946 AND Age &lt;= 1947, Age &gt;= 1947 AND Age &lt;= 1948, Age &gt;= 1948 AND Age &lt;= 1949, Age &gt;= 1949 AND Age &lt;= 1950, Age &gt;= 1950 AND Age &lt;= 1951, Age &gt;= 1951 AND Age &lt;= 1952, Age &gt;= 1952 AND Age &lt;= 1953, Age &gt;= 1953 AND Age &lt;= 1954, Age &gt;= 1954 AND Age &lt;= 1955, Age &gt;= 1955 AND Age &lt;= 1956, Age &gt;= 1956 AND Age &lt;= 1957, Age &gt;= 1957 AND Age &lt;= 1958, Age &gt;= 1958 AND Age &lt;= 1959, Age &gt;= 1959 AND Age &lt;= 1960, Age &gt;= 1960 AND Age &lt;= 1961, Age &gt;= 1961 AND Age &lt;= 1962, Age &gt;= 1962 AND Age &lt;= 1963, Age &gt;= 1963 AND Age &lt;= 1964, Age &gt;= 1964 AND Age &lt;= 1965, Age &gt;= 1965 AND Age &lt;= 1966, Age &gt;= 1966 AND Age &lt;= 1967, Age &gt;= 1967 AND Age &lt;= 1968, Age &gt;= 1968 AND Age &lt;= 1969, Age &gt;= 1969 AND Age &lt;= 1970, Age &gt;= 1970 AND Age &lt;= 1971, Age &gt;= 1971 AND Age &lt;= 1972, Age &gt;= 1972 AND Age &lt;= 1973, Age &gt;= 1973 AND Age &lt;= 1974, Age &gt;= 1974 AND Age &lt;= 1975, Age &gt;= 1975 AND Age &lt;= 1976, Age &gt;= 1976 AND Age &lt;= 1977, Age &gt;= 1977 AND Age &lt;= 1978, Age &gt;= 1978 AND Age &lt;= 1979, Age &gt;= 1979 AND Age &lt;= 1980, Age &gt;= 1980 AND Age &lt;= 1981, Age &gt;= 1981 AND Age &lt;= 1982, Age &gt;= 1982 AND Age &lt;= 1983, Age &gt;= 1983 AND Age &lt;= 1984, Age &gt;= 1984 AND Age &lt;= 1985, Age &gt;= 1985 AND Age &lt;= 1986, Age &gt;= 1986 AND Age &lt;= 1987, Age &gt;= 1987 AND Age &lt;= 1988, Age &gt;= 1988 AND Age &lt;= 1989, Age &gt;= 1989 AND Age &lt;= 1990, Age &gt;= 1990 AND Age &lt;= 1991, Age &gt;= 1991 AND Age &lt;= 1992, Age &gt;= 1992 AND Age &lt;= 1993, Age &gt;= 1993 AND Age &lt;= 1994, Age &gt;= 1994 AND Age &lt;= 1995, Age &gt;= 1995 AND Age &lt;= 1996, Age &gt;= 1996 AND Age &lt;= 1997, Age &gt;= 1997 AND Age &lt;= 1998, Age &gt;= 1998 AND Age &lt;= 1999, Age &gt;= 1999 AND Age &lt;= 2000, Age &gt;= 2000 AND Age &lt;= 2001, Age &gt;= 2001 AND Age &lt;= 2002, Age &gt;= 2002 AND Age &lt;= 2003, Age &gt;= 2003 AND Age &lt;= 2004, Age &gt;= 2004 AND Age &lt;= 2005, Age &gt;= 2005 AND Age &lt;= 2006, Age &gt;= 2006 AND Age &lt;= 2007, Age &gt;= 2007 AND Age &lt;= 2008, Age &gt;= 2008 AND Age &lt;= 2009, Age &gt;= 2009 AND Age &lt;= 2010, Age &gt;= 2010 AND Age &lt;= 2011, Age &gt;= 2011 AND Age &lt;= 2012, Age &gt;= 2012 AND Age &lt;= 2013, Age &gt;= 2013 AND Age &lt;= 2014, Age &gt;= 2014 AND Age &lt;= 2015, Age &gt;= 2015 AND Age &lt;= 2016, Age &gt;= 2016 AND Age &lt;= 2017, Age &gt;= 2017 AND Age &lt;= 2018, Age &gt;= 2018 AND Age &lt;= 2019, Age &gt;= 2019 AND Age &lt;= 2020, Age &gt;= 2020 AND Age &lt;= 2021, Age &gt;= 2021 AND Age &lt;= 2022, Age &gt;= 2022 AND Age &lt;= 2023, Age &gt;= 2023 AND Age &lt;= 2024, Age &gt;= 2024 AND Age &lt;= 2025, Age &gt;= 2025 AND Age &lt;= 2026, Age &gt;= 2026 AND Age &lt;= 2027, Age &gt;= 2027 AND Age &lt;= 2028, Age &gt;= 2028 AND Age &lt;= 2029, Age &gt;= 2029 AND Age &lt;= 2030, Age &gt;= 2030 AND Age &lt;= 2031, Age &gt;= 2031 AND Age &lt;= 2032, Age &gt;= 2032 AND Age &lt;= 2033, Age &gt;= 2033 AND Age &lt;= 2034, Age &gt;= 2034 AND Age &lt;= 2035, Age &gt;= 2035 AND Age &lt;= 2036, Age &gt;= 2036 AND Age &lt;= 2037, Age &gt;= 2037 AND Age &lt;= 2038, Age &gt;= 2038 AND Age &lt;= 2039, Age &gt;= 2039 AND Age &lt;= 2040, Age &gt;= 2040 AND Age &lt;= 2041, Age &gt;= 2041 AND Age &lt;= 2042, Age &gt;= 2042 AND Age &lt;= 2043, Age &gt;= 2043 AND Age &lt;= 2044, Age &gt;= 2044 AND Age &lt;= 2045, Age &gt;= 2045 AND Age &lt;= 2046, Age &gt;= 2046 AND Age &lt;= 2047, Age &gt;= 2047 AND Age &lt;= 2048) " name="RavenDB Queries can parse -  from index &apos;Index&apos; where Active = $p0 select facet(Category), facet(Age &gt;= 0 AND Age &lt;= 1, Age &gt;= 1 AND Age &lt;= 2, Age &gt;= 2 AND Age &lt;= 3, Age &gt;= 3 AND Age &lt;= 4, Age &gt;= 4 AND Age &lt;= 5, Age &gt;= 5 AND Age &lt;= 6, Age &gt;= 6 AND Age &lt;= 7, Age &gt;= 7 AND Age &lt;= 8, Age &gt;= 8 AND Age &lt;= 9, Age &gt;= 9 AND Age &lt;= 10, Age &gt;= 10 AND Age &lt;= 11, Age &gt;= 11 AND Age &lt;= 12, Age &gt;= 12 AND Age &lt;= 13, Age &gt;= 13 AND Age &lt;= 14, Age &gt;= 14 AND Age &lt;= 15, Age &gt;= 15 AND Age &lt;= 16, Age &gt;= 16 AND Age &lt;= 17, Age &gt;= 17 AND Age &lt;= 18, Age &gt;= 18 AND Age &lt;= 19, Age &gt;= 19 AND Age &lt;= 20, Age &gt;= 20 AND Age &lt;= 21, Age &gt;= 21 AND Age &lt;= 22, Age &gt;= 22 AND Age &lt;= 23, Age &gt;= 23 AND Age &lt;= 24, Age &gt;= 24 AND Age &lt;= 25, Age &gt;= 25 AND Age &lt;= 26, Age &gt;= 26 AND Age &lt;= 27, Age &gt;= 27 AND Age &lt;= 28, Age &gt;= 28 AND Age &lt;= 29, Age &gt;= 29 AND Age &lt;= 30, Age &gt;= 30 AND Age &lt;= 31, Age &gt;= 31 AND Age &lt;= 32, Age &gt;= 32 AND Age &lt;= 33, Age &gt;= 33 AND Age &lt;= 34, Age &gt;= 34 AND Age &lt;= 35, Age &gt;= 35 AND Age &lt;= 36, Age &gt;= 36 AND Age &lt;= 37, Age &gt;= 37 AND Age &lt;= 38, Age &gt;= 38 AND Age &lt;= 39, Age &gt;= 39 AND Age &lt;= 40, Age &gt;= 40 AND Age &lt;= 41, Age &gt;= 41 AND Age &lt;= 42, Age &gt;= 42 AND Age &lt;= 43, Age &gt;= 43 AND Age &lt;= 44, Age &gt;= 44 AND Age &lt;= 45, Age &gt;= 45 AND Age &lt;= 46, Age &gt;= 46 AND Age &lt;= 47, Age &gt;= 47 AND Age &lt;= 48, Age &gt;= 48 AND Age &lt;= 49, Age &gt;= 49 AND Age &lt;= 50, Age &gt;= 50 AND Age &lt;= 51, Age &gt;= 51 AND Age &lt;= 52, Age &gt;= 52 AND Age &lt;= 53, Age &gt;= 53 AND Age &lt;= 54, Age &gt;= 54 AND Age &lt;= 55, Age &gt;= 55 AND Age &lt;= 56, Age &gt;= 56 AND Age &lt;= 57, Age &gt;= 57 AND Age &lt;= 58, Age &gt;= 58 AND Age &lt;= 59, Age &gt;= 59 AND Age &lt;= 60, Age &gt;= 60 AND Age &lt;= 61, Age &gt;= 61 AND Age &lt;= 62, Age &gt;= 62 AND Age &lt;= 63, Age &gt;= 63 AND Age &lt;= 64, Age &gt;= 64 AND Age &lt;= 65, Age &gt;= 65 AND Age &lt;= 66, Age &gt;= 66 AND Age &lt;= 67, Age &gt;= 67 AND Age &lt;= 68, Age &gt;= 68 AND Age &lt;= 69, Age &gt;= 69 AND Age &lt;= 70, Age &gt;= 70 AND Age &lt;= 71, Age &gt;= 71 AND Age &lt;= 72, Age &gt;= 72 AND Age &lt;= 73, Age &gt;= 73 AND Age &lt;= 74, Age &gt;= 74 AND Age &lt;= 75, Age &gt;= 75 AND Age &lt;= 76, Age &gt;= 76 AND Age &lt;= 77, Age &gt;= 77 AND Age &lt;= 78, Age &gt;= 78 AND Age &lt;= 79, Age &gt;= 79 AND Age &lt;= 80, Age &gt;= 80 AND Age &lt;= 81, Age &gt;= 81 AND Age &lt;= 82, Age &gt;= 82 AND Age &lt;= 83, Age &gt;= 83 AND Age &lt;= 84, Age &gt;= 84 AND Age &lt;= 85, Age &gt;= 85 AND Age &lt;= 86, Age &gt;= 86 AND Age &lt;= 87, Age &gt;= 87 AND Age &lt;= 88, Age &gt;= 88 AND Age &lt;= 89, Age &gt;= 89 AND Age &lt;= 90, Age &gt;= 90 AND Age &lt;= 91, Age &gt;= 91 AND Age &lt;= 92, Age &gt;= 92 AND Age &lt;= 93, Age &gt;= 93 AND Age &lt;= 94, Age &gt;= 94 AND Age &lt;= 95, Age &gt;= 95 AND Age &lt;= 96, Age &gt;= 96 AND Age &lt;= 97, Age &gt;= 97 AND Age &lt;= 98, Age &gt;= 98 AND Age &lt;= 99, Age &gt;= 99 AND Age &lt;= 100, Age &gt;= 100 AND Age &lt;= 101, Age &gt;= 101 AND Age &lt;= 102, Age &gt;= 102 AND Age &lt;= 103, Age &gt;= 103 AND Age &lt;= 104, Age &gt;= 104 AND Age &lt;= 105, Age &gt;= 105 AND Age &lt;= 106, Age &gt;= 106 AND Age &lt;= 107, Age &gt;= 107 AND Age &lt;= 108, Age &gt;= 108 AND Age &lt;= 109, Age &gt;= 109 AND Age &lt;= 110, Age &gt;= 110 AND Age &lt;= 111, Age &gt;= 111 AND Age &lt;= 112, Age &gt;= 112 AND Age &lt;= 113, Age &gt;= 113 AND Age &lt;= 114, Age &gt;= 114 AND Age &lt;= 115, Age &gt;= 115 AND Age &lt;= 116, Age &gt;= 116 AND Age &lt;= 117, Age &gt;= 117 AND Age &lt;= 118, Age &gt;= 118 AND Age &lt;= 119, Age &gt;= 119 AND Age &lt;= 120, Age &gt;= 120 AND Age &lt;= 121, Age &gt;= 121 AND Age &lt;= 122, Age &gt;= 122 AND Age &lt;= 123, Age &gt;= 123 AND Age &lt;= 124, Age &gt;= 124 AND Age &lt;= 125, Age &gt;= 125 AND Age &lt;= 126, Age &gt;= 126 AND Age &lt;= 127, Age &gt;= 127 AND Age &lt;= 128, Age &gt;= 128 AND Age &lt;= 129, Age &gt;= 129 AND Age &lt;= 130, Age &gt;= 130 AND Age &lt;= 131, Age &gt;= 131 AND Age &lt;= 132, Age &gt;= 132 AND Age &lt;= 133, Age &gt;= 133 AND Age &lt;= 134, Age &gt;= 134 AND Age &lt;= 135, Age &gt;= 135 AND Age &lt;= 136, Age &gt;= 136 AND Age &lt;= 137, Age &gt;= 137 AND Age &lt;= 138, Age &gt;= 138 AND Age &lt;= 139, Age &gt;= 139 AND Age &lt;= 140, Age &gt;= 140 AND Age &lt;= 141, Age &gt;= 141 AND Age &lt;= 142, Age &gt;= 142 AND Age &lt;= 143, Age &gt;= 143 AND Age &lt;= 144, Age &gt;= 144 AND Age &lt;= 145, Age &gt;= 145 AND Age &lt;= 146, Age &gt;= 146 AND Age &lt;= 147, Age &gt;= 147 AND Age &lt;= 148, Age &gt;= 148 AND Age &lt;= 149, Age &gt;= 149 AND Age &lt;= 150, Age &gt;= 150 AND Age &lt;= 151, Age &gt;= 151 AND Age &lt;= 152, Age &gt;= 152 AND Age &lt;= 153, Age &gt;= 153 AND Age &lt;= 154, Age &gt;= 154 AND Age &lt;= 155, Age &gt;= 155 AND Age &lt;= 156, Age &gt;= 156 AND Age &lt;= 157, Age &gt;= 157 AND Age &lt;= 158, Age &gt;= 158 AND Age &lt;= 159, Age &gt;= 159 AND Age &lt;= 160, Age &gt;= 160 AND Age &lt;= 161, Age &gt;= 161 AND Age &lt;= 162, Age &gt;= 162 AND Age &lt;= 163, Age &gt;= 163 AND Age &lt;= 164, Age &gt;= 164 AND Age &lt;= 165, Age &gt;= 165 AND Age &lt;= 166, Age &gt;= 166 AND Age &lt;= 167, Age &gt;= 167 AND Age &lt;= 168, Age &gt;= 168 AND Age &lt;= 169, Age &gt;= 169 AND Age &lt;= 170, Age &gt;= 170 AND Age &lt;= 171, Age &gt;= 171 AND Age &lt;= 172, Age &gt;= 172 AND Age &lt;= 173, Age &gt;= 173 AND Age &lt;= 174, Age &gt;= 174 AND Age &lt;= 175, Age &gt;= 175 AND Age &lt;= 176, Age &gt;= 176 AND Age &lt;= 177, Age &gt;= 177 AND Age &lt;= 178, Age &gt;= 178 AND Age &lt;= 179, Age &gt;= 179 AND Age &lt;= 180, Age &gt;= 180 AND Age &lt;= 181, Age &gt;= 181 AND Age &lt;= 182, Age &gt;= 182 AND Age &lt;= 183, Age &gt;= 183 AND Age &lt;= 184, Age &gt;= 184 AND Age &lt;= 185, Age &gt;= 185 AND Age &lt;= 186, Age &gt;= 186 AND Age &lt;= 187, Age &gt;= 187 AND Age &lt;= 188, Age &gt;= 188 AND Age &lt;= 189, Age &gt;= 189 AND Age &lt;= 190, Age &gt;= 190 AND Age &lt;= 191, Age &gt;= 191 AND Age &lt;= 192, Age &gt;= 192 AND Age &lt;= 193, Age &gt;= 193 AND Age &lt;= 194, Age &gt;= 194 AND Age &lt;= 195, Age &gt;= 195 AND Age &lt;= 196, Age &gt;= 196 AND Age &lt;= 197, Age &gt;= 197 AND Age &lt;= 198, Age &gt;= 198 AND Age &lt;= 199, Age &gt;= 199 AND Age &lt;= 200, Age &gt;= 200 AND Age &lt;= 201, Age &gt;= 201 AND Age &lt;= 202, Age &gt;= 202 AND Age &lt;= 203, Age &gt;= 203 AND Age &lt;= 204, Age &gt;= 204 AND Age &lt;= 205, Age &gt;= 205 AND Age &lt;= 206, Age &gt;= 206 AND Age &lt;= 207, Age &gt;= 207 AND Age &lt;= 208, Age &gt;= 208 AND Age &lt;= 209, Age &gt;= 209 AND Age &lt;= 210, Age &gt;= 210 AND Age &lt;= 211, Age &gt;= 211 AND Age &lt;= 212, Age &gt;= 212 AND Age &lt;= 213, Age &gt;= 213 AND Age &lt;= 214, Age &gt;= 214 AND Age &lt;= 215, Age &gt;= 215 AND Age &lt;= 216, Age &gt;= 216 AND Age &lt;= 217, Age &gt;= 217 AND Age &lt;= 218, Age &gt;= 218 AND Age &lt;= 219, Age &gt;= 219 AND Age &lt;= 220, Age &gt;= 220 AND Age &lt;= 221, Age &gt;= 221 AND Age &lt;= 222, Age &gt;= 222 AND Age &lt;= 223, Age &gt;= 223 AND Age &lt;= 224, Age &gt;= 224 AND Age &lt;= 225, Age &gt;= 225 AND Age &lt;= 226, Age &gt;= 226 AND Age &lt;= 227, Age &gt;= 227 AND Age &lt;= 228, Age &gt;= 228 AND Age &lt;= 229, Age &gt;= 229 AND Age &lt;= 230, Age &gt;= 230 AND Age &lt;= 231, Age &gt;= 231 AND Age &lt;= 232, Age &gt;= 232 AND Age &lt;= 233, Age &gt;= 233 AND Age &lt;= 234, Age &gt;= 234 AND Age &lt;= 235, Age &gt;= 235 AND Age &lt;= 236, Age &gt;= 236 AND Age &lt;= 237, Age &gt;= 237 AND Age &lt;= 238, Age &gt;= 238 AND Age &lt;= 239, Age &gt;= 239 AND Age &lt;= 240, Age &gt;= 240 AND Age &lt;= 241, Age &gt;= 241 AND Age &lt;= 242, Age &gt;= 242 AND Age &lt;= 243, Age &gt;= 243 AND Age &lt;= 244, Age &gt;= 244 AND Age &lt;= 245, Age &gt;= 245 AND Age &lt;= 246, Age &gt;= 246 AND Age &lt;= 247, Age &gt;= 247 AND Age &lt;= 248, Age &gt;= 248 AND Age &lt;= 249, Age &gt;= 249 AND Age &lt;= 250, Age &gt;= 250 AND Age &lt;= 251, Age &gt;= 251 AND Age &lt;= 252, Age &gt;= 252 AND Age &lt;= 253, Age &gt;= 253 AND Age &lt;= 254, Age &gt;= 254 AND Age &lt;= 255, Age &gt;= 255 AND Age &lt;= 256, Age &gt;= 256 AND Age &lt;= 257, Age &gt;= 257 AND Age &lt;= 258, Age &gt;= 258 AND Age &lt;= 259, Age &gt;= 259 AND Age &lt;= 260, Age &gt;= 260 AND Age &lt;= 261, Age &gt;= 261 AND Age &lt;= 262, Age &gt;= 262 AND Age &lt;= 263, Age &gt;= 263 AND Age &lt;= 264, Age &gt;= 264 AND Age &lt;= 265, Age &gt;= 265 AND Age &lt;= 266, Age &gt;= 266 AND Age &lt;= 267, Age &gt;= 267 AND Age &lt;= 268, Age &gt;= 268 AND Age &lt;= 269, Age &gt;= 269 AND Age &lt;= 270, Age &gt;= 270 AND Age &lt;= 271, Age &gt;= 271 AND Age &lt;= 272, Age &gt;= 272 AND Age &lt;= 273, Age &gt;= 273 AND Age &lt;= 274, Age &gt;= 274 AND Age &lt;= 275, Age &gt;= 275 AND Age &lt;= 276, Age &gt;= 276 AND Age &lt;= 277, Age &gt;= 277 AND Age &lt;= 278, Age &gt;= 278 AND Age &lt;= 279, Age &gt;= 279 AND Age &lt;= 280, Age &gt;= 280 AND Age &lt;= 281, Age &gt;= 281 AND Age &lt;= 282, Age &gt;= 282 AND Age &lt;= 283, Age &gt;= 283 AND Age &lt;= 284, Age &gt;= 284 AND Age &lt;= 285, Age &gt;= 285 AND Age &lt;= 286, Age &gt;= 286 AND Age &lt;= 287, Age &gt;= 287 AND Age &lt;= 288, Age &gt;= 288 AND Age &lt;= 289, Age &gt;= 289 AND Age &lt;= 290, Age &gt;= 290 AND Age &lt;= 291, Age &gt;= 291 AND Age &lt;= 292, Age &gt;= 292 AND Age &lt;= 293, Age &gt;= 293 AND Age &lt;= 294, Age &gt;= 294 AND Age &lt;= 295, Age &gt;= 295 AND Age &lt;= 296, Age &gt;= 296 AND Age &lt;= 297, Age &gt;= 297 AND Age &lt;= 298, Age &gt;= 298 AND Age &lt;= 299, Age &gt;= 299 AND Age &lt;= 300, Age &gt;= 300 AND Age &lt;= 301, Age &gt;= 301 AND Age &lt;= 302, Age &gt;= 302 AND Age &lt;= 303, Age &gt;= 303 AND Age &lt;= 304, Age &gt;= 304 AND Age &lt;= 305, Age &gt;= 305 AND Age &lt;= 306, Age &gt;= 306 AND Age &lt;= 307, Age &gt;= 307 AND Age &lt;= 308, Age &gt;= 308 AND Age &lt;= 309, Age &gt;= 309 AND Age &lt;= 310, Age &gt;= 310 AND Age &lt;= 311, Age &gt;= 311 AND Age &lt;= 312, Age &gt;= 312 AND Age &lt;= 313, Age &gt;= 313 AND Age &lt;= 314, Age &gt;= 314 AND Age &lt;= 315, Age &gt;= 315 AND Age &lt;= 316, Age &gt;= 316 AND Age &lt;= 317, Age &gt;= 317 AND Age &lt;= 318, Age &gt;= 318 AND Age &lt;= 319, Age &gt;= 319 AND Age &lt;= 320, Age &gt;= 320 AND Age &lt;= 321, Age &gt;= 321 AND Age &lt;= 322, Age &gt;= 322 AND Age &lt;= 323, Age &gt;= 323 AND Age &lt;= 324, Age &gt;= 324 AND Age &lt;= 325, Age &gt;= 325 AND Age &lt;= 326, Age &gt;= 326 AND Age &lt;= 327, Age &gt;= 327 AND Age &lt;= 328, Age &gt;= 328 AND Age &lt;= 329, Age &gt;= 329 AND Age &lt;= 330, Age &gt;= 330 AND Age &lt;= 331, Age &gt;= 331 AND Age &lt;= 332, Age &gt;= 332 AND Age &lt;= 333, Age &gt;= 333 AND Age &lt;= 334, Age &gt;= 334 AND Age &lt;= 335, Age &gt;= 335 AND Age &lt;= 336, Age &gt;= 336 AND Age &lt;= 337, Age &gt;= 337 AND Age &lt;= 338, Age &gt;= 338 AND Age &lt;= 339, Age &gt;= 339 AND Age &lt;= 340, Age &gt;= 340 AND Age &lt;= 341, Age &gt;= 341 AND Age &lt;= 342, Age &gt;= 342 AND Age &lt;= 343, Age &gt;= 343 AND Age &lt;= 344, Age &gt;= 344 AND Age &lt;= 345, Age &gt;= 345 AND Age &lt;= 346, Age &gt;= 346 AND Age &lt;= 347, Age &gt;= 347 AND Age &lt;= 348, Age &gt;= 348 AND Age &lt;= 349, Age &gt;= 349 AND Age &lt;= 350, Age &gt;= 350 AND Age &lt;= 351, Age &gt;= 351 AND Age &lt;= 352, Age &gt;= 352 AND Age &lt;= 353, Age &gt;= 353 AND Age &lt;= 354, Age &gt;= 354 AND Age &lt;= 355, Age &gt;= 355 AND Age &lt;= 356, Age &gt;= 356 AND Age &lt;= 357, Age &gt;= 357 AND Age &lt;= 358, Age &gt;= 358 AND Age &lt;= 359, Age &gt;= 359 AND Age &lt;= 360, Age &gt;= 360 AND Age &lt;= 361, Age &gt;= 361 AND Age &lt;= 362, Age &gt;= 362 AND Age &lt;= 363, Age &gt;= 363 AND Age &lt;= 364, Age &gt;= 364 AND Age &lt;= 365, Age &gt;= 365 AND Age &lt;= 366, Age &gt;= 366 AND Age &lt;= 367, Age &gt;= 367 AND Age &lt;= 368, Age &gt;= 368 AND Age &lt;= 369, Age &gt;= 369 AND Age &lt;= 370, Age &gt;= 370 AND Age &lt;= 371, Age &gt;= 371 AND Age &lt;= 372, Age &gt;= 372 AND Age &lt;= 373, Age &gt;= 373 AND Age &lt;= 374, Age &gt;= 374 AND Age &lt;= 375, Age &gt;= 375 AND Age &lt;= 376, Age &gt;= 376 AND Age &lt;= 377, Age &gt;= 377 AND Age &lt;= 378, Age &gt;= 378 AND Age &lt;= 379, Age &gt;= 379 AND Age &lt;= 380, Age &gt;= 380 AND Age &lt;= 381, Age &gt;= 381 AND Age &lt;= 382, Age &gt;= 382 AND Age &lt;= 383, Age &gt;= 383 AND Age &lt;= 384, Age &gt;= 384 AND Age &lt;= 385, Age &gt;= 385 AND Age &lt;= 386, Age &gt;= 386 AND Age &lt;= 387, Age &gt;= 387 AND Age &lt;= 388, Age &gt;= 388 AND Age &lt;= 389, Age &gt;= 389 AND Age &lt;= 390, Age &gt;= 390 AND Age &lt;= 391, Age &gt;= 391 AND Age &lt;= 392, Age &gt;= 392 AND Age &lt;= 393, Age &gt;= 393 AND Age &lt;= 394, Age &gt;= 394 AND Age &lt;= 395, Age &gt;= 395 AND Age &lt;= 396, Age &gt;= 396 AND Age &lt;= 397, Age &gt;= 397 AND Age &lt;= 398, Age &gt;= 398 AND Age &lt;= 399, Age &gt;= 399 AND Age &lt;= 400, Age &gt;= 400 AND Age &lt;= 401, Age &gt;= 401 AND Age &lt;= 402, Age &gt;= 402 AND Age &lt;= 403, Age &gt;= 403 AND Age &lt;= 404, Age &gt;= 404 AND Age &lt;= 405, Age &gt;= 405 AND Age &lt;= 406, Age &gt;= 406 AND Age &lt;= 407, Age &gt;= 407 AND Age &lt;= 408, Age &gt;= 408 AND Age &lt;= 409, Age &gt;= 409 AND Age &lt;= 410, Age &gt;= 410 AND Age &lt;= 411, Age &gt;= 411 AND Age &lt;= 412, Age &gt;= 412 AND Age &lt;= 413, Age &gt;= 413 AND Age &lt;= 414, Age &gt;= 414 AND Age &lt;= 415, Age &gt;= 415 AND Age &lt;= 416, Age &gt;= 416 AND Age &lt;= 417, Age &gt;= 417 AND Age &lt;= 418, Age &gt;= 418 AND Age &lt;= 419, Age &gt;= 419 AND Age &lt;= 420, Age &gt;= 420 AND Age &lt;= 421, Age &gt;= 421 AND Age &lt;= 422, Age &gt;= 422 AND Age &lt;= 423, Age &gt;= 423 AND Age &lt;= 424, Age &gt;= 424 AND Age &lt;= 425, Age &gt;= 425 AND Age &lt;= 426, Age &gt;= 426 AND Age &lt;= 427, Age &gt;= 427 AND Age &lt;= 428, Age &gt;= 428 AND Age &lt;= 429, Age &gt;= 429 AND Age &lt;= 430, Age &gt;= 430 AND Age &lt;= 431, Age &gt;= 431 AND Age &lt;= 432, Age &gt;= 432 AND Age &lt;= 433, Age &gt;= 433 AND Age &lt;= 434, Age &gt;= 434 AND Age &lt;= 435, Age &gt;= 435 AND Age &lt;= 436, Age &gt;= 436 AND Age &lt;= 437, Age &gt;= 437 AND Age &lt;= 438, Age &gt;= 438 AND Age &lt;= 439, Age &gt;= 439 AND Age &lt;= 440, Age &gt;= 440 AND Age &lt;= 441, Age &gt;= 441 AND Age &lt;= 442, Age &gt;= 442 AND Age &lt;= 443, Age &gt;= 443 AND Age &lt;= 444, Age &gt;= 444 AND Age &lt;= 445, Age &gt;= 445 AND Age &lt;= 446, Age &gt;= 446 AND Age &lt;= 447, Age &gt;= 447 AND Age &lt;= 448, Age &gt;= 448 AND Age &lt;= 449, Age &gt;= 449 AND Age &lt;= 450, Age &gt;= 450 AND Age &lt;= 451, Age &gt;= 451 AND Age &lt;= 452, Age &gt;= 452 AND Age &lt;= 453, Age &gt;= 453 AND Age &lt;= 454, Age &gt;= 454 AND Age &lt;= 455, Age &gt;= 455 AND Age &lt;= 456, Age &gt;= 456 AND Age &lt;= 457, Age &gt;= 457 AND Age &lt;= 458, Age &gt;= 458 AND Age &lt;= 459, Age &gt;= 459 AND Age &lt;= 460, Age &gt;= 460 AND Age &lt;= 461, Age &gt;= 461 AND Age &lt;= 462, Age &gt;= 462 AND Age &lt;= 463, Age &gt;= 463 AND Age &lt;= 464, Age &gt;= 464 AND Age &lt;= 465, Age &gt;= 465 AND Age &lt;= 466, Age &gt;= 466 AND Age &lt;= 467, Age &gt;= 467 AND Age &lt;= 468, Age &gt;= 468 AND Age &lt;= 469, Age &gt;= 469 AND Age &lt;= 470, Age &gt;= 470 AND Age &lt;= 471, Age &gt;= 471 AND Age &lt;= 472, Age &gt;= 472 AND Age &lt;= 473, Age &gt;= 473 AND Age &lt;= 474, Age &gt;= 474 AND Age &lt;= 475, Age &gt;= 475 AND Age &lt;= 476, Age &gt;= 476 AND Age &lt;= 477, Age &gt;= 477 AND Age &lt;= 478, Age &gt;= 478 AND Age &lt;= 479, Age &gt;= 479 AND Age &lt;= 480, Age &gt;= 480 AND Age &lt;= 481, Age &gt;= 481 AND Age &lt;= 482, Age &gt;= 482 AND Age &lt;= 483, Age &gt;= 483 AND Age &lt;= 484, Age &gt;= 484 AND Age &lt;= 485, Age &gt;= 485 AND Age &lt;= 486, Age &gt;= 486 AND Age &lt;= 487, Age &gt;= 487 AND Age &lt;= 488, Age &gt;= 488 AND Age &lt;= 489, Age &gt;= 489 AND Age &lt;= 490, Age &gt;= 490 AND Age &lt;= 491, Age &gt;= 491 AND Age &lt;= 492, Age &gt;= 492 AND Age &lt;= 493, Age &gt;= 493 AND Age &lt;= 494, Age &gt;= 494 AND Age &lt;= 495, Age &gt;= 495 AND Age &lt;= 496, Age &gt;= 496 AND Age &lt;= 497, Age &gt;= 497 AND Age &lt;= 498, Age &gt;= 498 AND Age &lt;= 499, Age &gt;= 499 AND Age &lt;= 500, Age &gt;= 500 AND Age &lt;= 501, Age &gt;= 501 AND Age &lt;= 502, Age &gt;= 502 AND Age &lt;= 503, Age &gt;= 503 AND Age &lt;= 504, Age &gt;= 504 AND Age &lt;= 505, Age &gt;= 505 AND Age &lt;= 506, Age &gt;= 506 AND Age &lt;= 507, Age &gt;= 507 AND Age &lt;= 508, Age &gt;= 508 AND Age &lt;= 509, Age &gt;= 509 AND Age &lt;= 510, Age &gt;= 510 AND Age &lt;= 511, Age &gt;= 511 AND Age &lt;= 512, Age &gt;= 512 AND Age &lt;= 513, Age &gt;= 513 AND Age &lt;= 514, Age &gt;= 514 AND Age &lt;= 515, Age &gt;= 515 AND Age &lt;= 516, Age &gt;= 516 AND Age &lt;= 517, Age &gt;= 517 AND Age &lt;= 518, Age &gt;= 518 AND Age &lt;= 519, Age &gt;= 519 AND Age &lt;= 520, Age &gt;= 520 AND Age &lt;= 521, Age &gt;= 521 AND Age &lt;= 522, Age &gt;= 522 AND Age &lt;= 523, Age &gt;= 523 AND Age &lt;= 524, Age &gt;= 524 AND Age &lt;= 525, Age &gt;= 525 AND Age &lt;= 526, Age &gt;= 526 AND Age &lt;= 527, Age &gt;= 527 AND Age &lt;= 528, Age &gt;= 528 AND Age &lt;= 529, Age &gt;= 529 AND Age &lt;= 530, Age &gt;= 530 AND Age &lt;= 531, Age &gt;= 531 AND Age &lt;= 532, Age &gt;= 532 AND Age &lt;= 533, Age &gt;= 533 AND Age &lt;= 534, Age &gt;= 534 AND Age &lt;= 535, Age &gt;= 535 AND Age &lt;= 536, Age &gt;= 536 AND Age &lt;= 537, Age &gt;= 537 AND Age &lt;= 538, Age &gt;= 538 AND Age &lt;= 539, Age &gt;= 539 AND Age &lt;= 540, Age &gt;= 540 AND Age &lt;= 541, Age &gt;= 541 AND Age &lt;= 542, Age &gt;= 542 AND Age &lt;= 543, Age &gt;= 543 AND Age &lt;= 544, Age &gt;= 544 AND Age &lt;= 545, Age &gt;= 545 AND Age &lt;= 546, Age &gt;= 546 AND Age &lt;= 547, Age &gt;= 547 AND Age &lt;= 548, Age &gt;= 548 AND Age &lt;= 549, Age &gt;= 549 AND Age &lt;= 550, Age &gt;= 550 AND Age &lt;= 551, Age &gt;= 551 AND Age &lt;= 552, Age &gt;= 552 AND Age &lt;= 553, Age &gt;= 553 AND Age &lt;= 554, Age &gt;= 554 AND Age &lt;= 555, Age &gt;= 555 AND Age &lt;= 556, Age &gt;= 556 AND Age &lt;= 557, Age &gt;= 557 AND Age &lt;= 558, Age &gt;= 558 AND Age &lt;= 559, Age &gt;= 559 AND Age &lt;= 560, Age &gt;= 560 AND Age &lt;= 561, Age &gt;= 561 AND Age &lt;= 562, Age &gt;= 562 AND Age &lt;= 563, Age &gt;= 563 AND Age &lt;= 564, Age &gt;= 564 AND Age &lt;= 565, Age &gt;= 565 AND Age &lt;= 566, Age &gt;= 566 AND Age &lt;= 567, Age &gt;= 567 AND Age &lt;= 568, Age &gt;= 568 AND Age &lt;= 569, Age &gt;= 569 AND Age &lt;= 570, Age &gt;= 570 AND Age &lt;= 571, Age &gt;= 571 AND Age &lt;= 572, Age &gt;= 572 AND Age &lt;= 573, Age &gt;= 573 AND Age &lt;= 574, Age &gt;= 574 AND Age &lt;= 575, Age &gt;= 575 AND Age &lt;= 576, Age &gt;= 576 AND Age &lt;= 577, Age &gt;= 577 AND Age &lt;= 578, Age &gt;= 578 AND Age &lt;= 579, Age &gt;= 579 AND Age &lt;= 580, Age &gt;= 580 AND Age &lt;= 581, Age &gt;= 581 AND Age &lt;= 582, Age &gt;= 582 AND Age &lt;= 583, Age &gt;= 583 AND Age &lt;= 584, Age &gt;= 584 AND Age &lt;= 585, Age &gt;= 585 AND Age &lt;= 586, Age &gt;= 586 AND Age &lt;= 587, Age &gt;= 587 AND Age &lt;= 588, Age &gt;= 588 AND Age &lt;= 589, Age &gt;= 589 AND Age &lt;= 590, Age &gt;= 590 AND Age &lt;= 591, Age &gt;= 591 AND Age &lt;= 592, Age &gt;= 592 AND Age &lt;= 593, Age &gt;= 593 AND Age &lt;= 594, Age &gt;= 594 AND Age &lt;= 595, Age &gt;= 595 AND Age &lt;= 596, Age &gt;= 596 AND Age &lt;= 597, Age &gt;= 597 AND Age &lt;= 598, Age &gt;= 598 AND Age &lt;= 599, Age &gt;= 599 AND Age &lt;= 600, Age &gt;= 600 AND Age &lt;= 601, Age &gt;= 601 AND Age &lt;= 602, Age &gt;= 602 AND Age &lt;= 603, Age &gt;= 603 AND Age &lt;= 604, Age &gt;= 604 AND Age &lt;= 605, Age &gt;= 605 AND Age &lt;= 606, Age &gt;= 606 AND Age &lt;= 607, Age &gt;= 607 AND Age &lt;= 608, Age &gt;= 608 AND Age &lt;= 609, Age &gt;= 609 AND Age &lt;= 610, Age &gt;= 610 AND Age &lt;= 611, Age &gt;= 611 AND Age &lt;= 612, Age &gt;= 612 AND Age &lt;= 613, Age &gt;= 613 AND Age &lt;= 614, Age &gt;= 614 AND Age &lt;= 615, Age &gt;= 615 AND Age &lt;= 616, Age &gt;= 616 AND Age &lt;= 617, Age &gt;= 617 AND Age &lt;= 618, Age &gt;= 618 AND Age &lt;= 619, Age &gt;= 619 AND Age &lt;= 620, Age &gt;= 620 AND Age &lt;= 621, Age &gt;= 621 AND Age &lt;= 622, Age &gt;= 622 AND Age &lt;= 623, Age &gt;= 623 AND Age &lt;= 624, Age &gt;= 624 AND Age &lt;= 625, Age &gt;= 625 AND Age &lt;= 626, Age &gt;= 626 AND Age &lt;= 627, Age &gt;= 627 AND Age &lt;= 628, Age &gt;= 628 AND Age &lt;= 629, Age &gt;= 629 AND Age &lt;= 630, Age &gt;= 630 AND Age &lt;= 631, Age &gt;= 631 AND Age &lt;= 632, Age &gt;= 632 AND Age &lt;= 633, Age &gt;= 633 AND Age &lt;= 634, Age &gt;= 634 AND Age &lt;= 635, Age &gt;= 635 AND Age &lt;= 636, Age &gt;= 636 AND Age &lt;= 637, Age &gt;= 637 AND Age &lt;= 638, Age &gt;= 638 AND Age &lt;= 639, Age &gt;= 639 AND Age &lt;= 640, Age &gt;= 640 AND Age &lt;= 641, Age &gt;= 641 AND Age &lt;= 642, Age &gt;= 642 AND Age &lt;= 643, Age &gt;= 643 AND Age &lt;= 644, Age &gt;= 644 AND Age &lt;= 645, Age &gt;= 645 AND Age &lt;= 646, Age &gt;= 646 AND Age &lt;= 647, Age &gt;= 647 AND Age &lt;= 648, Age &gt;= 648 AND Age &lt;= 649, Age &gt;= 649 AND Age &lt;= 650, Age &gt;= 650 AND Age &lt;= 651, Age &gt;= 651 AND Age &lt;= 652, Age &gt;= 652 AND Age &lt;= 653, Age &gt;= 653 AND Age &lt;= 654, Age &gt;= 654 AND Age &lt;= 655, Age &gt;= 655 AND Age &lt;= 656, Age &gt;= 656 AND Age &lt;= 657, Age &gt;= 657 AND Age &lt;= 658, Age &gt;= 658 AND Age &lt;= 659, Age &gt;= 659 AND Age &lt;= 660, Age &gt;= 660 AND Age &lt;= 661, Age &gt;= 661 AND Age &lt;= 662, Age &gt;= 662 AND Age &lt;= 663, Age &gt;= 663 AND Age &lt;= 664, Age &gt;= 664 AND Age &lt;= 665, Age &gt;= 665 AND Age &lt;= 666, Age &gt;= 666 AND Age &lt;= 667, Age &gt;= 667 AND Age &lt;= 668, Age &gt;= 668 AND Age &lt;= 669, Age &gt;= 669 AND Age &lt;= 670, Age &gt;= 670 AND Age &lt;= 671, Age &gt;= 671 AND Age &lt;= 672, Age &gt;= 672 AND Age &lt;= 673, Age &gt;= 673 AND Age &lt;= 674, Age &gt;= 674 AND Age &lt;= 675, Age &gt;= 675 AND Age &lt;= 676, Age &gt;= 676 AND Age &lt;= 677, Age &gt;= 677 AND Age &lt;= 678, Age &gt;= 678 AND Age &lt;= 679, Age &gt;= 679 AND Age &lt;= 680, Age &gt;= 680 AND Age &lt;= 681, Age &gt;= 681 AND Age &lt;= 682, Age &gt;= 682 AND Age &lt;= 683, Age &gt;= 683 AND Age &lt;= 684, Age &gt;= 684 AND Age &lt;= 685, Age &gt;= 685 AND Age &lt;= 686, Age &gt;= 686 AND Age &lt;= 687, Age &gt;= 687 AND Age &lt;= 688, Age &gt;= 688 AND Age &lt;= 689, Age &gt;= 689 AND Age &lt;= 690, Age &gt;= 690 AND Age &lt;= 691, Age &gt;= 691 AND Age &lt;= 692, Age &gt;= 692 AND Age &lt;= 693, Age &gt;= 693 AND Age &lt;= 694, Age &gt;= 694 AND Age &lt;= 695, Age &gt;= 695 AND Age &lt;= 696, Age &gt;= 696 AND Age &lt;= 697, Age &gt;= 697 AND Age &lt;= 698, Age &gt;= 698 AND Age &lt;= 699, Age &gt;= 699 AND Age &lt;= 700, Age &gt;= 700 AND Age &lt;= 701, Age &gt;= 701 AND Age &lt;= 702, Age &gt;= 702 AND Age &lt;= 703, Age &gt;= 703 AND Age &lt;= 704, Age &gt;= 704 AND Age &lt;= 705, Age &gt;= 705 AND Age &lt;= 706, Age &gt;= 706 AND Age &lt;= 707, Age &gt;= 707 AND Age &lt;= 708, Age &gt;= 708 AND Age &lt;= 709, Age &gt;= 709 AND Age &lt;= 710, Age &gt;= 710 AND Age &lt;= 711, Age &gt;= 711 AND Age &lt;= 712, Age &gt;= 712 AND Age &lt;= 713, Age &gt;= 713 AND Age &lt;= 714, Age &gt;= 714 AND Age &lt;= 715, Age &gt;= 715 AND Age &lt;= 716, Age &gt;= 716 AND Age &lt;= 717, Age &gt;= 717 AND Age &lt;= 718, Age &gt;= 718 AND Age &lt;= 719, Age &gt;= 719 AND Age &lt;= 720, Age &gt;= 720 AND Age &lt;= 721, Age &gt;= 721 AND Age &lt;= 722, Age &gt;= 722 AND Age &lt;= 723, Age &gt;= 723 AND Age &lt;= 724, Age &gt;= 724 AND Age &lt;= 725, Age &gt;= 725 AND Age &lt;= 726, Age &gt;= 726 AND Age &lt;= 727, Age &gt;= 727 AND Age &lt;= 728, Age &gt;= 728 AND Age &lt;= 729, Age &gt;= 729 AND Age &lt;= 730, Age &gt;= 730 AND Age &lt;= 731, Age &gt;= 731 AND Age &lt;= 732, Age &gt;= 732 AND Age &lt;= 733, Age &gt;= 733 AND Age &lt;= 734, Age &gt;= 734 AND Age &lt;= 735, Age &gt;= 735 AND Age &lt;= 736, Age &gt;= 736 AND Age &lt;= 737, Age &gt;= 737 AND Age &lt;= 738, Age &gt;= 738 AND Age &lt;= 739, Age &gt;= 739 AND Age &lt;= 740, Age &gt;= 740 AND Age &lt;= 741, Age &gt;= 741 AND Age &lt;= 742, Age &gt;= 742 AND Age &lt;= 743, Age &gt;= 743 AND Age &lt;= 744, Age &gt;= 744 AND Age &lt;= 745, Age &gt;= 745 AND Age &lt;= 746, Age &gt;= 746 AND Age &lt;= 747, Age &gt;= 747 AND Age &lt;= 748, Age &gt;= 748 AND Age &lt;= 749, Age &gt;= 749 AND Age &lt;= 750, Age &gt;= 750 AND Age &lt;= 751, Age &gt;= 751 AND Age &lt;= 752, Age &gt;= 752 AND Age &lt;= 753, Age &gt;= 753 AND Age &lt;= 754, Age &gt;= 754 AND Age &lt;= 755, Age &gt;= 755 AND Age &lt;= 756, Age &gt;= 756 AND Age &lt;= 757, Age &gt;= 757 AND Age &lt;= 758, Age &gt;= 758 AND Age &lt;= 759, Age &gt;= 759 AND Age &lt;= 760, Age &gt;= 760 AND Age &lt;= 761, Age &gt;= 761 AND Age &lt;= 762, Age &gt;= 762 AND Age &lt;= 763, Age &gt;= 763 AND Age &lt;= 764, Age &gt;= 764 AND Age &lt;= 765, Age &gt;= 765 AND Age &lt;= 766, Age &gt;= 766 AND Age &lt;= 767, Age &gt;= 767 AND Age &lt;= 768, Age &gt;= 768 AND Age &lt;= 769, Age &gt;= 769 AND Age &lt;= 770, Age &gt;= 770 AND Age &lt;= 771, Age &gt;= 771 AND Age &lt;= 772, Age &gt;= 772 AND Age &lt;= 773, Age &gt;= 773 AND Age &lt;= 774, Age &gt;= 774 AND Age &lt;= 775, Age &gt;= 775 AND Age &lt;= 776, Age &gt;= 776 AND Age &lt;= 777, Age &gt;= 777 AND Age &lt;= 778, Age &gt;= 778 AND Age &lt;= 779, Age &gt;= 779 AND Age &lt;= 780, Age &gt;= 780 AND Age &lt;= 781, Age &gt;= 781 AND Age &lt;= 782, Age &gt;= 782 AND Age &lt;= 783, Age &gt;= 783 AND Age &lt;= 784, Age &gt;= 784 AND Age &lt;= 785, Age &gt;= 785 AND Age &lt;= 786, Age &gt;= 786 AND Age &lt;= 787, Age &gt;= 787 AND Age &lt;= 788, Age &gt;= 788 AND Age &lt;= 789, Age &gt;= 789 AND Age &lt;= 790, Age &gt;= 790 AND Age &lt;= 791, Age &gt;= 791 AND Age &lt;= 792, Age &gt;= 792 AND Age &lt;= 793, Age &gt;= 793 AND Age &lt;= 794, Age &gt;= 794 AND Age &lt;= 795, Age &gt;= 795 AND Age &lt;= 796, Age &gt;= 796 AND Age &lt;= 797, Age &gt;= 797 AND Age &lt;= 798, Age &gt;= 798 AND Age &lt;= 799, Age &gt;= 799 AND Age &lt;= 800, Age &gt;= 800 AND Age &lt;= 801, Age &gt;= 801 AND Age &lt;= 802, Age &gt;= 802 AND Age &lt;= 803, Age &gt;= 803 AND Age &lt;= 804, Age &gt;= 804 AND Age &lt;= 805, Age &gt;= 805 AND Age &lt;= 806, Age &gt;= 806 AND Age &lt;= 807, Age &gt;= 807 AND Age &lt;= 808, Age &gt;= 808 AND Age &lt;= 809, Age &gt;= 809 AND Age &lt;= 810, Age &gt;= 810 AND Age &lt;= 811, Age &gt;= 811 AND Age &lt;= 812, Age &gt;= 812 AND Age &lt;= 813, Age &gt;= 813 AND Age &lt;= 814, Age &gt;= 814 AND Age &lt;= 815, Age &gt;= 815 AND Age &lt;= 816, Age &gt;= 816 AND Age &lt;= 817, Age &gt;= 817 AND Age &lt;= 818, Age &gt;= 818 AND Age &lt;= 819, Age &gt;= 819 AND Age &lt;= 820, Age &gt;= 820 AND Age &lt;= 821, Age &gt;= 821 AND Age &lt;= 822, Age &gt;= 822 AND Age &lt;= 823, Age &gt;= 823 AND Age &lt;= 824, Age &gt;= 824 AND Age &lt;= 825, Age &gt;= 825 AND Age &lt;= 826, Age &gt;= 826 AND Age &lt;= 827, Age &gt;= 827 AND Age &lt;= 828, Age &gt;= 828 AND Age &lt;= 829, Age &gt;= 829 AND Age &lt;= 830, Age &gt;= 830 AND Age &lt;= 831, Age &gt;= 831 AND Age &lt;= 832, Age &gt;= 832 AND Age &lt;= 833, Age &gt;= 833 AND Age &lt;= 834, Age &gt;= 834 AND Age &lt;= 835, Age &gt;= 835 AND Age &lt;= 836, Age &gt;= 836 AND Age &lt;= 837, Age &gt;= 837 AND Age &lt;= 838, Age &gt;= 838 AND Age &lt;= 839, Age &gt;= 839 AND Age &lt;= 840, Age &gt;= 840 AND Age &lt;= 841, Age &gt;= 841 AND Age &lt;= 842, Age &gt;= 842 AND Age &lt;= 843, Age &gt;= 843 AND Age &lt;= 844, Age &gt;= 844 AND Age &lt;= 845, Age &gt;= 845 AND Age &lt;= 846, Age &gt;= 846 AND Age &lt;= 847, Age &gt;= 847 AND Age &lt;= 848, Age &gt;= 848 AND Age &lt;= 849, Age &gt;= 849 AND Age &lt;= 850, Age &gt;= 850 AND Age &lt;= 851, Age &gt;= 851 AND Age &lt;= 852, Age &gt;= 852 AND Age &lt;= 853, Age &gt;= 853 AND Age &lt;= 854, Age &gt;= 854 AND Age &lt;= 855, Age &gt;= 855 AND Age &lt;= 856, Age &gt;= 856 AND Age &lt;= 857, Age &gt;= 857 AND Age &lt;= 858, Age &gt;= 858 AND Age &lt;= 859, Age &gt;= 859 AND Age &lt;= 860, Age &gt;= 860 AND Age &lt;= 861, Age &gt;= 861 AND Age &lt;= 862, Age &gt;= 862 AND Age &lt;= 863, Age &gt;= 863 AND Age &lt;= 864, Age &gt;= 864 AND Age &lt;= 865, Age &gt;= 865 AND Age &lt;= 866, Age &gt;= 866 AND Age &lt;= 867, Age &gt;= 867 AND Age &lt;= 868, Age &gt;= 868 AND Age &lt;= 869, Age &gt;= 869 AND Age &lt;= 870, Age &gt;= 870 AND Age &lt;= 871, Age &gt;= 871 AND Age &lt;= 872, Age &gt;= 872 AND Age &lt;= 873, Age &gt;= 873 AND Age &lt;= 874, Age &gt;= 874 AND Age &lt;= 875, Age &gt;= 875 AND Age &lt;= 876, Age &gt;= 876 AND Age &lt;= 877, Age &gt;= 877 AND Age &lt;= 878, Age &gt;= 878 AND Age &lt;= 879, Age &gt;= 879 AND Age &lt;= 880, Age &gt;= 880 AND Age &lt;= 881, Age &gt;= 881 AND Age &lt;= 882, Age &gt;= 882 AND Age &lt;= 883, Age &gt;= 883 AND Age &lt;= 884, Age &gt;= 884 AND Age &lt;= 885, Age &gt;= 885 AND Age &lt;= 886, Age &gt;= 886 AND Age &lt;= 887, Age &gt;= 887 AND Age &lt;= 888, Age &gt;= 888 AND Age &lt;= 889, Age &gt;= 889 AND Age &lt;= 890, Age &gt;= 890 AND Age &lt;= 891, Age &gt;= 891 AND Age &lt;= 892, Age &gt;= 892 AND Age &lt;= 893, Age &gt;= 893 AND Age &lt;= 894, Age &gt;= 894 AND Age &lt;= 895, Age &gt;= 895 AND Age &lt;= 896, Age &gt;= 896 AND Age &lt;= 897, Age &gt;= 897 AND Age &lt;= 898, Age &gt;= 898 AND Age &lt;= 899, Age &gt;= 899 AND Age &lt;= 900, Age &gt;= 900 AND Age &lt;= 901, Age &gt;= 901 AND Age &lt;= 902, Age &gt;= 902 AND Age &lt;= 903, Age &gt;= 903 AND Age &lt;= 904, Age &gt;= 904 AND Age &lt;= 905, Age &gt;= 905 AND Age &lt;= 906, Age &gt;= 906 AND Age &lt;= 907, Age &gt;= 907 AND Age &lt;= 908, Age &gt;= 908 AND Age &lt;= 909, Age &gt;= 909 AND Age &lt;= 910, Age &gt;= 910 AND Age &lt;= 911, Age &gt;= 911 AND Age &lt;= 912, Age &gt;= 912 AND Age &lt;= 913, Age &gt;= 913 AND Age &lt;= 914, Age &gt;= 914 AND Age &lt;= 915, Age &gt;= 915 AND Age &lt;= 916, Age &gt;= 916 AND Age &lt;= 917, Age &gt;= 917 AND Age &lt;= 918, Age &gt;= 918 AND Age &lt;= 919, Age &gt;= 919 AND Age &lt;= 920, Age &gt;= 920 AND Age &lt;= 921, Age &gt;= 921 AND Age &lt;= 922, Age &gt;= 922 AND Age &lt;= 923, Age &gt;= 923 AND Age &lt;= 924, Age &gt;= 924 AND Age &lt;= 925, Age &gt;= 925 AND Age &lt;= 926, Age &gt;= 926 AND Age &lt;= 927, Age &gt;= 927 AND Age &lt;= 928, Age &gt;= 928 AND Age &lt;= 929, Age &gt;= 929 AND Age &lt;= 930, Age &gt;= 930 AND Age &lt;= 931, Age &gt;= 931 AND Age &lt;= 932, Age &gt;= 932 AND Age &lt;= 933, Age &gt;= 933 AND Age &lt;= 934, Age &gt;= 934 AND Age &lt;= 935, Age &gt;= 935 AND Age &lt;= 936, Age &gt;= 936 AND Age &lt;= 937, Age &gt;= 937 AND Age &lt;= 938, Age &gt;= 938 AND Age &lt;= 939, Age &gt;= 939 AND Age &lt;= 940, Age &gt;= 940 AND Age &lt;= 941, Age &gt;= 941 AND Age &lt;= 942, Age &gt;= 942 AND Age &lt;= 943, Age &gt;= 943 AND Age &lt;= 944, Age &gt;= 944 AND Age &lt;= 945, Age &gt;= 945 AND Age &lt;= 946, Age &gt;= 946 AND Age &lt;= 947, Age &gt;= 947 AND Age &lt;= 948, Age &gt;= 948 AND Age &lt;= 949, Age &gt;= 949 AND Age &lt;= 950, Age &gt;= 950 AND Age &lt;= 951, Age &gt;= 951 AND Age &lt;= 952, Age &gt;= 952 AND Age &lt;= 953, Age &gt;= 953 AND Age &lt;= 954, Age &gt;= 954 AND Age &lt;= 955, Age &gt;= 955 AND Age &lt;= 956, Age &gt;= 956 AND Age &lt;= 957, Age &gt;= 957 AND Age &lt;= 958, Age &gt;= 958 AND Age &lt;= 959, Age &gt;= 959 AND Age &lt;= 960, Age &gt;= 960 AND Age &lt;= 961, Age &gt;= 961 AND Age &lt;= 962, Age &gt;= 962 AND Age &lt;= 963, Age &gt;= 963 AND Age &lt;= 964, Age &gt;= 964 AND Age &lt;= 965, Age &gt;= 965 AND Age &lt;= 966, Age &gt;= 966 AND Age &lt;= 967, Age &gt;= 967 AND Age &lt;= 968, Age &gt;= 968 AND Age &lt;= 969, Age &gt;= 969 AND Age &lt;= 970, Age &gt;= 970 AND Age &lt;= 971, Age &gt;= 971 AND Age &lt;= 972, Age &gt;= 972 AND Age &lt;= 973, Age &gt;= 973 AND Age &lt;= 974, Age &gt;= 974 AND Age &lt;= 975, Age &gt;= 975 AND Age &lt;= 976, Age &gt;= 976 AND Age &lt;= 977, Age &gt;= 977 AND Age &lt;= 978, Age &gt;= 978 AND Age &lt;= 979, Age &gt;= 979 AND Age &lt;= 980, Age &gt;= 980 AND Age &lt;= 981, Age &gt;= 981 AND Age &lt;= 982, Age &gt;= 982 AND Age &lt;= 983, Age &gt;= 983 AND Age &lt;= 984, Age &gt;= 984 AND Age &lt;= 985, Age &gt;= 985 AND Age &lt;= 986, Age &gt;= 986 AND Age &lt;= 987, Age &gt;= 987 AND Age &lt;= 988, Age &gt;= 988 AND Age &lt;= 989, Age &gt;= 989 AND Age &lt;= 990, Age &gt;= 990 AND Age &lt;= 991, Age &gt;= 991 AND Age &lt;= 992, Age &gt;= 992 AND Age &lt;= 993, Age &gt;= 993 AND Age &lt;= 994, Age &gt;= 994 AND Age &lt;= 995, Age &gt;= 995 AND Age &lt;= 996, Age &gt;= 996 AND Age &lt;= 997, Age &gt;= 997 AND Age &lt;= 998, Age &gt;= 998 AND Age &lt;= 999, Age &gt;= 999 AND Age &lt;= 1000, Age &gt;= 1000 AND Age &lt;= 1001, Age &gt;= 1001 AND Age &lt;= 1002, Age &gt;= 1002 AND Age &lt;= 1003, Age &gt;= 1003 AND Age &lt;= 1004, Age &gt;= 1004 AND Age &lt;= 1005, Age &gt;= 1005 AND Age &lt;= 1006, Age &gt;= 1006 AND Age &lt;= 1007, Age &gt;= 1007 AND Age &lt;= 1008, Age &gt;= 1008 AND Age &lt;= 1009, Age &gt;= 1009 AND Age &lt;= 1010, Age &gt;= 1010 AND Age &lt;= 1011, Age &gt;= 1011 AND Age &lt;= 1012, Age &gt;= 1012 AND Age &lt;= 1013, Age &gt;= 1013 AND Age &lt;= 1014, Age &gt;= 1014 AND Age &lt;= 1015, Age &gt;= 1015 AND Age &lt;= 1016, Age &gt;= 1016 AND Age &lt;= 1017, Age &gt;= 1017 AND Age &lt;= 1018, Age &gt;= 1018 AND Age &lt;= 1019, Age &gt;= 1019 AND Age &lt;= 1020, Age &gt;= 1020 AND Age &lt;= 1021, Age &gt;= 1021 AND Age &lt;= 1022, Age &gt;= 1022 AND Age &lt;= 1023, Age &gt;= 1023 AND Age &lt;= 1024, Age &gt;= 1024 AND Age &lt;= 1025, Age &gt;= 1025 AND Age &lt;= 1026, Age &gt;= 1026 AND Age &lt;= 1027, Age &gt;= 1027 AND Age &lt;= 1028, Age &gt;= 1028 AND Age &lt;= 1029, Age &gt;= 1029 AND Age &lt;= 1030, Age &gt;= 1030 AND Age &lt;= 1031, Age &gt;= 1031 AND Age &lt;= 1032, Age &gt;= 1032 AND Age &lt;= 1033, Age &gt;= 1033 AND Age &lt;= 1034, Age &gt;= 1034 AND Age &lt;= 1035, Age &gt;= 1035 AND Age &lt;= 1036, Age &gt;= 1036 AND Age &lt;= 1037, Age &gt;= 1037 AND Age &lt;= 1038, Age &gt;= 1038 AND Age &lt;= 1039, Age &gt;= 1039 AND Age &lt;= 1040, Age &gt;= 1040 AND Age &lt;= 1041, Age &gt;= 1041 AND Age &lt;= 1042, Age &gt;= 1042 AND Age &lt;= 1043, Age &gt;= 1043 AND Age &lt;= 1044, Age &gt;= 1044 AND Age &lt;= 1045, Age &gt;= 1045 AND Age &lt;= 1046, Age &gt;= 1046 AND Age &lt;= 1047, Age &gt;= 1047 AND Age &lt;= 1048, Age &gt;= 1048 AND Age &lt;= 1049, Age &gt;= 1049 AND Age &lt;= 1050, Age &gt;= 1050 AND Age &lt;= 1051, Age &gt;= 1051 AND Age &lt;= 1052, Age &gt;= 1052 AND Age &lt;= 1053, Age &gt;= 1053 AND Age &lt;= 1054, Age &gt;= 1054 AND Age &lt;= 1055, Age &gt;= 1055 AND Age &lt;= 1056, Age &gt;= 1056 AND Age &lt;= 1057, Age &gt;= 1057 AND Age &lt;= 1058, Age &gt;= 1058 AND Age &lt;= 1059, Age &gt;= 1059 AND Age &lt;= 1060, Age &gt;= 1060 AND Age &lt;= 1061, Age &gt;= 1061 AND Age &lt;= 1062, Age &gt;= 1062 AND Age &lt;= 1063, Age &gt;= 1063 AND Age &lt;= 1064, Age &gt;= 1064 AND Age &lt;= 1065, Age &gt;= 1065 AND Age &lt;= 1066, Age &gt;= 1066 AND Age &lt;= 1067, Age &gt;= 1067 AND Age &lt;= 1068, Age &gt;= 1068 AND Age &lt;= 1069, Age &gt;= 1069 AND Age &lt;= 1070, Age &gt;= 1070 AND Age &lt;= 1071, Age &gt;= 1071 AND Age &lt;= 1072, Age &gt;= 1072 AND Age &lt;= 1073, Age &gt;= 1073 AND Age &lt;= 1074, Age &gt;= 1074 AND Age &lt;= 1075, Age &gt;= 1075 AND Age &lt;= 1076, Age &gt;= 1076 AND Age &lt;= 1077, Age &gt;= 1077 AND Age &lt;= 1078, Age &gt;= 1078 AND Age &lt;= 1079, Age &gt;= 1079 AND Age &lt;= 1080, Age &gt;= 1080 AND Age &lt;= 1081, Age &gt;= 1081 AND Age &lt;= 1082, Age &gt;= 1082 AND Age &lt;= 1083, Age &gt;= 1083 AND Age &lt;= 1084, Age &gt;= 1084 AND Age &lt;= 1085, Age &gt;= 1085 AND Age &lt;= 1086, Age &gt;= 1086 AND Age &lt;= 1087, Age &gt;= 1087 AND Age &lt;= 1088, Age &gt;= 1088 AND Age &lt;= 1089, Age &gt;= 1089 AND Age &lt;= 1090, Age &gt;= 1090 AND Age &lt;= 1091, Age &gt;= 1091 AND Age &lt;= 1092, Age &gt;= 1092 AND Age &lt;= 1093, Age &gt;= 1093 AND Age &lt;= 1094, Age &gt;= 1094 AND Age &lt;= 1095, Age &gt;= 1095 AND Age &lt;= 1096, Age &gt;= 1096 AND Age &lt;= 1097, Age &gt;= 1097 AND Age &lt;= 1098, Age &gt;= 1098 AND Age &lt;= 1099, Age &gt;= 1099 AND Age &lt;= 1100, Age &gt;= 1100 AND Age &lt;= 1101, Age &gt;= 1101 AND Age &lt;= 1102, Age &gt;= 1102 AND Age &lt;= 1103, Age &gt;= 1103 AND Age &lt;= 1104, Age &gt;= 1104 AND Age &lt;= 1105, Age &gt;= 1105 AND Age &lt;= 1106, Age &gt;= 1106 AND Age &lt;= 1107, Age &gt;= 1107 AND Age &lt;= 1108, Age &gt;= 1108 AND Age &lt;= 1109, Age &gt;= 1109 AND Age &lt;= 1110, Age &gt;= 1110 AND Age &lt;= 1111, Age &gt;= 1111 AND Age &lt;= 1112, Age &gt;= 1112 AND Age &lt;= 1113, Age &gt;= 1113 AND Age &lt;= 1114, Age &gt;= 1114 AND Age &lt;= 1115, Age &gt;= 1115 AND Age &lt;= 1116, Age &gt;= 1116 AND Age &lt;= 1117, Age &gt;= 1117 AND Age &lt;= 1118, Age &gt;= 1118 AND Age &lt;= 1119, Age &gt;= 1119 AND Age &lt;= 1120, Age &gt;= 1120 AND Age &lt;= 1121, Age &gt;= 1121 AND Age &lt;= 1122, Age &gt;= 1122 AND Age &lt;= 1123, Age &gt;= 1123 AND Age &lt;= 1124, Age &gt;= 1124 AND Age &lt;= 1125, Age &gt;= 1125 AND Age &lt;= 1126, Age &gt;= 1126 AND Age &lt;= 1127, Age &gt;= 1127 AND Age &lt;= 1128, Age &gt;= 1128 AND Age &lt;= 1129, Age &gt;= 1129 AND Age &lt;= 1130, Age &gt;= 1130 AND Age &lt;= 1131, Age &gt;= 1131 AND Age &lt;= 1132, Age &gt;= 1132 AND Age &lt;= 1133, Age &gt;= 1133 AND Age &lt;= 1134, Age &gt;= 1134 AND Age &lt;= 1135, Age &gt;= 1135 AND Age &lt;= 1136, Age &gt;= 1136 AND Age &lt;= 1137, Age &gt;= 1137 AND Age &lt;= 1138, Age &gt;= 1138 AND Age &lt;= 1139, Age &gt;= 1139 AND Age &lt;= 1140, Age &gt;= 1140 AND Age &lt;= 1141, Age &gt;= 1141 AND Age &lt;= 1142, Age &gt;= 1142 AND Age &lt;= 1143, Age &gt;= 1143 AND Age &lt;= 1144, Age &gt;= 1144 AND Age &lt;= 1145, Age &gt;= 1145 AND Age &lt;= 1146, Age &gt;= 1146 AND Age &lt;= 1147, Age &gt;= 1147 AND Age &lt;= 1148, Age &gt;= 1148 AND Age &lt;= 1149, Age &gt;= 1149 AND Age &lt;= 1150, Age &gt;= 1150 AND Age &lt;= 1151, Age &gt;= 1151 AND Age &lt;= 1152, Age &gt;= 1152 AND Age &lt;= 1153, Age &gt;= 1153 AND Age &lt;= 1154, Age &gt;= 1154 AND Age &lt;= 1155, Age &gt;= 1155 AND Age &lt;= 1156, Age &gt;= 1156 AND Age &lt;= 1157, Age &gt;= 1157 AND Age &lt;= 1158, Age &gt;= 1158 AND Age &lt;= 1159, Age &gt;= 1159 AND Age &lt;= 1160, Age &gt;= 1160 AND Age &lt;= 1161, Age &gt;= 1161 AND Age &lt;= 1162, Age &gt;= 1162 AND Age &lt;= 1163, Age &gt;= 1163 AND Age &lt;= 1164, Age &gt;= 1164 AND Age &lt;= 1165, Age &gt;= 1165 AND Age &lt;= 1166, Age &gt;= 1166 AND Age &lt;= 1167, Age &gt;= 1167 AND Age &lt;= 1168, Age &gt;= 1168 AND Age &lt;= 1169, Age &gt;= 1169 AND Age &lt;= 1170, Age &gt;= 1170 AND Age &lt;= 1171, Age &gt;= 1171 AND Age &lt;= 1172, Age &gt;= 1172 AND Age &lt;= 1173, Age &gt;= 1173 AND Age &lt;= 1174, Age &gt;= 1174 AND Age &lt;= 1175, Age &gt;= 1175 AND Age &lt;= 1176, Age &gt;= 1176 AND Age &lt;= 1177, Age &gt;= 1177 AND Age &lt;= 1178, Age &gt;= 1178 AND Age &lt;= 1179, Age &gt;= 1179 AND Age &lt;= 1180, Age &gt;= 1180 AND Age &lt;= 1181, Age &gt;= 1181 AND Age &lt;= 1182, Age &gt;= 1182 AND Age &lt;= 1183, Age &gt;= 1183 AND Age &lt;= 1184, Age &gt;= 1184 AND Age &lt;= 1185, Age &gt;= 1185 AND Age &lt;= 1186, Age &gt;= 1186 AND Age &lt;= 1187, Age &gt;= 1187 AND Age &lt;= 1188, Age &gt;= 1188 AND Age &lt;= 1189, Age &gt;= 1189 AND Age &lt;= 1190, Age &gt;= 1190 AND Age &lt;= 1191, Age &gt;= 1191 AND Age &lt;= 1192, Age &gt;= 1192 AND Age &lt;= 1193, Age &gt;= 1193 AND Age &lt;= 1194, Age &gt;= 1194 AND Age &lt;= 1195, Age &gt;= 1195 AND Age &lt;= 1196, Age &gt;= 1196 AND Age &lt;= 1197, Age &gt;= 1197 AND Age &lt;= 1198, Age &gt;= 1198 AND Age &lt;= 1199, Age &gt;= 1199 AND Age &lt;= 1200, Age &gt;= 1200 AND Age &lt;= 1201, Age &gt;= 1201 AND Age &lt;= 1202, Age &gt;= 1202 AND Age &lt;= 1203, Age &gt;= 1203 AND Age &lt;= 1204, Age &gt;= 1204 AND Age &lt;= 1205, Age &gt;= 1205 AND Age &lt;= 1206, Age &gt;= 1206 AND Age &lt;= 1207, Age &gt;= 1207 AND Age &lt;= 1208, Age &gt;= 1208 AND Age &lt;= 1209, Age &gt;= 1209 AND Age &lt;= 1210, Age &gt;= 1210 AND Age &lt;= 1211, Age &gt;= 1211 AND Age &lt;= 1212, Age &gt;= 1212 AND Age &lt;= 1213, Age &gt;= 1213 AND Age &lt;= 1214, Age &gt;= 1214 AND Age &lt;= 1215, Age &gt;= 1215 AND Age &lt;= 1216, Age &gt;= 1216 AND Age &lt;= 1217, Age &gt;= 1217 AND Age &lt;= 1218, Age &gt;= 1218 AND Age &lt;= 1219, Age &gt;= 1219 AND Age &lt;= 1220, Age &gt;= 1220 AND Age &lt;= 1221, Age &gt;= 1221 AND Age &lt;= 1222, Age &gt;= 1222 AND Age &lt;= 1223, Age &gt;= 1223 AND Age &lt;= 1224, Age &gt;= 1224 AND Age &lt;= 1225, Age &gt;= 1225 AND Age &lt;= 1226, Age &gt;= 1226 AND Age &lt;= 1227, Age &gt;= 1227 AND Age &lt;= 1228, Age &gt;= 1228 AND Age &lt;= 1229, Age &gt;= 1229 AND Age &lt;= 1230, Age &gt;= 1230 AND Age &lt;= 1231, Age &gt;= 1231 AND Age &lt;= 1232, Age &gt;= 1232 AND Age &lt;= 1233, Age &gt;= 1233 AND Age &lt;= 1234, Age &gt;= 1234 AND Age &lt;= 1235, Age &gt;= 1235 AND Age &lt;= 1236, Age &gt;= 1236 AND Age &lt;= 1237, Age &gt;= 1237 AND Age &lt;= 1238, Age &gt;= 1238 AND Age &lt;= 1239, Age &gt;= 1239 AND Age &lt;= 1240, Age &gt;= 1240 AND Age &lt;= 1241, Age &gt;= 1241 AND Age &lt;= 1242, Age &gt;= 1242 AND Age &lt;= 1243, Age &gt;= 1243 AND Age &lt;= 1244, Age &gt;= 1244 AND Age &lt;= 1245, Age &gt;= 1245 AND Age &lt;= 1246, Age &gt;= 1246 AND Age &lt;= 1247, Age &gt;= 1247 AND Age &lt;= 1248, Age &gt;= 1248 AND Age &lt;= 1249, Age &gt;= 1249 AND Age &lt;= 1250, Age &gt;= 1250 AND Age &lt;= 1251, Age &gt;= 1251 AND Age &lt;= 1252, Age &gt;= 1252 AND Age &lt;= 1253, Age &gt;= 1253 AND Age &lt;= 1254, Age &gt;= 1254 AND Age &lt;= 1255, Age &gt;= 1255 AND Age &lt;= 1256, Age &gt;= 1256 AND Age &lt;= 1257, Age &gt;= 1257 AND Age &lt;= 1258, Age &gt;= 1258 AND Age &lt;= 1259, Age &gt;= 1259 AND Age &lt;= 1260, Age &gt;= 1260 AND Age &lt;= 1261, Age &gt;= 1261 AND Age &lt;= 1262, Age &gt;= 1262 AND Age &lt;= 1263, Age &gt;= 1263 AND Age &lt;= 1264, Age &gt;= 1264 AND Age &lt;= 1265, Age &gt;= 1265 AND Age &lt;= 1266, Age &gt;= 1266 AND Age &lt;= 1267, Age &gt;= 1267 AND Age &lt;= 1268, Age &gt;= 1268 AND Age &lt;= 1269, Age &gt;= 1269 AND Age &lt;= 1270, Age &gt;= 1270 AND Age &lt;= 1271, Age &gt;= 1271 AND Age &lt;= 1272, Age &gt;= 1272 AND Age &lt;= 1273, Age &gt;= 1273 AND Age &lt;= 1274, Age &gt;= 1274 AND Age &lt;= 1275, Age &gt;= 1275 AND Age &lt;= 1276, Age &gt;= 1276 AND Age &lt;= 1277, Age &gt;= 1277 AND Age &lt;= 1278, Age &gt;= 1278 AND Age &lt;= 1279, Age &gt;= 1279 AND Age &lt;= 1280, Age &gt;= 1280 AND Age &lt;= 1281, Age &gt;= 1281 AND Age &lt;= 1282, Age &gt;= 1282 AND Age &lt;= 1283, Age &gt;= 1283 AND Age &lt;= 1284, Age &gt;= 1284 AND Age &lt;= 1285, Age &gt;= 1285 AND Age &lt;= 1286, Age &gt;= 1286 AND Age &lt;= 1287, Age &gt;= 1287 AND Age &lt;= 1288, Age &gt;= 1288 AND Age &lt;= 1289, Age &gt;= 1289 AND Age &lt;= 1290, Age &gt;= 1290 AND Age &lt;= 1291, Age &gt;= 1291 AND Age &lt;= 1292, Age &gt;= 1292 AND Age &lt;= 1293, Age &gt;= 1293 AND Age &lt;= 1294, Age &gt;= 1294 AND Age &lt;= 1295, Age &gt;= 1295 AND Age &lt;= 1296, Age &gt;= 1296 AND Age &lt;= 1297, Age &gt;= 1297 AND Age &lt;= 1298, Age &gt;= 1298 AND Age &lt;= 1299, Age &gt;= 1299 AND Age &lt;= 1300, Age &gt;= 1300 AND Age &lt;= 1301, Age &gt;= 1301 AND Age &lt;= 1302, Age &gt;= 1302 AND Age &lt;= 1303, Age &gt;= 1303 AND Age &lt;= 1304, Age &gt;= 1304 AND Age &lt;= 1305, Age &gt;= 1305 AND Age &lt;= 1306, Age &gt;= 1306 AND Age &lt;= 1307, Age &gt;= 1307 AND Age &lt;= 1308, Age &gt;= 1308 AND Age &lt;= 1309, Age &gt;= 1309 AND Age &lt;= 1310, Age &gt;= 1310 AND Age &lt;= 1311, Age &gt;= 1311 AND Age &lt;= 1312, Age &gt;= 1312 AND Age &lt;= 1313, Age &gt;= 1313 AND Age &lt;= 1314, Age &gt;= 1314 AND Age &lt;= 1315, Age &gt;= 1315 AND Age &lt;= 1316, Age &gt;= 1316 AND Age &lt;= 1317, Age &gt;= 1317 AND Age &lt;= 1318, Age &gt;= 1318 AND Age &lt;= 1319, Age &gt;= 1319 AND Age &lt;= 1320, Age &gt;= 1320 AND Age &lt;= 1321, Age &gt;= 1321 AND Age &lt;= 1322, Age &gt;= 1322 AND Age &lt;= 1323, Age &gt;= 1323 AND Age &lt;= 1324, Age &gt;= 1324 AND Age &lt;= 1325, Age &gt;= 1325 AND Age &lt;= 1326, Age &gt;= 1326 AND Age &lt;= 1327, Age &gt;= 1327 AND Age &lt;= 1328, Age &gt;= 1328 AND Age &lt;= 1329, Age &gt;= 1329 AND Age &lt;= 1330, Age &gt;= 1330 AND Age &lt;= 1331, Age &gt;= 1331 AND Age &lt;= 1332, Age &gt;= 1332 AND Age &lt;= 1333, Age &gt;= 1333 AND Age &lt;= 1334, Age &gt;= 1334 AND Age &lt;= 1335, Age &gt;= 1335 AND Age &lt;= 1336, Age &gt;= 1336 AND Age &lt;= 1337, Age &gt;= 1337 AND Age &lt;= 1338, Age &gt;= 1338 AND Age &lt;= 1339, Age &gt;= 1339 AND Age &lt;= 1340, Age &gt;= 1340 AND Age &lt;= 1341, Age &gt;= 1341 AND Age &lt;= 1342, Age &gt;= 1342 AND Age &lt;= 1343, Age &gt;= 1343 AND Age &lt;= 1344, Age &gt;= 1344 AND Age &lt;= 1345, Age &gt;= 1345 AND Age &lt;= 1346, Age &gt;= 1346 AND Age &lt;= 1347, Age &gt;= 1347 AND Age &lt;= 1348, Age &gt;= 1348 AND Age &lt;= 1349, Age &gt;= 1349 AND Age &lt;= 1350, Age &gt;= 1350 AND Age &lt;= 1351, Age &gt;= 1351 AND Age &lt;= 1352, Age &gt;= 1352 AND Age &lt;= 1353, Age &gt;= 1353 AND Age &lt;= 1354, Age &gt;= 1354 AND Age &lt;= 1355, Age &gt;= 1355 AND Age &lt;= 1356, Age &gt;= 1356 AND Age &lt;= 1357, Age &gt;= 1357 AND Age &lt;= 1358, Age &gt;= 1358 AND Age &lt;= 1359, Age &gt;= 1359 AND Age &lt;= 1360, Age &gt;= 1360 AND Age &lt;= 1361, Age &gt;= 1361 AND Age &lt;= 1362, Age &gt;= 1362 AND Age &lt;= 1363, Age &gt;= 1363 AND Age &lt;= 1364, Age &gt;= 1364 AND Age &lt;= 1365, Age &gt;= 1365 AND Age &lt;= 1366, Age &gt;= 1366 AND Age &lt;= 1367, Age &gt;= 1367 AND Age &lt;= 1368, Age &gt;= 1368 AND Age &lt;= 1369, Age &gt;= 1369 AND Age &lt;= 1370, Age &gt;= 1370 AND Age &lt;= 1371, Age &gt;= 1371 AND Age &lt;= 1372, Age &gt;= 1372 AND Age &lt;= 1373, Age &gt;= 1373 AND Age &lt;= 1374, Age &gt;= 1374 AND Age &lt;= 1375, Age &gt;= 1375 AND Age &lt;= 1376, Age &gt;= 1376 AND Age &lt;= 1377, Age &gt;= 1377 AND Age &lt;= 1378, Age &gt;= 1378 AND Age &lt;= 1379, Age &gt;= 1379 AND Age &lt;= 1380, Age &gt;= 1380 AND Age &lt;= 1381, Age &gt;= 1381 AND Age &lt;= 1382, Age &gt;= 1382 AND Age &lt;= 1383, Age &gt;= 1383 AND Age &lt;= 1384, Age &gt;= 1384 AND Age &lt;= 1385, Age &gt;= 1385 AND Age &lt;= 1386, Age &gt;= 1386 AND Age &lt;= 1387, Age &gt;= 1387 AND Age &lt;= 1388, Age &gt;= 1388 AND Age &lt;= 1389, Age &gt;= 1389 AND Age &lt;= 1390, Age &gt;= 1390 AND Age &lt;= 1391, Age &gt;= 1391 AND Age &lt;= 1392, Age &gt;= 1392 AND Age &lt;= 1393, Age &gt;= 1393 AND Age &lt;= 1394, Age &gt;= 1394 AND Age &lt;= 1395, Age &gt;= 1395 AND Age &lt;= 1396, Age &gt;= 1396 AND Age &lt;= 1397, Age &gt;= 1397 AND Age &lt;= 1398, Age &gt;= 1398 AND Age &lt;= 1399, Age &gt;= 1399 AND Age &lt;= 1400, Age &gt;= 1400 AND Age &lt;= 1401, Age &gt;= 1401 AND Age &lt;= 1402, Age &gt;= 1402 AND Age &lt;= 1403, Age &gt;= 1403 AND Age &lt;= 1404, Age &gt;= 1404 AND Age &lt;= 1405, Age &gt;= 1405 AND Age &lt;= 1406, Age &gt;= 1406 AND Age &lt;= 1407, Age &gt;= 1407 AND Age &lt;= 1408, Age &gt;= 1408 AND Age &lt;= 1409, Age &gt;= 1409 AND Age &lt;= 1410, Age &gt;= 1410 AND Age &lt;= 1411, Age &gt;= 1411 AND Age &lt;= 1412, Age &gt;= 1412 AND Age &lt;= 1413, Age &gt;= 1413 AND Age &lt;= 1414, Age &gt;= 1414 AND Age &lt;= 1415, Age &gt;= 1415 AND Age &lt;= 1416, Age &gt;= 1416 AND Age &lt;= 1417, Age &gt;= 1417 AND Age &lt;= 1418, Age &gt;= 1418 AND Age &lt;= 1419, Age &gt;= 1419 AND Age &lt;= 1420, Age &gt;= 1420 AND Age &lt;= 1421, Age &gt;= 1421 AND Age &lt;= 1422, Age &gt;= 1422 AND Age &lt;= 1423, Age &gt;= 1423 AND Age &lt;= 1424, Age &gt;= 1424 AND Age &lt;= 1425, Age &gt;= 1425 AND Age &lt;= 1426, Age &gt;= 1426 AND Age &lt;= 1427, Age &gt;= 1427 AND Age &lt;= 1428, Age &gt;= 1428 AND Age &lt;= 1429, Age &gt;= 1429 AND Age &lt;= 1430, Age &gt;= 1430 AND Age &lt;= 1431, Age &gt;= 1431 AND Age &lt;= 1432, Age &gt;= 1432 AND Age &lt;= 1433, Age &gt;= 1433 AND Age &lt;= 1434, Age &gt;= 1434 AND Age &lt;= 1435, Age &gt;= 1435 AND Age &lt;= 1436, Age &gt;= 1436 AND Age &lt;= 1437, Age &gt;= 1437 AND Age &lt;= 1438, Age &gt;= 1438 AND Age &lt;= 1439, Age &gt;= 1439 AND Age &lt;= 1440, Age &gt;= 1440 AND Age &lt;= 1441, Age &gt;= 1441 AND Age &lt;= 1442, Age &gt;= 1442 AND Age &lt;= 1443, Age &gt;= 1443 AND Age &lt;= 1444, Age &gt;= 1444 AND Age &lt;= 1445, Age &gt;= 1445 AND Age &lt;= 1446, Age &gt;= 1446 AND Age &lt;= 1447, Age &gt;= 1447 AND Age &lt;= 1448, Age &gt;= 1448 AND Age &lt;= 1449, Age &gt;= 1449 AND Age &lt;= 1450, Age &gt;= 1450 AND Age &lt;= 1451, Age &gt;= 1451 AND Age &lt;= 1452, Age &gt;= 1452 AND Age &lt;= 1453, Age &gt;= 1453 AND Age &lt;= 1454, Age &gt;= 1454 AND Age &lt;= 1455, Age &gt;= 1455 AND Age &lt;= 1456, Age &gt;= 1456 AND Age &lt;= 1457, Age &gt;= 1457 AND Age &lt;= 1458, Age &gt;= 1458 AND Age &lt;= 1459, Age &gt;= 1459 AND Age &lt;= 1460, Age &gt;= 1460 AND Age &lt;= 1461, Age &gt;= 1461 AND Age &lt;= 1462, Age &gt;= 1462 AND Age &lt;= 1463, Age &gt;= 1463 AND Age &lt;= 1464, Age &gt;= 1464 AND Age &lt;= 1465, Age &gt;= 1465 AND Age &lt;= 1466, Age &gt;= 1466 AND Age &lt;= 1467, Age &gt;= 1467 AND Age &lt;= 1468, Age &gt;= 1468 AND Age &lt;= 1469, Age &gt;= 1469 AND Age &lt;= 1470, Age &gt;= 1470 AND Age &lt;= 1471, Age &gt;= 1471 AND Age &lt;= 1472, Age &gt;= 1472 AND Age &lt;= 1473, Age &gt;= 1473 AND Age &lt;= 1474, Age &gt;= 1474 AND Age &lt;= 1475, Age &gt;= 1475 AND Age &lt;= 1476, Age &gt;= 1476 AND Age &lt;= 1477, Age &gt;= 1477 AND Age &lt;= 1478, Age &gt;= 1478 AND Age &lt;= 1479, Age &gt;= 1479 AND Age &lt;= 1480, Age &gt;= 1480 AND Age &lt;= 1481, Age &gt;= 1481 AND Age &lt;= 1482, Age &gt;= 1482 AND Age &lt;= 1483, Age &gt;= 1483 AND Age &lt;= 1484, Age &gt;= 1484 AND Age &lt;= 1485, Age &gt;= 1485 AND Age &lt;= 1486, Age &gt;= 1486 AND Age &lt;= 1487, Age &gt;= 1487 AND Age &lt;= 1488, Age &gt;= 1488 AND Age &lt;= 1489, Age &gt;= 1489 AND Age &lt;= 1490, Age &gt;= 1490 AND Age &lt;= 1491, Age &gt;= 1491 AND Age &lt;= 1492, Age &gt;= 1492 AND Age &lt;= 1493, Age &gt;= 1493 AND Age &lt;= 1494, Age &gt;= 1494 AND Age &lt;= 1495, Age &gt;= 1495 AND Age &lt;= 1496, Age &gt;= 1496 AND Age &lt;= 1497, Age &gt;= 1497 AND Age &lt;= 1498, Age &gt;= 1498 AND Age &lt;= 1499, Age &gt;= 1499 AND Age &lt;= 1500, Age &gt;= 1500 AND Age &lt;= 1501, Age &gt;= 1501 AND Age &lt;= 1502, Age &gt;= 1502 AND Age &lt;= 1503, Age &gt;= 1503 AND Age &lt;= 1504, Age &gt;= 1504 AND Age &lt;= 1505, Age &gt;= 1505 AND Age &lt;= 1506, Age &gt;= 1506 AND Age &lt;= 1507, Age &gt;= 1507 AND Age &lt;= 1508, Age &gt;= 1508 AND Age &lt;= 1509, Age &gt;= 1509 AND Age &lt;= 1510, Age &gt;= 1510 AND Age &lt;= 1511, Age &gt;= 1511 AND Age &lt;= 1512, Age &gt;= 1512 AND Age &lt;= 1513, Age &gt;= 1513 AND Age &lt;= 1514, Age &gt;= 1514 AND Age &lt;= 1515, Age &gt;= 1515 AND Age &lt;= 1516, Age &gt;= 1516 AND Age &lt;= 1517, Age &gt;= 1517 AND Age &lt;= 1518, Age &gt;= 1518 AND Age &lt;= 1519, Age &gt;= 1519 AND Age &lt;= 1520, Age &gt;= 1520 AND Age &lt;= 1521, Age &gt;= 1521 AND Age &lt;= 1522, Age &gt;= 1522 AND Age &lt;= 1523, Age &gt;= 1523 AND Age &lt;= 1524, Age &gt;= 1524 AND Age &lt;= 1525, Age &gt;= 1525 AND Age &lt;= 1526, Age &gt;= 1526 AND Age &lt;= 1527, Age &gt;= 1527 AND Age &lt;= 1528, Age &gt;= 1528 AND Age &lt;= 1529, Age &gt;= 1529 AND Age &lt;= 1530, Age &gt;= 1530 AND Age &lt;= 1531, Age &gt;= 1531 AND Age &lt;= 1532, Age &gt;= 1532 AND Age &lt;= 1533, Age &gt;= 1533 AND Age &lt;= 1534, Age &gt;= 1534 AND Age &lt;= 1535, Age &gt;= 1535 AND Age &lt;= 1536, Age &gt;= 1536 AND Age &lt;= 1537, Age &gt;= 1537 AND Age &lt;= 1538, Age &gt;= 1538 AND Age &lt;= 1539, Age &gt;= 1539 AND Age &lt;= 1540, Age &gt;= 1540 AND Age &lt;= 1541, Age &gt;= 1541 AND Age &lt;= 1542, Age &gt;= 1542 AND Age &lt;= 1543, Age &gt;= 1543 AND Age &lt;= 1544, Age &gt;= 1544 AND Age &lt;= 1545, Age &gt;= 1545 AND Age &lt;= 1546, Age &gt;= 1546 AND Age &lt;= 1547, Age &gt;= 1547 AND Age &lt;= 1548, Age &gt;= 1548 AND Age &lt;= 1549, Age &gt;= 1549 AND Age &lt;= 1550, Age &gt;= 1550 AND Age &lt;= 1551, Age &gt;= 1551 AND Age &lt;= 1552, Age &gt;= 1552 AND Age &lt;= 1553, Age &gt;= 1553 AND Age &lt;= 1554, Age &gt;= 1554 AND Age &lt;= 1555, Age &gt;= 1555 AND Age &lt;= 1556, Age &gt;= 1556 AND Age &lt;= 1557, Age &gt;= 1557 AND Age &lt;= 1558, Age &gt;= 1558 AND Age &lt;= 1559, Age &gt;= 1559 AND Age &lt;= 1560, Age &gt;= 1560 AND Age &lt;= 1561, Age &gt;= 1561 AND Age &lt;= 1562, Age &gt;= 1562 AND Age &lt;= 1563, Age &gt;= 1563 AND Age &lt;= 1564, Age &gt;= 1564 AND Age &lt;= 1565, Age &gt;= 1565 AND Age &lt;= 1566, Age &gt;= 1566 AND Age &lt;= 1567, Age &gt;= 1567 AND Age &lt;= 1568, Age &gt;= 1568 AND Age &lt;= 1569, Age &gt;= 1569 AND Age &lt;= 1570, Age &gt;= 1570 AND Age &lt;= 1571, Age &gt;= 1571 AND Age &lt;= 1572, Age &gt;= 1572 AND Age &lt;= 1573, Age &gt;= 1573 AND Age &lt;= 1574, Age &gt;= 1574 AND Age &lt;= 1575, Age &gt;= 1575 AND Age &lt;= 1576, Age &gt;= 1576 AND Age &lt;= 1577, Age &gt;= 1577 AND Age &lt;= 1578, Age &gt;= 1578 AND Age &lt;= 1579, Age &gt;= 1579 AND Age &lt;= 1580, Age &gt;= 1580 AND Age &lt;= 1581, Age &gt;= 1581 AND Age &lt;= 1582, Age &gt;= 1582 AND Age &lt;= 1583, Age &gt;= 1583 AND Age &lt;= 1584, Age &gt;= 1584 AND Age &lt;= 1585, Age &gt;= 1585 AND Age &lt;= 1586, Age &gt;= 1586 AND Age &lt;= 1587, Age &gt;= 1587 AND Age &lt;= 1588, Age &gt;= 1588 AND Age &lt;= 1589, Age &gt;= 1589 AND Age &lt;= 1590, Age &gt;= 1590 AND Age &lt;= 1591, Age &gt;= 1591 AND Age &lt;= 1592, Age &gt;= 1592 AND Age &lt;= 1593, Age &gt;= 1593 AND Age &lt;= 1594, Age &gt;= 1594 AND Age &lt;= 1595, Age &gt;= 1595 AND Age &lt;= 1596, Age &gt;= 1596 AND Age &lt;= 1597, Age &gt;= 1597 AND Age &lt;= 1598, Age &gt;= 1598 AND Age &lt;= 1599, Age &gt;= 1599 AND Age &lt;= 1600, Age &gt;= 1600 AND Age &lt;= 1601, Age &gt;= 1601 AND Age &lt;= 1602, Age &gt;= 1602 AND Age &lt;= 1603, Age &gt;= 1603 AND Age &lt;= 1604, Age &gt;= 1604 AND Age &lt;= 1605, Age &gt;= 1605 AND Age &lt;= 1606, Age &gt;= 1606 AND Age &lt;= 1607, Age &gt;= 1607 AND Age &lt;= 1608, Age &gt;= 1608 AND Age &lt;= 1609, Age &gt;= 1609 AND Age &lt;= 1610, Age &gt;= 1610 AND Age &lt;= 1611, Age &gt;= 1611 AND Age &lt;= 1612, Age &gt;= 1612 AND Age &lt;= 1613, Age &gt;= 1613 AND Age &lt;= 1614, Age &gt;= 1614 AND Age &lt;= 1615, Age &gt;= 1615 AND Age &lt;= 1616, Age &gt;= 1616 AND Age &lt;= 1617, Age &gt;= 1617 AND Age &lt;= 1618, Age &gt;= 1618 AND Age &lt;= 1619, Age &gt;= 1619 AND Age &lt;= 1620, Age &gt;= 1620 AND Age &lt;= 1621, Age &gt;= 1621 AND Age &lt;= 1622, Age &gt;= 1622 AND Age &lt;= 1623, Age &gt;= 1623 AND Age &lt;= 1624, Age &gt;= 1624 AND Age &lt;= 1625, Age &gt;= 1625 AND Age &lt;= 1626, Age &gt;= 1626 AND Age &lt;= 1627, Age &gt;= 1627 AND Age &lt;= 1628, Age &gt;= 1628 AND Age &lt;= 1629, Age &gt;= 1629 AND Age &lt;= 1630, Age &gt;= 1630 AND Age &lt;= 1631, Age &gt;= 1631 AND Age &lt;= 1632, Age &gt;= 1632 AND Age &lt;= 1633, Age &gt;= 1633 AND Age &lt;= 1634, Age &gt;= 1634 AND Age &lt;= 1635, Age &gt;= 1635 AND Age &lt;= 1636, Age &gt;= 1636 AND Age &lt;= 1637, Age &gt;= 1637 AND Age &lt;= 1638, Age &gt;= 1638 AND Age &lt;= 1639, Age &gt;= 1639 AND Age &lt;= 1640, Age &gt;= 1640 AND Age &lt;= 1641, Age &gt;= 1641 AND Age &lt;= 1642, Age &gt;= 1642 AND Age &lt;= 1643, Age &gt;= 1643 AND Age &lt;= 1644, Age &gt;= 1644 AND Age &lt;= 1645, Age &gt;= 1645 AND Age &lt;= 1646, Age &gt;= 1646 AND Age &lt;= 1647, Age &gt;= 1647 AND Age &lt;= 1648, Age &gt;= 1648 AND Age &lt;= 1649, Age &gt;= 1649 AND Age &lt;= 1650, Age &gt;= 1650 AND Age &lt;= 1651, Age &gt;= 1651 AND Age &lt;= 1652, Age &gt;= 1652 AND Age &lt;= 1653, Age &gt;= 1653 AND Age &lt;= 1654, Age &gt;= 1654 AND Age &lt;= 1655, Age &gt;= 1655 AND Age &lt;= 1656, Age &gt;= 1656 AND Age &lt;= 1657, Age &gt;= 1657 AND Age &lt;= 1658, Age &gt;= 1658 AND Age &lt;= 1659, Age &gt;= 1659 AND Age &lt;= 1660, Age &gt;= 1660 AND Age &lt;= 1661, Age &gt;= 1661 AND Age &lt;= 1662, Age &gt;= 1662 AND Age &lt;= 1663, Age &gt;= 1663 AND Age &lt;= 1664, Age &gt;= 1664 AND Age &lt;= 1665, Age &gt;= 1665 AND Age &lt;= 1666, Age &gt;= 1666 AND Age &lt;= 1667, Age &gt;= 1667 AND Age &lt;= 1668, Age &gt;= 1668 AND Age &lt;= 1669, Age &gt;= 1669 AND Age &lt;= 1670, Age &gt;= 1670 AND Age &lt;= 1671, Age &gt;= 1671 AND Age &lt;= 1672, Age &gt;= 1672 AND Age &lt;= 1673, Age &gt;= 1673 AND Age &lt;= 1674, Age &gt;= 1674 AND Age &lt;= 1675, Age &gt;= 1675 AND Age &lt;= 1676, Age &gt;= 1676 AND Age &lt;= 1677, Age &gt;= 1677 AND Age &lt;= 1678, Age &gt;= 1678 AND Age &lt;= 1679, Age &gt;= 1679 AND Age &lt;= 1680, Age &gt;= 1680 AND Age &lt;= 1681, Age &gt;= 1681 AND Age &lt;= 1682, Age &gt;= 1682 AND Age &lt;= 1683, Age &gt;= 1683 AND Age &lt;= 1684, Age &gt;= 1684 AND Age &lt;= 1685, Age &gt;= 1685 AND Age &lt;= 1686, Age &gt;= 1686 AND Age &lt;= 1687, Age &gt;= 1687 AND Age &lt;= 1688, Age &gt;= 1688 AND Age &lt;= 1689, Age &gt;= 1689 AND Age &lt;= 1690, Age &gt;= 1690 AND Age &lt;= 1691, Age &gt;= 1691 AND Age &lt;= 1692, Age &gt;= 1692 AND Age &lt;= 1693, Age &gt;= 1693 AND Age &lt;= 1694, Age &gt;= 1694 AND Age &lt;= 1695, Age &gt;= 1695 AND Age &lt;= 1696, Age &gt;= 1696 AND Age &lt;= 1697, Age &gt;= 1697 AND Age &lt;= 1698, Age &gt;= 1698 AND Age &lt;= 1699, Age &gt;= 1699 AND Age &lt;= 1700, Age &gt;= 1700 AND Age &lt;= 1701, Age &gt;= 1701 AND Age &lt;= 1702, Age &gt;= 1702 AND Age &lt;= 1703, Age &gt;= 1703 AND Age &lt;= 1704, Age &gt;= 1704 AND Age &lt;= 1705, Age &gt;= 1705 AND Age &lt;= 1706, Age &gt;= 1706 AND Age &lt;= 1707, Age &gt;= 1707 AND Age &lt;= 1708, Age &gt;= 1708 AND Age &lt;= 1709, Age &gt;= 1709 AND Age &lt;= 1710, Age &gt;= 1710 AND Age &lt;= 1711, Age &gt;= 1711 AND Age &lt;= 1712, Age &gt;= 1712 AND Age &lt;= 1713, Age &gt;= 1713 AND Age &lt;= 1714, Age &gt;= 1714 AND Age &lt;= 1715, Age &gt;= 1715 AND Age &lt;= 1716, Age &gt;= 1716 AND Age &lt;= 1717, Age &gt;= 1717 AND Age &lt;= 1718, Age &gt;= 1718 AND Age &lt;= 1719, Age &gt;= 1719 AND Age &lt;= 1720, Age &gt;= 1720 AND Age &lt;= 1721, Age &gt;= 1721 AND Age &lt;= 1722, Age &gt;= 1722 AND Age &lt;= 1723, Age &gt;= 1723 AND Age &lt;= 1724, Age &gt;= 1724 AND Age &lt;= 1725, Age &gt;= 1725 AND Age &lt;= 1726, Age &gt;= 1726 AND Age &lt;= 1727, Age &gt;= 1727 AND Age &lt;= 1728, Age &gt;= 1728 AND Age &lt;= 1729, Age &gt;= 1729 AND Age &lt;= 1730, Age &gt;= 1730 AND Age &lt;= 1731, Age &gt;= 1731 AND Age &lt;= 1732, Age &gt;= 1732 AND Age &lt;= 1733, Age &gt;= 1733 AND Age &lt;= 1734, Age &gt;= 1734 AND Age &lt;= 1735, Age &gt;= 1735 AND Age &lt;= 1736, Age &gt;= 1736 AND Age &lt;= 1737, Age &gt;= 1737 AND Age &lt;= 1738, Age &gt;= 1738 AND Age &lt;= 1739, Age &gt;= 1739 AND Age &lt;= 1740, Age &gt;= 1740 AND Age &lt;= 1741, Age &gt;= 1741 AND Age &lt;= 1742, Age &gt;= 1742 AND Age &lt;= 1743, Age &gt;= 1743 AND Age &lt;= 1744, Age &gt;= 1744 AND Age &lt;= 1745, Age &gt;= 1745 AND Age &lt;= 1746, Age &gt;= 1746 AND Age &lt;= 1747, Age &gt;= 1747 AND Age &lt;= 1748, Age &gt;= 1748 AND Age &lt;= 1749, Age &gt;= 1749 AND Age &lt;= 1750, Age &gt;= 1750 AND Age &lt;= 1751, Age &gt;= 1751 AND Age &lt;= 1752, Age &gt;= 1752 AND Age &lt;= 1753, Age &gt;= 1753 AND Age &lt;= 1754, Age &gt;= 1754 AND Age &lt;= 1755, Age &gt;= 1755 AND Age &lt;= 1756, Age &gt;= 1756 AND Age &lt;= 1757, Age &gt;= 1757 AND Age &lt;= 1758, Age &gt;= 1758 AND Age &lt;= 1759, Age &gt;= 1759 AND Age &lt;= 1760, Age &gt;= 1760 AND Age &lt;= 1761, Age &gt;= 1761 AND Age &lt;= 1762, Age &gt;= 1762 AND Age &lt;= 1763, Age &gt;= 1763 AND Age &lt;= 1764, Age &gt;= 1764 AND Age &lt;= 1765, Age &gt;= 1765 AND Age &lt;= 1766, Age &gt;= 1766 AND Age &lt;= 1767, Age &gt;= 1767 AND Age &lt;= 1768, Age &gt;= 1768 AND Age &lt;= 1769, Age &gt;= 1769 AND Age &lt;= 1770, Age &gt;= 1770 AND Age &lt;= 1771, Age &gt;= 1771 AND Age &lt;= 1772, Age &gt;= 1772 AND Age &lt;= 1773, Age &gt;= 1773 AND Age &lt;= 1774, Age &gt;= 1774 AND Age &lt;= 1775, Age &gt;= 1775 AND Age &lt;= 1776, Age &gt;= 1776 AND Age &lt;= 1777, Age &gt;= 1777 AND Age &lt;= 1778, Age &gt;= 1778 AND Age &lt;= 1779, Age &gt;= 1779 AND Age &lt;= 1780, Age &gt;= 1780 AND Age &lt;= 1781, Age &gt;= 1781 AND Age &lt;= 1782, Age &gt;= 1782 AND Age &lt;= 1783, Age &gt;= 1783 AND Age &lt;= 1784, Age &gt;= 1784 AND Age &lt;= 1785, Age &gt;= 1785 AND Age &lt;= 1786, Age &gt;= 1786 AND Age &lt;= 1787, Age &gt;= 1787 AND Age &lt;= 1788, Age &gt;= 1788 AND Age &lt;= 1789, Age &gt;= 1789 AND Age &lt;= 1790, Age &gt;= 1790 AND Age &lt;= 1791, Age &gt;= 1791 AND Age &lt;= 1792, Age &gt;= 1792 AND Age &lt;= 1793, Age &gt;= 1793 AND Age &lt;= 1794, Age &gt;= 1794 AND Age &lt;= 1795, Age &gt;= 1795 AND Age &lt;= 1796, Age &gt;= 1796 AND Age &lt;= 1797, Age &gt;= 1797 AND Age &lt;= 1798, Age &gt;= 1798 AND Age &lt;= 1799, Age &gt;= 1799 AND Age &lt;= 1800, Age &gt;= 1800 AND Age &lt;= 1801, Age &gt;= 1801 AND Age &lt;= 1802, Age &gt;= 1802 AND Age &lt;= 1803, Age &gt;= 1803 AND Age &lt;= 1804, Age &gt;= 1804 AND Age &lt;= 1805, Age &gt;= 1805 AND Age &lt;= 1806, Age &gt;= 1806 AND Age &lt;= 1807, Age &gt;= 1807 AND Age &lt;= 1808, Age &gt;= 1808 AND Age &lt;= 1809, Age &gt;= 1809 AND Age &lt;= 1810, Age &gt;= 1810 AND Age &lt;= 1811, Age &gt;= 1811 AND Age &lt;= 1812, Age &gt;= 1812 AND Age &lt;= 1813, Age &gt;= 1813 AND Age &lt;= 1814, Age &gt;= 1814 AND Age &lt;= 1815, Age &gt;= 1815 AND Age &lt;= 1816, Age &gt;= 1816 AND Age &lt;= 1817, Age &gt;= 1817 AND Age &lt;= 1818, Age &gt;= 1818 AND Age &lt;= 1819, Age &gt;= 1819 AND Age &lt;= 1820, Age &gt;= 1820 AND Age &lt;= 1821, Age &gt;= 1821 AND Age &lt;= 1822, Age &gt;= 1822 AND Age &lt;= 1823, Age &gt;= 1823 AND Age &lt;= 1824, Age &gt;= 1824 AND Age &lt;= 1825, Age &gt;= 1825 AND Age &lt;= 1826, Age &gt;= 1826 AND Age &lt;= 1827, Age &gt;= 1827 AND Age &lt;= 1828, Age &gt;= 1828 AND Age &lt;= 1829, Age &gt;= 1829 AND Age &lt;= 1830, Age &gt;= 1830 AND Age &lt;= 1831, Age &gt;= 1831 AND Age &lt;= 1832, Age &gt;= 1832 AND Age &lt;= 1833, Age &gt;= 1833 AND Age &lt;= 1834, Age &gt;= 1834 AND Age &lt;= 1835, Age &gt;= 1835 AND Age &lt;= 1836, Age &gt;= 1836 AND Age &lt;= 1837, Age &gt;= 1837 AND Age &lt;= 1838, Age &gt;= 1838 AND Age &lt;= 1839, Age &gt;= 1839 AND Age &lt;= 1840, Age &gt;= 1840 AND Age &lt;= 1841, Age &gt;= 1841 AND Age &lt;= 1842, Age &gt;= 1842 AND Age &lt;= 1843, Age &gt;= 1843 AND Age &lt;= 1844, Age &gt;= 1844 AND Age &lt;= 1845, Age &gt;= 1845 AND Age &lt;= 1846, Age &gt;= 1846 AND Age &lt;= 1847, Age &gt;= 1847 AND Age &lt;= 1848, Age &gt;= 1848 AND Age &lt;= 1849, Age &gt;= 1849 AND Age &lt;= 1850, Age &gt;= 1850 AND Age &lt;= 1851, Age &gt;= 1851 AND Age &lt;= 1852, Age &gt;= 1852 AND Age &lt;= 1853, Age &gt;= 1853 AND Age &lt;= 1854, Age &gt;= 1854 AND Age &lt;= 1855, Age &gt;= 1855 AND Age &lt;= 1856, Age &gt;= 1856 AND Age &lt;= 1857, Age &gt;= 1857 AND Age &lt;= 1858, Age &gt;= 1858 AND Age &lt;= 1859, Age &gt;= 1859 AND Age &lt;= 1860, Age &gt;= 1860 AND Age &lt;= 1861, Age &gt;= 1861 AND Age &lt;= 1862, Age &gt;= 1862 AND Age &lt;= 1863, Age &gt;= 1863 AND Age &lt;= 1864, Age &gt;= 1864 AND Age &lt;= 1865, Age &gt;= 1865 AND Age &lt;= 1866, Age &gt;= 1866 AND Age &lt;= 1867, Age &gt;= 1867 AND Age &lt;= 1868, Age &gt;= 1868 AND Age &lt;= 1869, Age &gt;= 1869 AND Age &lt;= 1870, Age &gt;= 1870 AND Age &lt;= 1871, Age &gt;= 1871 AND Age &lt;= 1872, Age &gt;= 1872 AND Age &lt;= 1873, Age &gt;= 1873 AND Age &lt;= 1874, Age &gt;= 1874 AND Age &lt;= 1875, Age &gt;= 1875 AND Age &lt;= 1876, Age &gt;= 1876 AND Age &lt;= 1877, Age &gt;= 1877 AND Age &lt;= 1878, Age &gt;= 1878 AND Age &lt;= 1879, Age &gt;= 1879 AND Age &lt;= 1880, Age &gt;= 1880 AND Age &lt;= 1881, Age &gt;= 1881 AND Age &lt;= 1882, Age &gt;= 1882 AND Age &lt;= 1883, Age &gt;= 1883 AND Age &lt;= 1884, Age &gt;= 1884 AND Age &lt;= 1885, Age &gt;= 1885 AND Age &lt;= 1886, Age &gt;= 1886 AND Age &lt;= 1887, Age &gt;= 1887 AND Age &lt;= 1888, Age &gt;= 1888 AND Age &lt;= 1889, Age &gt;= 1889 AND Age &lt;= 1890, Age &gt;= 1890 AND Age &lt;= 1891, Age &gt;= 1891 AND Age &lt;= 1892, Age &gt;= 1892 AND Age &lt;= 1893, Age &gt;= 1893 AND Age &lt;= 1894, Age &gt;= 1894 AND Age &lt;= 1895, Age &gt;= 1895 AND Age &lt;= 1896, Age &gt;= 1896 AND Age &lt;= 1897, Age &gt;= 1897 AND Age &lt;= 1898, Age &gt;= 1898 AND Age &lt;= 1899, Age &gt;= 1899 AND Age &lt;= 1900, Age &gt;= 1900 AND Age &lt;= 1901, Age &gt;= 1901 AND Age &lt;= 1902, Age &gt;= 1902 AND Age &lt;= 1903, Age &gt;= 1903 AND Age &lt;= 1904, Age &gt;= 1904 AND Age &lt;= 1905, Age &gt;= 1905 AND Age &lt;= 1906, Age &gt;= 1906 AND Age &lt;= 1907, Age &gt;= 1907 AND Age &lt;= 1908, Age &gt;= 1908 AND Age &lt;= 1909, Age &gt;= 1909 AND Age &lt;= 1910, Age &gt;= 1910 AND Age &lt;= 1911, Age &gt;= 1911 AND Age &lt;= 1912, Age &gt;= 1912 AND Age &lt;= 1913, Age &gt;= 1913 AND Age &lt;= 1914, Age &gt;= 1914 AND Age &lt;= 1915, Age &gt;= 1915 AND Age &lt;= 1916, Age &gt;= 1916 AND Age &lt;= 1917, Age &gt;= 1917 AND Age &lt;= 1918, Age &gt;= 1918 AND Age &lt;= 1919, Age &gt;= 1919 AND Age &lt;= 1920, Age &gt;= 1920 AND Age &lt;= 1921, Age &gt;= 1921 AND Age &lt;= 1922, Age &gt;= 1922 AND Age &lt;= 1923, Age &gt;= 1923 AND Age &lt;= 1924, Age &gt;= 1924 AND Age &lt;= 1925, Age &gt;= 1925 AND Age &lt;= 1926, Age &gt;= 1926 AND Age &lt;= 1927, Age &gt;= 1927 AND Age &lt;= 1928, Age &gt;= 1928 AND Age &lt;= 1929, Age &gt;= 1929 AND Age &lt;= 1930, Age &gt;= 1930 AND Age &lt;= 1931, Age &gt;= 1931 AND Age &lt;= 1932, Age &gt;= 1932 AND Age &lt;= 1933, Age &gt;= 1933 AND Age &lt;= 1934, Age &gt;= 1934 AND Age &lt;= 1935, Age &gt;= 1935 AND Age &lt;= 1936, Age &gt;= 1936 AND Age &lt;= 1937, Age &gt;= 1937 AND Age &lt;= 1938, Age &gt;= 1938 AND Age &lt;= 1939, Age &gt;= 1939 AND Age &lt;= 1940, Age &gt;= 1940 AND Age &lt;= 1941, Age &gt;= 1941 AND Age &lt;= 1942, Age &gt;= 1942 AND Age &lt;= 1943, Age &gt;= 1943 AND Age &lt;= 1944, Age &gt;= 1944 AND Age &lt;= 1945, Age &gt;= 1945 AND Age &lt;= 1946, Age &gt;= 1946 AND Age &lt;= 1947, Age &gt;= 1947 AND Age &lt;= 1948, Age &gt;= 1948 AND Age &lt;= 1949, Age &gt;= 1949 AND Age &lt;= 1950, Age &gt;= 1950 AND Age &lt;= 1951, Age &gt;= 1951 AND Age &lt;= 1952, Age &gt;= 1952 AND Age &lt;= 1953, Age &gt;= 1953 AND Age &lt;= 1954, Age &gt;= 1954 AND Age &lt;= 1955, Age &gt;= 1955 AND Age &lt;= 1956, Age &gt;= 1956 AND Age &lt;= 1957, Age &gt;= 1957 AND Age &lt;= 1958, Age &gt;= 1958 AND Age &lt;= 1959, Age &gt;= 1959 AND Age &lt;= 1960, Age &gt;= 1960 AND Age &lt;= 1961, Age &gt;= 1961 AND Age &lt;= 1962, Age &gt;= 1962 AND Age &lt;= 1963, Age &gt;= 1963 AND Age &lt;= 1964, Age &gt;= 1964 AND Age &lt;= 1965, Age &gt;= 1965 AND Age &lt;= 1966, Age &gt;= 1966 AND Age &lt;= 1967, Age &gt;= 1967 AND Age &lt;= 1968, Age &gt;= 1968 AND Age &lt;= 1969, Age &gt;= 1969 AND Age &lt;= 1970, Age &gt;= 1970 AND Age &lt;= 1971, Age &gt;= 1971 AND Age &lt;= 1972, Age &gt;= 1972 AND Age &lt;= 1973, Age &gt;= 1973 AND Age &lt;= 1974, Age &gt;= 1974 AND Age &lt;= 1975, Age &gt;= 1975 AND Age &lt;= 1976, Age &gt;= 1976 AND Age &lt;= 1977, Age &gt;= 1977 AND Age &lt;= 1978, Age &gt;= 1978 AND Age &lt;= 1979, Age &gt;= 1979 AND Age &lt;= 1980, Age &gt;= 1980 AND Age &lt;= 1981, Age &gt;= 1981 AND Age &lt;= 1982, Age &gt;= 1982 AND Age &lt;= 1983, Age &gt;= 1983 AND Age &lt;= 1984, Age &gt;= 1984 AND Age &lt;= 1985, Age &gt;= 1985 AND Age &lt;= 1986, Age &gt;= 1986 AND Age &lt;= 1987, Age &gt;= 1987 AND Age &lt;= 1988, Age &gt;= 1988 AND Age &lt;= 1989, Age &gt;= 1989 AND Age &lt;= 1990, Age &gt;= 1990 AND Age &lt;= 1991, Age &gt;= 1991 AND Age &lt;= 1992, Age &gt;= 1992 AND Age &lt;= 1993, Age &gt;= 1993 AND Age &lt;= 1994, Age &gt;= 1994 AND Age &lt;= 1995, Age &gt;= 1995 AND Age &lt;= 1996, Age &gt;= 1996 AND Age &lt;= 1997, Age &gt;= 1997 AND Age &lt;= 1998, Age &gt;= 1998 AND Age &lt;= 1999, Age &gt;= 1999 AND Age &lt;= 2000, Age &gt;= 2000 AND Age &lt;= 2001, Age &gt;= 2001 AND Age &lt;= 2002, Age &gt;= 2002 AND Age &lt;= 2003, Age &gt;= 2003 AND Age &lt;= 2004, Age &gt;= 2004 AND Age &lt;= 2005, Age &gt;= 2005 AND Age &lt;= 2006, Age &gt;= 2006 AND Age &lt;= 2007, Age &gt;= 2007 AND Age &lt;= 2008, Age &gt;= 2008 AND Age &lt;= 2009, Age &gt;= 2009 AND Age &lt;= 2010, Age &gt;= 2010 AND Age &lt;= 2011, Age &gt;= 2011 AND Age &lt;= 2012, Age &gt;= 2012 AND Age &lt;= 2013, Age &gt;= 2013 AND Age &lt;= 2014, Age &gt;= 2014 AND Age &lt;= 2015, Age &gt;= 2015 AND Age &lt;= 2016, Age &gt;= 2016 AND Age &lt;= 2017, Age &gt;= 2017 AND Age &lt;= 2018, Age &gt;= 2018 AND Age &lt;= 2019, Age &gt;= 2019 AND Age &lt;= 2020, Age &gt;= 2020 AND Age &lt;= 2021, Age &gt;= 2021 AND Age &lt;= 2022, Age &gt;= 2022 AND Age &lt;= 2023, Age &gt;= 2023 AND Age &lt;= 2024, Age &gt;= 2024 AND Age &lt;= 2025, Age &gt;= 2025 AND Age &lt;= 2026, Age &gt;= 2026 AND Age &lt;= 2027, Age &gt;= 2027 AND Age &lt;= 2028, Age &gt;= 2028 AND Age &lt;= 2029, Age &gt;= 2029 AND Age &lt;= 2030, Age &gt;= 2030 AND Age &lt;= 2031, Age &gt;= 2031 AND Age &lt;= 2032, Age &gt;= 2032 AND Age &lt;= 2033, Age &gt;= 2033 AND Age &lt;= 2034, Age &gt;= 2034 AND Age &lt;= 2035, Age &gt;= 2035 AND Age &lt;= 2036, Age &gt;= 2036 AND Age &lt;= 2037, Age &gt;= 2037 AND Age &lt;= 2038, Age &gt;= 2038 AND Age &lt;= 2039, Age &gt;= 2039 AND Age &lt;= 2040, Age &gt;= 2040 AND Age &lt;= 2041, Age &gt;= 2041 AND Age &lt;= 2042, Age &gt;= 2042 AND Age &lt;= 2043, Age &gt;= 2043 AND Age &lt;= 2044, Age &gt;= 2044 AND Age &lt;= 2045, Age &gt;= 2045 AND Age &lt;= 2046, Age &gt;= 2046 AND Age &lt;= 2047, Age &gt;= 2047 AND Age &lt;= 2048) " time="4.289">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where FullName = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where FullName = $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, ShipTo.Country select Lines[].Product as ProductName, ShipTo.Country as Country, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, ShipTo.Country select Lines[].Product as ProductName, ShipTo.Country as Country, count() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select timeseries(from small group by &apos;1 Minutes&apos;   select max(), min(), average()) as HeartRate limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select timeseries(from small group by &apos;1 Minutes&apos;   select max(), min(), average()) as HeartRate limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithICollection&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithICollection&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 or Revision &lt; $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 or Revision &lt; $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PlacesByTermsAndLocation&apos; where (search(Name, $p2) or search(Terms, $p3)) order by spatial.distance(Coordinates, spatial.point($p0, $p1)) limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;PlacesByTermsAndLocation&apos; where (search(Name, $p2) or search(Terms, $p3)) order by spatial.distance(Coordinates, spatial.point($p0, $p1)) limit $p4, $p5 " time="0.011">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select suggest(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select suggest(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; where startsWith(id(), $p0) " name="RavenDB Queries can parse -  from &apos;Documents&apos; where startsWith(id(), $p0) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Manufacturer = $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Manufacturer = $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 and Revision &lt;= $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 and Revision &lt;= $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/3&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/3&apos; order by Date " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { DateTime : x.DateTime, DateTimeMinValue : new Date(-62135596800000), DateTimeMaxValue : new Date(253402297199999) };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { DateTime : x.DateTime, DateTimeMinValue : new Date(-62135596800000), DateTimeMaxValue : new Date(253402297199999) };   }   from &apos;Articles&apos; as x select output(x) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; where @metadata.@collection = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; where @metadata.@collection = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange/JavaScript&apos; select City " name="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange/JavaScript&apos; select City " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0) group by &apos;1 Months&apos;   select max(), count()) as HeartRate limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0) group by &apos;1 Months&apos;   select max(), count()) as HeartRate limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name != $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Counters/Index/With/CompareExchange/MapReduce&apos; " name="RavenDB Queries can parse -  from index &apos;Counters/Index/With/CompareExchange/MapReduce&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict.a = $p0 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict.a = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(IntVal &lt; $p0, IntVal &gt;= $p1 and IntVal &lt; $p2, IntVal &gt;= $p3) " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(IntVal &lt; $p0, IntVal &gt;= $p1 and IntVal &lt; $p2, IntVal &gt;= $p3) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) limit $p5, $p6 " name="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) limit $p5, $p6 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(item) {   	var georgeAlbums = Object.keys(item.MusicCollection).map(function(a){return{Key: a,Value:item.MusicCollection[a]};}).filter(function(x){return x.Key.startsWith(&quot;G&quot;);}).map(function(s){return s.Value.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   	return { Name : item.Name, GeorgeAlbums : georgeAlbums };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " name="RavenDB Queries can parse -  declare function output(item) {   	var georgeAlbums = Object.keys(item.MusicCollection).map(function(a){return{Key: a,Value:item.MusicCollection[a]};}).filter(function(x){return x.Key.startsWith(&quot;G&quot;);}).map(function(s){return s.Value.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   	return { Name : item.Name, GeorgeAlbums : georgeAlbums };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where IsActive = $p0 and BookVendor = $p1 select facet(id(&apos;facets/test&apos;)) " name="RavenDB Queries can parse -  from index &apos;test&apos; where IsActive = $p0 and BookVendor = $p1 select facet(id(&apos;facets/test&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where search(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeriesWithCompareExchangeIndex&apos; where CompanyName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TimeSeriesWithCompareExchangeIndex&apos; where CompanyName = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Artist as alphaNumeric desc " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Artist as alphaNumeric desc " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Title = $p0 and CustomFields_Age &gt;= $p1 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Title = $p0 and CustomFields_Age &gt;= $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; select suggest(Name, $p0, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee, Company, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee, Company, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Regs&apos; select RegisteredAt, id() as Id limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Regs&apos; select RegisteredAt, id() as Id limit $p0, $p1 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p5 and $p6 where (Tag == $p4) group by &apos;1 Months&apos;   select average(), max()   }   from &apos;People&apos; as p where p.Age &gt; $p0 select { Heartrate : __timeSeriesQueryFunction0(p), Name : p.Name+&quot; &quot;+p.LastName } " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p5 and $p6 where (Tag == $p4) group by &apos;1 Months&apos;   select average(), max()   }   from &apos;People&apos; as p where p.Age &gt; $p0 select { Heartrate : __timeSeriesQueryFunction0(p), Name : p.Name+&quot; &quot;+p.LastName } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.&apos;Group&apos; " name="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.&apos;Group&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Active = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Active = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where search(Name, $p0) and (Resolutions between $p1 and $p2) select Name, Resolutions " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where search(Name, $p0) and (Resolutions between $p1 and $p2) select Name, Resolutions " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by OrderedAt desc " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by OrderedAt desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/Totals&apos; where Company = $p0 select facet(Employee) include Employee " name="RavenDB Queries can parse -  from index &apos;Orders/Totals&apos; where Company = $p0 select facet(Employee) include Employee " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() desc " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() desc " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) limit $p1, $p2 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Article/Index&apos; where (CampaignId = $p0) and (VisibleTo = $p1 or VisibleTo = $p2) " name="RavenDB Queries can parse -  from index &apos;Article/Index&apos; where (CampaignId = $p0) and (VisibleTo = $p1 or VisibleTo = $p2) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDocs&apos; select Name, Number " name="RavenDB Queries can parse -  from &apos;SampleDocs&apos; select Name, Number " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyCharArrayWithIndexWithCount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionDynamicAndStaticParameter&apos; " name="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionDynamicAndStaticParameter&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; where CatsOnlyProperty = $p0 " name="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; where CatsOnlyProperty = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;foo&apos; " name="RavenDB Queries can parse -  from index &apos;foo&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;en-US&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;en-US&quot;) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; order by spatial.distance(&apos;spatial.point(Lat, Lng)&apos;, spatial.point($p1, $p2), $p0) " name="RavenDB Queries can parse -  from &apos;Items&apos; order by spatial.distance(&apos;spatial.point(Lat, Lng)&apos;, spatial.point($p1, $p2), $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyDoubleArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyDoubleArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(user) {   	var first = user.name;   	var last = user.lastName;   	var format = function(){return first+&quot; &quot;+last;};   	return { FullName : format() };   }   from &apos;Users&apos; as user select output(user) " name="RavenDB Queries can parse -  declare function output(user) {   	var first = user.name;   	var last = user.lastName;   	var format = function(){return first+&quot; &quot;+last;};   	return { FullName : format() };   }   from &apos;Users&apos; as user select output(user) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Sales/ByLocation&apos; " name="RavenDB Queries can parse -  from index &apos;Sales/ByLocation&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ItemsWithDynamicFieldsIndex&apos; select facet(prop_brand) " name="RavenDB Queries can parse -  from index &apos;ItemsWithDynamicFieldsIndex&apos; select facet(prop_brand) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Predicate : compareDates(u.Birthday, $p0, &apos;LessThan&apos;) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Predicate : compareDates(u.Birthday, $p0, &apos;LessThan&apos;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index2&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index2&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; where id() = $p0 " name="RavenDB Queries can parse -  from &apos;Documents&apos; where id() = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as user load user.FriendId as f select { Name : user.Name, Downloads : counter(user, &quot;Downloads&quot;), FriendsDownloads : counter(f, &quot;Downloads&quot;) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as user load user.FriendId as f select { Name : user.Name, Downloads : counter(user, &quot;Downloads&quot;), FriendsDownloads : counter(f, &quot;Downloads&quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CasinosSuspensionsIndex&apos; where CityId = $p0 order by DateTime desc select CityId, CasinoId, CasinoAddress, id() as Id, DateTime, Exemptions limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CasinosSuspensionsIndex&apos; where CityId = $p0 order by DateTime desc select CityId, CasinoId, CasinoAddress, id() as Id, DateTime, Exemptions limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where id() in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where id() in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select counter(x, &apos;Total Likes&apos;) as TotalLikes limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select counter(x, &apos;Total Likes&apos;) as TotalLikes limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; order by NameForSorting " name="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; order by NameForSorting " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; select Name, Address as OtherThanName " name="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; select Name, Address as OtherThanName " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) order by Name " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) order by Name " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexPercentOperation&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexPercentOperation&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SuggestionIndex&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;SuggestionIndex&apos; select suggest(Name, $p0, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; " name="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestViews&apos; as x select { Children : (x.Children!=null?x.Children:[null,null,null]), Nums : [0,0,0,0], Bools : [false,false,false,false,false] } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestViews&apos; as x select { Children : (x.Children!=null?x.Children:[null,null,null]), Nums : [0,0,0,0], Bools : [false,false,false,false,false] } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Songs&apos; where Tags = $p0 " name="RavenDB Queries can parse -  from &apos;Songs&apos; where Tags = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Key in ($p0) " name="RavenDB Queries can parse -  from &apos;Items&apos; where Key in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithLongs&apos; where Sequence &gt; $p0 " name="RavenDB Queries can parse -  from &apos;WithLongs&apos; where Sequence &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Providers&apos; where (Name = $p0) and (Categories[].Name = $p1) " name="RavenDB Queries can parse -  from &apos;Providers&apos; where (Name = $p0) and (Categories[].Name = $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingTests&apos; where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) " name="RavenDB Queries can parse -  from index &apos;BlogsForHighlightingTests&apos; where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiLocationsCustomFieldName&apos; where spatial.within(someField, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;MultiLocationsCustomFieldName&apos; where spatial.within(someField, spatial.circle($p0, $p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PostCountsByUser/WithName&apos; " name="RavenDB Queries can parse -  from index &apos;PostCountsByUser/WithName&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LastAccessPerUserDateTimeIndex&apos; select Name, LastAccess " name="RavenDB Queries can parse -  from index &apos;LastAccessPerUserDateTimeIndex&apos; select Name, LastAccess " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() between $p0 and $p1 " name="RavenDB Queries can parse -  from &apos;Bunnies&apos; where id() between $p0 and $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &gt; $p0 and Cost &lt; $p1 select facet(Manufacturer), facet(Cost &lt;= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost &gt;= $p9), facet(Megapixels &lt;= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels &gt;= $p15) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &gt; $p0 and Cost &lt; $p1 select facet(Manufacturer), facet(Cost &lt;= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost &gt;= $p9), facet(Megapixels &lt;= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels &gt;= $p15) " time="0.017">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &lt;= $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(membership) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	var userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   	return { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index &apos;MembershipIndex&apos; as membership select output(membership) limit $p0, $p1 " name="RavenDB Queries can parse -  declare function output(membership) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	var userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   	return { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index &apos;MembershipIndex&apos; as membership select output(membership) limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Orders&apos; where lucene(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Cameras&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from &apos;Cameras&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where id() in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where id() in ($p0) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(d, $p1) {   	var externalDocument = id(d)==null?null:load($p1);   	var x = id(d)==null?0:10;   	return { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from &apos;RavenDocuments&apos; as d where id() = $p0 select output(d, $p1) " name="RavenDB Queries can parse -  declare function output(d, $p1) {   	var externalDocument = id(d)==null?null:load($p1);   	var x = id(d)==null?0:10;   	return { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from &apos;RavenDocuments&apos; as d where id() = $p0 select output(d, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMiliseconds = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMiliseconds = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p, name, f, t, src) {   from name between f and t load Tag as src where (Values[0] &lt; $p1) and (src != $p2) group by &apos;1 Months&apos;   select max(), average()   }   declare function output(p, $p3, $p4, $p5) {   	var tsFunc = function(name,f,t){return __timeSeriesQueryFunction0(p, name, f, t, src).Results.filter(function(range){return range.Average[0]&gt;$p3;});};   	return { Name : p.Name+&quot; &quot;+p.LastName, Series : tsFunc(&quot;Heartrate&quot;, $p4, $p5).map(function(r){return {Max:r.Max[0],Avg:r.Average[0]};}) };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p, $p3, $p4, $p5) limit $p6, $p7 " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p, name, f, t, src) {   from name between f and t load Tag as src where (Values[0] &lt; $p1) and (src != $p2) group by &apos;1 Months&apos;   select max(), average()   }   declare function output(p, $p3, $p4, $p5) {   	var tsFunc = function(name,f,t){return __timeSeriesQueryFunction0(p, name, f, t, src).Results.filter(function(range){return range.Average[0]&gt;$p3;});};   	return { Name : p.Name+&quot; &quot;+p.LastName, Series : tsFunc(&quot;Heartrate&quot;, $p4, $p5).map(function(r){return {Max:r.Max[0],Avg:r.Average[0]};}) };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p, $p3, $p4, $p5) limit $p6, $p7 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2==null||x.TargetId===$p3;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2==null||x.TargetId===$p3;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0), suggest(Company, $p1) " name="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0), suggest(Company, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DateIn != $p0 select facet(DateIn &lt; $p1, DateIn &gt;= $p2 and DateIn &lt; $p3, DateIn &gt;= $p4) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DateIn != $p0 select facet(DateIn &lt; $p1, DateIn &gt;= $p2 and DateIn &lt; $p3, DateIn &gt;= $p4) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SpatialDocs&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;SpatialDocs&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by T1 desc " name="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by T1 desc " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ZC/CountryCityStateCodeACIndex&apos; where CountryCode = $p0 and startsWith(City, $p1) order by CityOrder " name="RavenDB Queries can parse -  from index &apos;ZC/CountryCityStateCodeACIndex&apos; where CountryCode = $p0 and startsWith(City, $p1) order by CityOrder " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u load u.FriendId as f select counter(f, Downloads) as Downloads " name="RavenDB Queries can parse -  from &apos;Users&apos; as u load u.FriendId as f select counter(f, Downloads) as Downloads " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where OrganizationId = $p0 or ((CaseId != $p1 and HistoryCode = $p2)) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where OrganizationId = $p0 or ((CaseId != $p1 and HistoryCode = $p2)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IdentityProjectionIndex1&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;IdentityProjectionIndex1&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(membership, userGroups) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	return { Organization : id(organization) };   }   from index &apos;MembershipIndex&apos; as membership load membership.UserGroups as userGroups[] select output(membership, userGroups) " name="RavenDB Queries can parse -  declare function output(membership, userGroups) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	return { Organization : id(organization) };   }   from index &apos;MembershipIndex&apos; as membership load membership.UserGroups as userGroups[] select output(membership, userGroups) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyCharArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray in ($p0) and SomeProperty = $p1 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray in ($p0) and SomeProperty = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Country = $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Country = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SortOnNullableEntity/Search&apos; order by Num as long " name="RavenDB Queries can parse -  from index &apos;SortOnNullableEntity/Search&apos; order by Num as long " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,timeseries(&apos;Heartrate&apos;, null,null) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,timeseries(&apos;Heartrate&apos;, null,null) limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; " name="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by random(&apos;seed2&apos;) " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by random(&apos;seed2&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale3&apos; where lucene(Any, $p0) select id() as Id, Name, Brand " name="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale3&apos; where lucene(Any, $p0) select id() as Id, Name, Brand " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Times&apos; as x select { TimeSpan1 : convertToTimeSpanString(x.Ticks), TimeSpan2 : convertToTimeSpanString(x.Hours, x.Minutes, x.Seconds), TimeSpan3 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds), TimeSpan4 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds, x.Milliseconds), TimeSpan5 : convertToTimeSpanString($p0, x.Minutes, $p1), TimeSpan6 : convertToTimeSpanString($p2, x.Hours, $p3, x.Seconds), TimeSpan7 : convertToTimeSpanString($p4, $p5, $p6, $p7, $p8), TimeSpan8 : convertToTimeSpanString(x.Summary.reduce(function(a, b) { return a + b; }, 0)), TimeSpan9 : convertToTimeSpanString(x.TimeSummary.map(function(t){return t.Ticks;}).reduce(function(a, b) { return a + b; }, 0)) } " name="RavenDB Queries can parse -  from &apos;Times&apos; as x select { TimeSpan1 : convertToTimeSpanString(x.Ticks), TimeSpan2 : convertToTimeSpanString(x.Hours, x.Minutes, x.Seconds), TimeSpan3 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds), TimeSpan4 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds, x.Milliseconds), TimeSpan5 : convertToTimeSpanString($p0, x.Minutes, $p1), TimeSpan6 : convertToTimeSpanString($p2, x.Hours, $p3, x.Seconds), TimeSpan7 : convertToTimeSpanString($p4, $p5, $p6, $p7, $p8), TimeSpan8 : convertToTimeSpanString(x.Summary.reduce(function(a, b) { return a + b; }, 0)), TimeSpan9 : convertToTimeSpanString(x.TimeSummary.map(function(t){return t.Ticks;}).reduce(function(a, b) { return a + b; }, 0)) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where IsLocked = $p0 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where IsLocked = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Start as long desc " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Start as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u) {   	var format = function(user){return user.Name+&quot; &quot;+u.LastName;};   	var detail = load(u.DetailId);   	return { FullName : format(u), DetailNumber : detail.Number };   }   from &apos;Users&apos; as u select output(u) " name="RavenDB Queries can parse -  declare function output(u) {   	var format = function(user){return user.Name+&quot; &quot;+u.LastName;};   	var detail = load(u.DetailId);   	return { FullName : format(u), DetailNumber : detail.Number };   }   from &apos;Users&apos; as u select output(u) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Prop1 = $p0 and Prop2 = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Prop1 = $p0 and Prop2 = $p1 limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Family/MultiMap&apos; where PersonId = $p0 select PersonId, Name, Children " name="RavenDB Queries can parse -  from index &apos;Family/MultiMap&apos; where PersonId = $p0 select PersonId, Name, Children " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LargeKeysInVoronFunction&apos; " name="RavenDB Queries can parse -  from index &apos;LargeKeysInVoronFunction&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexDivideOperation&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexDivideOperation&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; as __alias0 select __alias0.&apos;Limit&apos; " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; as __alias0 select __alias0.&apos;Limit&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Name, $p0) include highlight(Name,128,1) " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Name, $p0) include highlight(Name,128,1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Next) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Next) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;VersionedDocuments&apos; select Id, Version, Document limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;VersionedDocuments&apos; select Id, Version, Document limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where OrganizationId = $p0 or ((HistoryCode = $p1 and CaseId != $p2)) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where OrganizationId = $p0 or ((HistoryCode = $p1 and CaseId != $p2)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Tax), min(Tax)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Tax), min(Tax)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserByFirstName&apos; where FirstName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UserByFirstName&apos; where FirstName = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select o.ShipTo.Country " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select o.ShipTo.Country " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DummyIndex&apos; where Guid = $p0 " name="RavenDB Queries can parse -  from index &apos;DummyIndex&apos; where Guid = $p0 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Product.Name = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Product.Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { DayOfBirth : new Date(Date.parse(u.Birthday)).getDate(), MonthOfBirth : new Date(Date.parse(u.Birthday)).getMonth()+1, Age : new Date().getFullYear()-new Date(Date.parse(u.Birthday)).getFullYear() } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { DayOfBirth : new Date(Date.parse(u.Birthday)).getDate(), MonthOfBirth : new Date(Date.parse(u.Birthday)).getMonth()+1, Age : new Date().getFullYear()-new Date(Date.parse(u.Birthday)).getFullYear() } " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  match (Person as f)-[Relationships as r select TargetId]-&gt;(Person as t) " name="RavenDB Queries can parse -  match (Person as f)-[Relationships as r select TargetId]-&gt;(Person as t) " time="0">
      <skipped/>
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Items.Color = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Items.Color = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; order by Num as long " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; order by Num as long " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (id() != $p0 and id() != $p1) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (id() != $p0 and id() != $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Desc = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Desc = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleNan = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleNan = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tests&apos; select Headers.&apos;ABC.DEF&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Tests&apos; select Headers.&apos;ABC.DEF&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { Children : x.Children.map(function(c){return {Id:id(c),Name:c.Name};}) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { Children : x.Children.map(function(c){return {Id:id(c),Name:c.Name};}) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Double as double " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Double as double " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Sites/ByAdminData&apos; order by Admin_GroupName select distinct Admin_GroupName " name="RavenDB Queries can parse -  from index &apos;Sites/ByAdminData&apos; order by Admin_GroupName select distinct Admin_GroupName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where exact(Name = $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where exact(Name = $p0) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select count(), standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select count(), standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDocs&apos; where Number = $p0 " name="RavenDB Queries can parse -  from &apos;SampleDocs&apos; where Number = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;CalcSystems&apos; where Server != $p0 select distinct Server " name="RavenDB Queries can parse -  from &apos;CalcSystems&apos; where Server != $p0 select distinct Server " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	var employees = load(update.EmployeesIds);   	return { Company : update.Name, Employees : employees.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " name="RavenDB Queries can parse -  declare function output(o, __alias0) {   	var update = __alias0;   	var employees = load(update.EmployeesIds);   	return { Company : update.Name, Employees : employees.map(function(e){return e.FirstName;}) };   }   from &apos;Orders&apos; as o load o.Company as __alias0 select output(o, __alias0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where search(id(), $p0) " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where search(id(), $p0) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleByName&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Country in ($p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Country in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateVal &lt; $p0, DateVal &gt;= $p1 and DateVal &lt; $p2, DateVal &gt;= $p3 and DateVal &lt; $p4, DateVal &gt;= $p5 and DateVal &lt; $p6, DateVal &gt;= $p7 and DateVal &lt; $p8, DateVal &gt;= $p9) " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateVal &lt; $p0, DateVal &gt;= $p1 and DateVal &lt; $p2, DateVal &gt;= $p3 and DateVal &lt; $p4, DateVal &gt;= $p5 and DateVal &lt; $p6, DateVal &gt;= $p7 and DateVal &lt; $p8, DateVal &gt;= $p9) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; where Foo = $p0 and ((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) order by CreatedDate desc " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; where Foo = $p0 and ((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) order by CreatedDate desc " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(Address, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(Address, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where OrderedAt &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where OrderedAt &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where ZipCodes.Length = $p0 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where ZipCodes.Length = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleIndex&apos; select id() as Id, PropBase, Prop1, Prop2, Str " name="RavenDB Queries can parse -  from index &apos;SampleIndex&apos; select id() as Id, PropBase, Prop1, Prop2, Str " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Packages&apos; as package load package.SomethingElseReference as somethingElse, package.ComplexRuleReference.Id as rule select { PackageId : id(package), RuleName : rule.Name, SomethingElseName : somethingElse.Name } " name="RavenDB Queries can parse -  from &apos;Packages&apos; as package load package.SomethingElseReference as somethingElse, package.ComplexRuleReference.Id as rule select { PackageId : id(package), RuleName : rule.Name, SomethingElseName : somethingElse.Name } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where Lines[].PricePerUnit &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where Lines[].PricePerUnit &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 include timings() " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 include timings() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex12&apos; select Combined limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex12&apos; select Combined limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitle&apos; where search(Title, $p0) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitle&apos; where search(Title, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestableSubDTOs&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestableSubDTOs&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item load item.Categories as categories[] select { Key : id(item).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0], Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {Key:id(__rvn0.cat).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0],Name:__rvn0.name};}) } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item load item.Categories as categories[] select { Key : id(item).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0], Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {Key:id(__rvn0.cat).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0],Name:__rvn0.name};}) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select build.BuildDate " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select build.BuildDate " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMap&apos; order by Date desc " name="RavenDB Queries can parse -  from index &apos;MultiMap&apos; order by Date desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u0015Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\u0015Users&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/ByNumericAttribute&apos; where Color &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;Product/ByNumericAttribute&apos; where Color &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonWithCompanyIndex&apos; as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonWithCompanyIndex&apos; as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as o select { Id : id(o), ChangeVector : getMetadata(o)[&apos;@change-vector&apos;] } " name="RavenDB Queries can parse -  from &apos;Companies&apos; as o select { Id : id(o), ChangeVector : getMetadata(o)[&apos;@change-vector&apos;] } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArrayWithIndexWithCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestClasses&apos; " name="RavenDB Queries can parse -  from &apos;TestClasses&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p, company) {   from company.Stock between $p2 and $p3 where (Tag == $p1) group by &apos;1 Months&apos;   select average(), max()   }   from &apos;People&apos; as p where p.Age &gt; $p0 load p.WorksAt as company select { Heartrate : __timeSeriesQueryFunction0(p, company), Name : p.Name+&quot; &quot;+p.LastName } " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p, company) {   from company.Stock between $p2 and $p3 where (Tag == $p1) group by &apos;1 Months&apos;   select average(), max()   }   from &apos;People&apos; as p where p.Age &gt; $p0 load p.WorksAt as company select { Heartrate : __timeSeriesQueryFunction0(p, company), Name : p.Name+&quot; &quot;+p.LastName } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Decimal as double " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Decimal as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/AllProperties&apos; where Query = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/AllProperties&apos; where Query = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Animal/Index&apos; where (Type = $p0 or (search(Name, $p1) and search(Name, $p2))) " name="RavenDB Queries can parse -  from index &apos;Animal/Index&apos; where (Type = $p0 or (search(Name, $p1) and search(Name, $p2))) " time="0.017">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;indexes/users/default2&apos; select Friend " name="RavenDB Queries can parse -  from index &apos;indexes/users/default2&apos; select Friend " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UserTalks&apos; select UserDefs " name="RavenDB Queries can parse -  from &apos;UserTalks&apos; select UserDefs " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 group by &apos;1 Hours&apos;  with interpolation(Linear) select percentile(10.404390753435152)) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 group by &apos;1 Hours&apos;  with interpolation(Linear) select percentile(10.404390753435152)) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(Address, $p0) " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(Address, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? -1 : (a.ProductName &gt; b.ProductName)? 1 : 0);}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? -1 : (a.ProductName &gt; b.ProductName)? 1 : 0);}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange&apos; select City " name="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange&apos; select City " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestCustomers&apos; " name="RavenDB Queries can parse -  from &apos;TestCustomers&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (Birthday &lt; $p0 and Birthday != $p1) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (Birthday &lt; $p0 and Birthday != $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedField&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedField&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BookSearch&apos; where Keywords in ($p0) " name="RavenDB Queries can parse -  from index &apos;BookSearch&apos; where Keywords in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1 Months&apos;   select average(), max()   }   declare function output(p) {   	var heartrate = __timeSeriesQueryFunction0(p);   	return { Heartrate : heartrate, Name : p.Name+&quot; &quot;+p.LastName };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p) " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1 Months&apos;   select average(), max()   }   declare function output(p) {   	var heartrate = __timeSeriesQueryFunction0(p);   	return { Heartrate : heartrate, Name : p.Name+&quot; &quot;+p.LastName };   }   from &apos;People&apos; as p where p.Age &gt; $p0 select output(p) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &gt; $p0 order by Name as alphaNumeric " name="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &gt; $p0 order by Name as alphaNumeric " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyIntArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyIntArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;VacancyCampaignsIndex&apos; where Active = $p0 select id() as Id, Category, CampaignId, Title, Active " name="RavenDB Queries can parse -  from index &apos;VacancyCampaignsIndex&apos; where Active = $p0 select id() as Id, Category, CampaignId, Title, Active " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where search(Title, $p0) and search(Desc, $p1) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where search(Title, $p0) and search(Desc, $p1) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ETIS/NewsDocumentIndex&apos; where AuthorNamesStr = $p0 " name="RavenDB Queries can parse -  from index &apos;ETIS/NewsDocumentIndex&apos; where AuthorNamesStr = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Tags, $p1)) " name="RavenDB Queries can parse -  from index &apos;test&apos; where (search(Tags, $p0) or search(Tags, $p1)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &lt;= $p0 select id() as Id, AmountLeft " name="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &lt;= $p0 select id() as Id, AmountLeft " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(ExternalId, $p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(ExternalId, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Count &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { ProjectedMean : x.ResultLookup!=null?x.ResultLookup[(x.NullableDecision!=null?x.NullableDecision:true)?(x.PlotTypeDecision?&quot;Type2&quot;:&quot;Type4&quot;):x.PlotTypeDecision?&quot;Type1&quot;:&quot;Type3&quot;].Mean:null } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { ProjectedMean : x.ResultLookup!=null?x.ResultLookup[(x.NullableDecision!=null?x.NullableDecision:true)?(x.PlotTypeDecision?&quot;Type2&quot;:&quot;Type4&quot;):x.PlotTypeDecision?&quot;Type1&quot;:&quot;Type3&quot;].Mean:null } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Books/Search&apos; where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Books/Search&apos; where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) " name="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 or Revision &lt;= $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt;= $p0 or Revision &lt;= $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where startsWith(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; select IdCollection.Length as IdCount limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Documents&apos; select IdCollection.Length as IdCount limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BookingIndex&apos; as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;BookingIndex&apos; as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByUsers&apos; " name="RavenDB Queries can parse -  from index &apos;Users/ByUsers&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(s, $p0, $p1) {   	var source = s.Children;   	return { Id : id(s), Matched : source.filter(function(x){return !$p0||$p1.hasOwnProperty(id(x));}) };   }   from &apos;Documents&apos; as s select output(s, $p0, $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  declare function output(s, $p0, $p1) {   	var source = s.Children;   	return { Id : id(s), Matched : source.filter(function(x){return !$p0||$p1.hasOwnProperty(id(x));}) };   }   from &apos;Documents&apos; as s select output(s, $p0, $p1) limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where search(Name, $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Invoices&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Invoices&apos; limit $p0, $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name &lt;= $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by score(), Name " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by score(), Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Invoices&apos; as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {__rvn1:__rvn1,test:&quot;test&quot;};}).map(function(__rvn2){return {__rvn2:__rvn2,test2:&quot;test2&quot;};}).map(function(__rvn3){return {Id:id(__rvn3.__rvn2.__rvn1.__rvn0.order),CustomerName:__rvn3.__rvn2.__rvn1.customer.Name,Items:__rvn3.__rvn2.__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {__rvn0:__rvn0,test3:&quot;test3&quot;};}).map(function(__rvn1){return {__rvn1:__rvn1,test4:&quot;test4&quot;};}).map(function(__rvn2){return {ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.__rvn0.category.Name,Test:__rvn3.__rvn2.test.substr(2),Test2:__rvn3.test2.substr(2),Test3:__rvn2.__rvn1.test3.substr(2),Test4:__rvn2.test4.substr(2)};}),Instructions:__rvn3.__rvn2.__rvn1.__rvn0.order.Instructions.map(function(instruction){return {instruction:instruction,test5:&quot;test5&quot;};}).map(function(__rvn0){return {__rvn0:__rvn0,test6:&quot;test6&quot;};}).map(function(__rvn1){return {Title:__rvn1.__rvn0.instruction.Title,Test5:__rvn1.__rvn0.test5.substr(2),Test6:__rvn1.test6.substr(2)};})};}) } " name="RavenDB Queries can parse -  from &apos;Invoices&apos; as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {__rvn1:__rvn1,test:&quot;test&quot;};}).map(function(__rvn2){return {__rvn2:__rvn2,test2:&quot;test2&quot;};}).map(function(__rvn3){return {Id:id(__rvn3.__rvn2.__rvn1.__rvn0.order),CustomerName:__rvn3.__rvn2.__rvn1.customer.Name,Items:__rvn3.__rvn2.__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {__rvn0:__rvn0,test3:&quot;test3&quot;};}).map(function(__rvn1){return {__rvn1:__rvn1,test4:&quot;test4&quot;};}).map(function(__rvn2){return {ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.__rvn0.category.Name,Test:__rvn3.__rvn2.test.substr(2),Test2:__rvn3.test2.substr(2),Test3:__rvn2.__rvn1.test3.substr(2),Test4:__rvn2.test4.substr(2)};}),Instructions:__rvn3.__rvn2.__rvn1.__rvn0.order.Instructions.map(function(instruction){return {instruction:instruction,test5:&quot;test5&quot;};}).map(function(__rvn0){return {__rvn0:__rvn0,test6:&quot;test6&quot;};}).map(function(__rvn1){return {Title:__rvn1.__rvn0.instruction.Title,Test5:__rvn1.__rvn0.test5.substr(2),Test6:__rvn1.test6.substr(2)};})};}) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  with {from &apos;Foos&apos; where Name in ($w0p0)} as Foo   with {from &apos;Bars&apos; where Age &gt;= $w1p0} as Bar   match (Foo)-[Bars as _]-&gt;(Bars as Bar) " name="RavenDB Queries can parse -  with {from &apos;Foos&apos; where Name in ($w0p0)} as Foo   with {from &apos;Bars&apos; where Age &gt;= $w1p0} as Bar   match (Foo)-[Bars as _]-&gt;(Bars as Bar) " time="0">
      <skipped/>
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(   from Heartrate between $start and $end   where Tag = &apos;watches/fitbit&apos;   group by &apos;1 month&apos;   select min(), max(), avg()   ) as __timeSeriesQueryFunction " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(   from Heartrate between $start and $end   where Tag = &apos;watches/fitbit&apos;   group by &apos;1 month&apos;   select min(), max(), avg()   ) as __timeSeriesQueryFunction " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CarIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;CarIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.GivenName+&quot; &quot;+customer.FamilyName, Phone : Object.keys(customer.Phones2).map(function(a){return{Key: a,Value:customer.Phones2[a]};}).filter(function(phone){return phone.Key===&quot;Work&quot;;}) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.GivenName+&quot; &quot;+customer.FamilyName, Phone : Object.keys(customer.Phones2).map(function(a){return{Key: a,Value:customer.Phones2[a]};}).filter(function(phone){return phone.Key===&quot;Work&quot;;}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexWithThenBy&apos; " name="RavenDB Queries can parse -  from index &apos;TestIndexWithThenBy&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArray = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Phone &gt; $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Phone &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleDataIndex&apos; where search(Query, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;SampleDataIndex&apos; where search(Query, $p0) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FTSIndex&apos; where lucene(MyProp, $p0) " name="RavenDB Queries can parse -  from index &apos;FTSIndex&apos; where lucene(MyProp, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings all in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings all in ($p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NestedPropertyIndex1&apos; where Zip = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;NestedPropertyIndex1&apos; where Zip = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { CheckGroup : (((x.Quantity!=null?x.Quantity:0))!==0?2:3)===2?1:0, CheckGroup1 : (x.Quantity==null?1:2)===1?1:2, CheckGroup2 : (x.Quantity!=null?x.Quantity:0), CheckGroup3 : (x.Quantity!=null?x.Quantity:0), CheckGroup4 : ((x.Quantity!=null?x.Quantity:0))!==0?2:3, CheckGroup5 : x.Quantity!=null?x.Quantity:0 };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { CheckGroup : (((x.Quantity!=null?x.Quantity:0))!==0?2:3)===2?1:0, CheckGroup1 : (x.Quantity==null?1:2)===1?1:2, CheckGroup2 : (x.Quantity!=null?x.Quantity:0), CheckGroup3 : (x.Quantity!=null?x.Quantity:0), CheckGroup4 : ((x.Quantity!=null?x.Quantity:0))!==0?2:3, CheckGroup5 : x.Quantity!=null?x.Quantity:0 };   }   from &apos;Articles&apos; as x select output(x) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitle&apos; where (exists(Title) and not search(Title, $p0)) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitle&apos; where (exists(Title) and not search(Title, $p0)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Year  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Year  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; where @metadata.MyCustomProperty = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; where @metadata.MyCustomProperty = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Employees/Query&apos; where search(Query, $p0) " name="RavenDB Queries can parse -  from index &apos;Employees/Query&apos; where search(Query, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMapIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;MultiMapIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooBarIndex&apos; where startsWith(Bar, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;FooBarIndex&apos; where startsWith(Bar, $p0) limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicSpatial&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;DynamicSpatial&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AmazingIndex&apos; select id() as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;AmazingIndex&apos; select id() as Id, Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; select id() as Id, UserId, Family_Dad_Id " name="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; select id() as Id, UserId, Family_Dad_Id " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where lucene(Title.Length, $p0) and lucene(Category, $p1) " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where lucene(Title.Length, $p0) and lucene(Category, $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BarnIndex&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;BarnIndex&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale&apos; where lucene(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/MethodSyntax&apos; " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/MethodSyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; where EmailDomain in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; where EmailDomain in ($p0) limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex8&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex8&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Search&apos; where Email = $p0 " name="RavenDB Queries can parse -  from index &apos;User/Search&apos; where Email = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex3&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex3&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BookingIndexFullNameIsFullNameMapStartToBegin&apos; as x where x.FullName = $p0 select { Start : x.Begin.toString() } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;BookingIndexFullNameIsFullNameMapStartToBegin&apos; as x where x.FullName = $p0 select { Start : x.Begin.toString() } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Cameras&apos; order by Megapixels as double " name="RavenDB Queries can parse -  from &apos;Cameras&apos; order by Megapixels as double " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 include timeseries(&apos;speed2&apos;, &apos;0001-01-01T00:00:00.0000000&apos;, &apos;9999-12-31T23:59:59.9999999&apos;) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 include timeseries(&apos;speed2&apos;, &apos;0001-01-01T00:00:00.0000000&apos;, &apos;9999-12-31T23:59:59.9999999&apos;) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 or Name = $p1) or Name = $p2) or Name = $p3) or Name = $p4 " name="RavenDB Queries can parse -  from &apos;Users&apos; where (((Name = $p0 or Name = $p1) or Name = $p2) or Name = $p3) or Name = $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), ContainsKey : d.Dict.hasOwnProperty($p0) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), ContainsKey : d.Dict.hasOwnProperty($p0) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName/Counters&apos; select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName/Counters&apos; select Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) order by CreatedDate limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) order by CreatedDate limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; where search(Family_Dad_Id, $p0) " name="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; where search(Family_Dad_Id, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where Address.Country = $p0 select distinct Address.Country as Country " name="RavenDB Queries can parse -  from &apos;Employees&apos; where Address.Country = $p0 select distinct Address.Country as Country " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;RegexMes&apos; where regex(Text, $p0) " name="RavenDB Queries can parse -  from &apos;RegexMes&apos; where regex(Text, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_Faulty_3017&apos;) desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_Faulty_3017&apos;) desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateVal &lt; $p0, DateVal &gt;= $p1 and DateVal &lt; $p2, DateVal &gt;= $p3) " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateVal &lt; $p0, DateVal &gt;= $p1 and DateVal &lt; $p2, DateVal &gt;= $p3) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; where intersect(Deleted = $p0, TenantId = $p1)  " name="RavenDB Queries can parse -  from &apos;Articles&apos; where intersect(Deleted = $p0, TenantId = $p1)  " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TransactionBalances/ByYear&apos; where Year &lt;= $p0 " name="RavenDB Queries can parse -  from index &apos;TransactionBalances/ByYear&apos; where Year &lt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; select id() as Id, UserId, Family_dad_Id " name="RavenDB Queries can parse -  from index &apos;Person/IdCopy/Index&apos; select id() as Id, UserId, Family_dad_Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (SomeProperty = $p0 or SomeProperty = $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (SomeProperty = $p0 or SomeProperty = $p1) limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange/MapReduce&apos; " name="RavenDB Queries can parse -  from index &apos;Index/With/CompareExchange/MapReduce&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate last 12 Hours) as __timeSeriesQueryFunction limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate last 12 Hours) as __timeSeriesQueryFunction limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyCounterIndex&apos; " name="RavenDB Queries can parse -  from index &apos;MyCounterIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt = $p0 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Kilometers&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (CaseId != $p0 and CaseId != $p1) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (CaseId != $p0 and CaseId != $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DemoIndex&apos; where Hash = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;DemoIndex&apos; where Hash = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; where id() in ($p0) and PublishDate &gt; $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Articles&apos; where id() in ($p0) and PublishDate &gt; $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Fields.1-A = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Fields.1-A = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where (Name != $p0 and Name != $p1) " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where (Name != $p0 and Name != $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;KeywordsIndex&apos; where this = $p0 " name="RavenDB Queries can parse -  from index &apos;KeywordsIndex&apos; where this = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() select null as SomeProp, id() as DocId " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() select null as SomeProp, id() as DocId " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GetMultipleStringFieldsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;GetMultipleStringFieldsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { IntegerSum : doc.IntegerNumber1+doc.IntegerNumber2, IntegerDup : doc.IntegerNumber1*doc.IntegerNumber2, DecimalSum : doc.DecimalNumber1+doc.DecimalNumber2, DoubleSum : doc.DoubleNumber1+doc.DoubleNumber2, DoubleAndStringSum : doc.String+doc.DoubleNumber2, DoubleAndIntSum : doc.IntegerNumber1+doc.DoubleNumber2, StringSum : doc.String+doc.IntegerNumber2 } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { IntegerSum : doc.IntegerNumber1+doc.IntegerNumber2, IntegerDup : doc.IntegerNumber1*doc.IntegerNumber2, DecimalSum : doc.DecimalNumber1+doc.DecimalNumber2, DoubleSum : doc.DoubleNumber1+doc.DoubleNumber2, DoubleAndStringSum : doc.String+doc.DoubleNumber2, DoubleAndIntSum : doc.IntegerNumber1+doc.DoubleNumber2, StringSum : doc.String+doc.IntegerNumber2 } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users_ByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Users_ByName&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Counters/Index/With/CompareExchange&apos; select City " name="RavenDB Queries can parse -  from index &apos;Counters/Index/With/CompareExchange&apos; select City " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Value = $p0 or StringDict[].Key = $p1 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Value = $p0 or StringDict[].Key = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where LastName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where LastName = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestAccounts&apos; where Types = $p0 " name="RavenDB Queries can parse -  from &apos;TestAccounts&apos; where Types = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; " name="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,counters(&apos;Downloads&apos;) " name="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,counters(&apos;Downloads&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Profits/Monthly2&apos; order by ProfitValue as double " name="RavenDB Queries can parse -  from index &apos;Profits/Monthly2&apos; order by ProfitValue as double " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ComplexDataIndex&apos; where moreLikeThis($p1, $p0) " name="RavenDB Queries can parse -  from index &apos;ComplexDataIndex&apos; where moreLikeThis($p1, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Projects&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Projects&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name, Metadata : getMetadata(u) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name, Metadata : getMetadata(u) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Events/ByActiveStagingPublishOnSaleAndStartDate&apos; where StartDate = $p0 include PerformerIds,VenueId limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Events/ByActiveStagingPublishOnSaleAndStartDate&apos; where StartDate = $p0 include PerformerIds,VenueId limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonAndAddressIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PersonAndAddressIndex&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FanoutByNumbers&apos; where Sum = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;FanoutByNumbers&apos; where Sum = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleByEmail&apos; where Email = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PeopleByEmail&apos; where Email = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ByVehicle&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select facet(id(&apos;facets/Vehicle&apos;)) " name="RavenDB Queries can parse -  from index &apos;ByVehicle&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select facet(id(&apos;facets/Vehicle&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocIndex&apos; select facet(IntVal) " name="RavenDB Queries can parse -  from index &apos;DocIndex&apos; select facet(IntVal) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByCity&apos; where City = $p0 " name="RavenDB Queries can parse -  from index &apos;Users/ByCity&apos; where City = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as __load select __load.Object1.Object2.Name " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as __load select __load.Object1.Object2.Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Tester/Search&apos; where (lucene(Query, $p0)) and Email = $p1 order by Query, LastName limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Tester/Search&apos; where (lucene(Query, $p0)) and Email = $p1 order by Query, LastName limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, min(Price)) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, min(Price)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where UlongMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where UlongMaxVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EmailIndex&apos; where startsWith(Body, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;EmailIndex&apos; where startsWith(Body, $p0) limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LatestBuildsIndex&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " name="RavenDB Queries can parse -  from index &apos;LatestBuildsIndex&apos; as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; " name="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.Name, Phones : Object.map(customer.Phones, function(v, k){ return {Label:k,Prefix:v.CountryPrefix,Phone:v.Value};}) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as customer select { CustomerName : customer.Name, Phones : Object.map(customer.Phones, function(v, k){ return {Label:k,Prefix:v.CountryPrefix,Phone:v.Value};}) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where RefName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;test&apos; where RefName = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Albums&apos; where Tags4D = $p0 " name="RavenDB Queries can parse -  from &apos;Albums&apos; where Tags4D = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Birthday &gt;= $p0 select Name, Age " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Birthday &gt;= $p0 select Name, Age " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.FirstName, __alias0.&apos;Group&apos;, __alias0.LastName " name="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.FirstName, __alias0.&apos;Group&apos;, __alias0.LastName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray all in ($p0) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray all in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithLongs&apos; where Sequence &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;WithLongs&apos; where Sequence &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age = $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; where id() in ($p0) " name="RavenDB Queries can parse -  from &apos;Documents&apos; where id() in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Invoices/Search&apos; " name="RavenDB Queries can parse -  from index &apos;Invoices/Search&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MessageIndex&apos; where (id() = $p0) and (Recipients_HasReadInt = $p1 and Recipients_To = $p2) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MessageIndex&apos; where (id() = $p0) and (Recipients_HasReadInt = $p1 and Recipients_To = $p2) limit $p3, $p4 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SeasonHarvestEstimates/ByDeliverySite&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SeasonHarvestEstimates/ByDeliverySite&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexMinusOperation&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexMinusOperation&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 select percentile(10.400618477911044), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p0 and $p1 select percentile(10.400618477911044), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonnelAll&apos; " name="RavenDB Queries can parse -  from index &apos;PersonnelAll&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by random(&apos;seed1&apos;) " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by random(&apos;seed1&apos;) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(lucene(ExternalId, $p0)) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(lucene(ExternalId, $p0)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { RolesList : u.Roles.map(function(a){return {Id:a};}), RolesArray : u.Roles.map(function(a){return {Id:a};}) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { RolesList : u.Roles.map(function(a){return {Id:a};}), RolesArray : u.Roles.map(function(a){return {Id:a};}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where boost(search(StrVal, $p0), 2) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where boost(search(StrVal, $p0), 2) limit $p1, $p2 " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 and spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p1, $p2, $p3)) order by spatial.distance(someField, spatial.point($p4, $p5)) desc " name="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 and spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p1, $p2, $p3)) order by spatial.distance(someField, spatial.point($p4, $p5)) desc " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;eventsByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index1&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OldIndex&apos; where LastName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;OldIndex&apos; where LastName = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex7&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex7&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(DictField, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where search(DictField, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? 1 : (a.ProductName &gt; b.ProductName)? -1 : 0);}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? 1 : (a.ProductName &gt; b.ProductName)? -1 : 0);}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DynamicKey &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DynamicKey &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;users/byname&apos; where Name != $p0 " name="RavenDB Queries can parse -  from index &apos;users/byname&apos; where Name != $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Region), min(Region)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Region), min(Region)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Filter/key/Index&apos; " name="RavenDB Queries can parse -  from index &apos;Filter/key/Index&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; order by Name select distinct Name " name="RavenDB Queries can parse -  from index &apos;test&apos; order by Name select distinct Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapIndexWithExtensionMethods&apos; select Id, DictionaryAggregateOne, DictionarySumOne, DictionaryOfIntegers, DictionaryAggregateTwo, DictionarySumTwo, IsDictionaryOfInt, LongCount " name="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapIndexWithExtensionMethods&apos; select Id, DictionaryAggregateOne, DictionarySumOne, DictionaryOfIntegers, DictionaryAggregateTwo, DictionarySumTwo, IsDictionaryOfInt, LongCount " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Val)) " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Val)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where CategoryId = $p0 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where CategoryId = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where ((exists(Title) and not search(Title, $p0)) or search(Desc, $p1)) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndDescription&apos; where ((exists(Title) and not search(Title, $p0)) or search(Desc, $p1)) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByPhone&apos; where true and not exists(Phone) " name="RavenDB Queries can parse -  from index &apos;Companies/ByPhone&apos; where true and not exists(Phone) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByString&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByString&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByEmployeeLastName&apos; " name="RavenDB Queries can parse -  from index &apos;Companies/ByEmployeeLastName&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByCity&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Users/ByCity&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Year as long, Title as alphaNumeric desc " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Year as long, Title as alphaNumeric desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; where Foo = $p0 and (((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) or ItemListFour[].MyProp = $p4) order by CreatedDate desc " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; where Foo = $p0 and (((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) or ItemListFour[].MyProp = $p4) order by CreatedDate desc " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Birthday &lt; $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Birthday &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GetMultipleStringFieldsIndex&apos; where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) " name="RavenDB Queries can parse -  from index &apos;GetMultipleStringFieldsIndex&apos; where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) " time="0.012">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as FooId, Data as Data2 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where Data &gt; $p0 select id() as FooId, Data as Data2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product) order by Count as long select count(), key() as Products " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product) order by Count as long select count(), key() as Products " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Dogs/Owners/ByBreed&apos; where Owners = $p0 " name="RavenDB Queries can parse -  from index &apos;Dogs/Owners/ByBreed&apos; where Owners = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? 1 : (a.ProductName &gt; b.ProductName)? -1 : 0);}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? 1 : (a.ProductName &gt; b.ProductName)? -1 : 0);}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; as x select { HasProperties : x.Properties.length &gt; 0 } " name="RavenDB Queries can parse -  from &apos;Articles&apos; as x select { HasProperties : x.Properties.length &gt; 0 } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; include Parent " name="RavenDB Queries can parse -  from &apos;Items&apos; include Parent " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithNullableDateTimeOffsets&apos; where At = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;EntityWithNullableDateTimeOffsets&apos; where At = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Name != $p0 order by id() as alphaNumeric desc " name="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Name != $p0 order by id() as alphaNumeric desc " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersistentCacheKeys&apos; where Hash = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;PersistentCacheKeys&apos; where Hash = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(startsWith(Name, $p0)) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(startsWith(Name, $p0)) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x include counters(x, &apos;Likes&apos;),counters(x.Employee, &apos;Downloads&apos;) " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x include counters(x, &apos;Likes&apos;),counters(x.Employee, &apos;Downloads&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; select suggest(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;DefaultSuggestionIndex&apos; select suggest(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 or search(name, $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Name = $p0 or search(name, $p1) limit $p2, $p3 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; where IsActive = $p0 order by NameForSorting desc " name="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; where IsActive = $p0 order by NameForSorting desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;FooDocumentWithoutIdProperties&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;FooDocumentWithoutIdProperties&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,timeseries(&apos;Heartrate&apos;, &apos;2020-01-01T00:00:00.0000000&apos;, null) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; include Company,timeseries(&apos;Heartrate&apos;, &apos;2020-01-01T00:00:00.0000000&apos;, null) limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 or CaseId = $p1) and ((CaseId != $p2 and HistoryCode = $p3)) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 or CaseId = $p1) and ((CaseId != $p2 and HistoryCode = $p3)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GeoIndex&apos; where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;GeoIndex&apos; where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDatas&apos; where Date = $p0 " name="RavenDB Queries can parse -  from &apos;SampleDatas&apos; where Date = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Rations&apos; where Composition[].Value = $p0 " name="RavenDB Queries can parse -  from &apos;Rations&apos; where Composition[].Value = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Name in ($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; where Name in ($p0) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name select Name " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Documents/ByTime&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Documents/ByTime&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay &gt; $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay &gt; $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OrgIndex&apos; select facet(id(&apos;facets/TestFacet&apos;)) " name="RavenDB Queries can parse -  from index &apos;OrgIndex&apos; select facet(id(&apos;facets/TestFacet&apos;)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MySearchIndexTask&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;MySearchIndexTask&apos; where Name = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderHardwares&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;OrderHardwares&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MusicSearchIndex&apos; where lucene(Title, $p0) and lucene(Album, $p1) and lucene(Keywords, $p2) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MusicSearchIndex&apos; where lucene(Title, $p0) and lucene(Album, $p1) and lucene(Keywords, $p2) limit $p3, $p4 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where exact(lucene(ExternalId, $p0)) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where exact(lucene(ExternalId, $p0)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; group by True select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " name="RavenDB Queries can parse -  from &apos;Products&apos; group by True select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexChildren&apos; order by Name select id() as Id, Address, Name " name="RavenDB Queries can parse -  from index &apos;IndexChildren&apos; order by Name select id() as Id, Address, Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestDocumentIndex&apos; " name="RavenDB Queries can parse -  from index &apos;TestDocumentIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; select Category " name="RavenDB Queries can parse -  from &apos;Blogs&apos; select Category " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyEntities&apos; where StringCollection = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;MyEntities&apos; where StringCollection = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleNegativeInfinity = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleNegativeInfinity = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ToDictionarySelectOrderBySumIndex&apos; select id() as Id, SelectSum, OrderBySum, DateTimeIntDictionary " name="RavenDB Queries can parse -  from index &apos;ToDictionarySelectOrderBySumIndex&apos; select id() as Id, SelectSum, OrderBySum, DateTimeIntDictionary " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where search(Name, $p0) include explanations() " name="RavenDB Queries can parse -  from &apos;Companies&apos; where search(Name, $p0) include explanations() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where search(Name, $p0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where search(Name, $p0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Profits2&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Profits2&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DeliverySiteEstimates&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;DeliverySiteEstimates&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where UintMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where UintMaxVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Locations&apos; as location select { Id : id(location), Depth : location.LocationParents.length, Name : location.Name } " name="RavenDB Queries can parse -  from &apos;Locations&apos; as location select { Id : id(location), Depth : location.LocationParents.length, Name : location.Name } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMapIndex&apos; where search(Content, $p0) " name="RavenDB Queries can parse -  from index &apos;MultiMapIndex&apos; where search(Content, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Rate between $p0 and $p1 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Rate between $p0 and $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateValNullable &lt; $p0, DateValNullable &gt;= $p1 and DateValNullable &lt; $p2, DateValNullable &gt;= $p3) " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; select facet(DateValNullable &lt; $p0, DateValNullable &gt;= $p1 and DateValNullable &lt; $p2, DateValNullable &gt;= $p3) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; select id() as Id " name="RavenDB Queries can parse -  from &apos;Companies&apos; select id() as Id " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EventsBySimpleLocation&apos; " name="RavenDB Queries can parse -  from index &apos;EventsBySimpleLocation&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/AllProperties&apos; where Query = $p0 " name="RavenDB Queries can parse -  from index &apos;Users/AllProperties&apos; where Query = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorterWithOperations_697&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorterWithOperations_697&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) as AndAggregateOnName " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) as AndAggregateOnName " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Amount &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;test&apos; where Amount &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Country in ($p0) " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Country in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Quantity), min(Quantity)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Region, max(Quantity), min(Quantity)) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TemplateTests/Search&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TemplateTests/Search&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { Id : id(doc)+&quot; test&quot;, Name : doc.Name } " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { Id : id(doc)+&quot; test&quot;, Name : doc.Name } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(IntegerAge, min(IntegerAge)) " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; select facet(IntegerAge, min(IntegerAge)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not exists(StringArray)) limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not exists(StringArray)) limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where CreationTime in ($p0) " name="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where CreationTime in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(startsWith(Name, $p0)) and exact(endsWith(Name, $p1)) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where exact(startsWith(Name, $p0)) and exact(endsWith(Name, $p1)) " time="0.015">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by Age as long, random() " name="RavenDB Queries can parse -  from &apos;Users&apos; order by Age as long, random() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where exact(Name = $p0) select key() as Name, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where exact(Name = $p0) select key() as Name, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;QuestionIndex&apos; where search(QuestionText, $p0) order by score() include highlight(QuestionText,100,1) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;QuestionIndex&apos; where search(QuestionText, $p0) order by score() include highlight(QuestionText,100,1) limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where moreLikeThis(id() = $p1, $p0) include AddressId " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; where moreLikeThis(id() = $p1, $p0) include AddressId " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Addresses&apos; group by City where Count = $p0 select key() as City, count() " name="RavenDB Queries can parse -  from &apos;Addresses&apos; group by City where Count = $p0 select key() as City, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BarnIndex&apos; where MembersName = $p0 " name="RavenDB Queries can parse -  from index &apos;BarnIndex&apos; where MembersName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;AnyBugs&apos; " name="RavenDB Queries can parse -  from &apos;AnyBugs&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Email = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Email = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Date&apos; where lucene(Date, $p0) " name="RavenDB Queries can parse -  from index &apos;Date&apos; where lucene(Date, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 include LastName " name="RavenDB Queries can parse -  from &apos;Users&apos; where FirstName = $p0 include LastName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Age, Name select key(), count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Age, Name select key(), count() " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalPricePerUnit as double desc select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalPricePerUnit as double desc select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoublePositiveInfinity = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoublePositiveInfinity = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where endsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where endsWith(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MasterBedrooms&apos; " name="RavenDB Queries can parse -  from &apos;MasterBedrooms&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;Heartrate&apos;, last(11)) " name="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;Heartrate&apos;, last(11)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanHours = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanHours = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate first 12 Hours where (Tag == $p1) group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate first 12 Hours where (Tag == $p1) group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where id() = $p0 select id() as Id, SubEntities include &apos;SubEntities[].Id&apos; limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where id() = $p0 select id() as Id, SubEntities include &apos;SubEntities[].Id&apos; limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Wheels &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;test&apos; where Wheels &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DataResults&apos; where SiteId = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;DataResults&apos; where SiteId = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Courses/ByCourseLesson&apos; where CourseId = $p0 select CourseId, Index, LessonId " name="RavenDB Queries can parse -  from index &apos;Courses/ByCourseLesson&apos; where CourseId = $p0 select CourseId, Index, LessonId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DummyIndexCount&apos; where IntCount = $p0 " name="RavenDB Queries can parse -  from index &apos;DummyIndexCount&apos; where IntCount = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; " name="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SingleMapIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;SingleMapIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CartesianIndex&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;CartesianIndex&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Age = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Age = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitiesByLocation&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) " name="RavenDB Queries can parse -  from index &apos;EntitiesByLocation&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleMaxVal = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;YearlyInvoices&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;YearlyInvoices&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestAttributesByAttributes&apos; where intersect((Attributes_Key = $p0 and Attributes_Value = $p1), Attributes_Key = $p2 and Attributes_Value = $p3)  order by id() limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;TestAttributesByAttributes&apos; where intersect((Attributes_Key = $p0 and Attributes_Value = $p1), Attributes_Key = $p2 and Attributes_Value = $p3)  order by id() limit $p4, $p5 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 and HistoryCode = $p1) or CaseId != $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (OrganizationId = $p0 and HistoryCode = $p1) or CaseId != $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Title desc " name="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Title desc " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag  select first(), max(), min(), last()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag  select first(), max(), min(), last()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Name = $p0 and Active = $p1 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where Name = $p0 and Active = $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithNullableDateTimeOffsets&apos; where (At &gt; $p0 and At != $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;EntityWithNullableDateTimeOffsets&apos; where (At &gt; $p0 and At != $p1) limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where Date &lt;= $p0 and spatial.within(Coordinates, spatial.circle($p1, $p2, $p3)) order by Date desc " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where Date &lt;= $p0 and spatial.within(Coordinates, spatial.circle($p1, $p2, $p3)) order by Date desc " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age &lt;= $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where (Name = $p0) and (Categories_Name = $p1) and (PracticeOffices_Name = $p2) " name="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where (Name = $p0) and (Categories_Name = $p1) and (PracticeOffices_Name = $p2) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; " name="RavenDB Queries can parse -  from &apos;Users&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex/WithoutAnalyzer&apos; where search(Name, $p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyIndex/WithoutAnalyzer&apos; where search(Name, $p0) limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ClassWithDouble/Index&apos; order by Rating as double " name="RavenDB Queries can parse -  from index &apos;ClassWithDouble/Index&apos; order by Rating as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Employees/CurrentCount&apos; " name="RavenDB Queries can parse -  from index &apos;Employees/CurrentCount&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name, Fax limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name, Fax limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(__alias0) {   	var order = __alias0;   	var sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   	return { Sum : sum };   }   from &apos;Orders&apos; as __alias0 where __alias0.Company = $p0 select output(__alias0) " name="RavenDB Queries can parse -  declare function output(__alias0) {   	var order = __alias0;   	var sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   	return { Sum : sum };   }   from &apos;Orders&apos; as __alias0 where __alias0.Company = $p0 select output(__alias0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleClasses&apos; where To = $p0 and Kind = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;SampleClasses&apos; where To = $p0 and Kind = $p1 limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt &lt; b.OrderedAt) ? -1 : (a.OrderedAt &gt; b.OrderedAt)? 1 : 0);}) } " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt &lt; b.OrderedAt) ? -1 : (a.OrderedAt &gt; b.OrderedAt)? 1 : 0);}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BooksSearch&apos; where lucene(Text, $p0) " name="RavenDB Queries can parse -  from index &apos;BooksSearch&apos; where lucene(Text, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by Value desc " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by Value desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Active = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Active = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(id(&apos;facets/FooFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(id(&apos;facets/FooFacets&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name desc select Name " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name desc select Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDocs&apos; where Number = $p0 select Name " name="RavenDB Queries can parse -  from &apos;SampleDocs&apos; where Number = $p0 select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; " name="RavenDB Queries can parse -  from &apos;Documents&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleClasses&apos; where To = $p0 and Kind = $p1 select To limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;SampleClasses&apos; where To = $p0 and Kind = $p1 select To limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\&quot;Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\&quot;Users&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (SomeProperty != $p0 and SomeProperty != $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (SomeProperty != $p0 and SomeProperty != $p1) limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where (Capacity &gt;= $p0 and Capacity &lt;= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where (Capacity &gt;= $p0 and Capacity &lt;= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Fax limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Fax limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Motorbikes/PolicySearch&apos; where PolicyNumbers in ($p0) and (lucene(EngineNumber, $p1) or lucene(Vin, $p2)) " name="RavenDB Queries can parse -  from index &apos;Motorbikes/PolicySearch&apos; where PolicyNumbers in ($p0) and (lucene(EngineNumber, $p1) or lucene(Vin, $p2)) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where search(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestDocumentsIndex&apos; where Language = $p0 " name="RavenDB Queries can parse -  from index &apos;TestDocumentsIndex&apos; where Language = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(purchase, $p0) {   	var isPrinted = purchase.Events.filter(function(a){return a.Type===&quot;Printed&quot;&amp;&amp;a.Handled===true;});   	var isChecked = purchase.Events.filter(function(a){return a.Sort===&quot;Checked&quot;;}).map(function(a){return a.Quantity;}).reduce(function(a, b) { return a + b; }, 0)&gt;=$p0;   	return { IsPrinted : isPrinted };   }   from &apos;Purchases&apos; as purchase select output(purchase, $p0) " name="RavenDB Queries can parse -  declare function output(purchase, $p0) {   	var isPrinted = purchase.Events.filter(function(a){return a.Type===&quot;Printed&quot;&amp;&amp;a.Handled===true;});   	var isChecked = purchase.Events.filter(function(a){return a.Sort===&quot;Checked&quot;;}).map(function(a){return a.Quantity;}).reduce(function(a, b) { return a + b; }, 0)&gt;=$p0;   	return { IsPrinted : isPrinted };   }   from &apos;Purchases&apos; as purchase select output(purchase, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Profits&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Profits&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Values = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where Values = $p0 limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DynamicKey = $p0 " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where DynamicKey = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Roots/ByUserId&apos; where User_Id = $p0 " name="RavenDB Queries can parse -  from index &apos;Roots/ByUserId&apos; where User_Id = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select count(), percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select count(), percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithNullableFields&apos; where TheNullableField = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;WithNullableFields&apos; where TheNullableField = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where fuzzy(Name = $p0, 0.5) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where fuzzy(Name = $p0, 0.5) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserByFirstName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UserByFirstName&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NestedObjectIndex&apos; where Name = $p0 select ContainerName, Name, Quantity limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;NestedObjectIndex&apos; where Name = $p0 select ContainerName, Name, Quantity limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by id() select Tags[].Id, Tags[].Id3 " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; order by id() select Tags[].Id, Tags[].Id3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select ExtraField limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select ExtraField limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where startsWith(Name, $p0) and endsWith(Name, $p1) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where startsWith(Name, $p0) and endsWith(Name, $p1) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/ByNumericAttributeUsingField&apos; where Color = $p0 " name="RavenDB Queries can parse -  from index &apos;Product/ByNumericAttributeUsingField&apos; where Color = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and CaseId != $p1)) and HistoryCode = $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and CaseId != $p1)) and HistoryCode = $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; order by X desc " name="RavenDB Queries can parse -  from index &apos;test&apos; order by X desc " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; select facet(Make, sum(Price)) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; select facet(Make, sum(Price)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by Name, score() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate group by &apos;1 Hours&apos;   select first(), last(), slope()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate group by &apos;1 Hours&apos;   select first(), last(), slope()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AverageHeartRateDaily/ByDateAndUser&apos; " name="RavenDB Queries can parse -  from index &apos;AverageHeartRateDaily/ByDateAndUser&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as w where (Value &lt;= w.Accuracy) group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as w where (Value &lt;= w.Accuracy) group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestViews&apos; select TestField " name="RavenDB Queries can parse -  from &apos;TestViews&apos; select TestField " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 load u.AddressId as address select { Name : u.Name, Country : address.Country } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 load u.AddressId as address select { Name : u.Name, Country : address.Country } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select Name, Age " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select Name, Age " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(item) {   	var total = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return x.Quantity*x.Price;}).reduce(function(a, b) { return a + b; }, 0);});   	return { Total : total };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " name="RavenDB Queries can parse -  declare function output(item) {   	var total = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return x.Quantity*x.Price;}).reduce(function(a, b) { return a + b; }, 0);});   	return { Total : total };   }   from index &apos;TestDocumentByName&apos; as item select output(item) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Developers&apos; where PreferredIDE.Name = $p0 " name="RavenDB Queries can parse -  from &apos;Developers&apos; where PreferredIDE.Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Activity/ByMonth&apos; order by Users as long " name="RavenDB Queries can parse -  from index &apos;Activity/ByMonth&apos; order by Users as long " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Unknown = $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Unknown = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Authors/ByNameAndBooks&apos; where Name = $p0 or Books = $p1 " name="RavenDB Queries can parse -  from index &apos;Authors/ByNameAndBooks&apos; where Name = $p0 or Books = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by OrderedAt.Year, OrderedAt.Month limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by OrderedAt.Year, OrderedAt.Month limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByUnknown&apos; where Unknown = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/ByUnknown&apos; where Unknown = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where IntMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where IntMaxVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;GesprÃ¤chTemplateIndex&apos; " name="RavenDB Queries can parse -  from index &apos;GesprÃ¤chTemplateIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where search(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Year &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Year &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Active = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Active = $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Fox/Search&apos; where proximity(search(Name, $p0), 1) " name="RavenDB Queries can parse -  from index &apos;Fox/Search&apos; where proximity(search(Name, $p0), 1) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Last) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Minutes&apos;  with interpolation(Last) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by score(), Name desc " name="RavenDB Queries can parse -  from index &apos;test&apos; where Email = $p0 order by score(), Name desc " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name &gt; $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address1 = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address1 = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select id() as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select id() as Id, Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { CmpXngValue : cmpxchg(u.Name), CounterValue : counter(u, &quot;downloads&quot;) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { CmpXngValue : cmpxchg(u.Name), CounterValue : counter(u, &quot;downloads&quot;) } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProductsWarrenty&apos; where Duration &gt; $p0 select Name, IsAvailable, Category, PricePerUnit, Mode, Type, Manufacturer limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;ProductsWarrenty&apos; where Duration &gt; $p0 select Name, IsAvailable, Category, PricePerUnit, Mode, Type, Manufacturer limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where Unavailabilities_StartDay &gt;= $p0 and Unavailabilities_EndDay &lt;= $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where Unavailabilities_StartDay &gt;= $p0 and Unavailabilities_EndDay &lt;= $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CrudeJoinTask&apos; " name="RavenDB Queries can parse -  from index &apos;CrudeJoinTask&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; " name="RavenDB Queries can parse -  from index &apos;Index&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ReduceMeByTag&apos; " name="RavenDB Queries can parse -  from index &apos;ReduceMeByTag&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PartialResourceStateTimelinesIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PartialResourceStateTimelinesIndex&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0) as NewName " name="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0) as NewName " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() select NullableInt as SomeProp " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; order by id() select NullableInt as SomeProp " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; where EntityBRef.Id = $p0 " name="RavenDB Queries can parse -  from &apos;Entities&apos; where EntityBRef.Id = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 and Revision &lt; $p1 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &gt; $p0 and Revision &lt; $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AverageIndex&apos; select Name, Average limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;AverageIndex&apos; select Name, Average limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ParentModels&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;ParentModels&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; where MediaSource = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; where MediaSource = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; order by Amount as double " name="RavenDB Queries can parse -  from index &apos;Index&apos; order by Amount as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Employees/ByFirstName&apos; where search(FirstName, $p0) " name="RavenDB Queries can parse -  from index &apos;Employees/ByFirstName&apos; where search(FirstName, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Invoices&apos; as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {Id:id(__rvn1.__rvn0.order),CustomerName:__rvn1.customer.Name,Items:__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {ItemName:__rvn0.item.Name,CategoryName:__rvn0.category.Name};}),Instructions:__rvn1.__rvn0.order.Instructions.map(function(instruction){return {Title:instruction.Title};})};}) } " name="RavenDB Queries can parse -  from &apos;Invoices&apos; as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {Id:id(__rvn1.__rvn0.order),CustomerName:__rvn1.customer.Name,Items:__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {ItemName:__rvn0.item.Name,CategoryName:__rvn0.category.Name};}),Instructions:__rvn1.__rvn0.order.Instructions.map(function(instruction){return {Title:instruction.Title};})};}) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexPlusOperation&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexPlusOperation&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and not (search(Name, $p1)) and not (search(Name, $p2)) " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and not (search(Name, $p1)) and not (search(Name, $p2)) " time="0.016">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Logfiles&apos; where UploadDate &gt;= $p0 select distinct Owner limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Logfiles&apos; where UploadDate &gt;= $p0 select distinct Owner limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyEntities&apos; " name="RavenDB Queries can parse -  from &apos;MyEntities&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Spatial&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;Spatial&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where endsWith(id(), $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where endsWith(id(), $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestItemsIndex&apos; where Area = $p0 order by EventDate limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TestItemsIndex&apos; where Area = $p0 order by EventDate limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray.Length &gt; $p0 and SomeProperty = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray.Length &gt; $p0 and SomeProperty = $p1 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Buildings&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Buildings&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; include CustomerId " name="RavenDB Queries can parse -  from &apos;Orders&apos; include CustomerId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Glasses&apos; where @metadata.&apos;Is-Nice&apos; = $p0 " name="RavenDB Queries can parse -  from &apos;Glasses&apos; where @metadata.&apos;Is-Nice&apos; = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), SubDocuments : d.SubDocuments.map(function(x){return {Status:x.Status};}) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as d select { Id : id(d), SubDocuments : d.SubDocuments.map(function(x){return {Status:x.Status};}) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersWithProductsByNameWithExternalLoad&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersWithProductsByNameWithExternalLoad&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ClaimsByBillTypeAndMatchingStatus&apos; order by BillType " name="RavenDB Queries can parse -  from index &apos;ClaimsByBillTypeAndMatchingStatus&apos; order by BillType " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;en-US&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;en-US&quot;) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DeviceInfoIndexMap&apos; " name="RavenDB Queries can parse -  from index &apos;DeviceInfoIndexMap&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.wkt(ShapeWkt), spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.wkt(ShapeWkt), spatial.circle($p0, $p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Auto/Blogs/ByTitle&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Auto/Blogs/ByTitle&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &lt;= $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Hi&apos; where search(Tags, $p0) " name="RavenDB Queries can parse -  from index &apos;Hi&apos; where search(Tags, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.&apos;HeartRate@ByHour&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.&apos;HeartRate@ByHour&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where Address_ZipCode = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/QuerySyntax&apos; where Address_ZipCode = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 and Tags[].Name = $p1 select Category, Title limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Title = $p0 and Tags[].Name = $p1 select Category, Title limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(d, $p1) {   	var externalDocument = id(d)==null?null:load($p1);   	var x = id(d)==null?0:10;   	return { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from &apos;RavenDocuments&apos; as d where id() = $p0 select output(d, $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  declare function output(d, $p1) {   	var externalDocument = id(d)==null?null:load($p1);   	var x = id(d)==null?0:10;   	return { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from &apos;RavenDocuments&apos; as d where id() = $p0 select output(d, $p1) limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Events&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Events&apos; where id() = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Year &gt;= $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Year &gt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Products&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Price as double " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Price as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Properties&apos; where (id() = $p0) and BedroomCount &gt;= $p1 " name="RavenDB Queries can parse -  from &apos;Properties&apos; where (id() = $p0) and BedroomCount &gt;= $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select id() as Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select id() as Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(DateOfListing &lt; $p1, DateOfListing &gt; $p2 and DateOfListing &lt; $p3, DateOfListing &gt; $p4 and DateOfListing &lt; $p5, DateOfListing &gt; $p6 and DateOfListing &lt; $p7, DateOfListing &gt; $p8) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(DateOfListing &lt; $p1, DateOfListing &gt; $p2 and DateOfListing &lt; $p3, DateOfListing &gt; $p4 and DateOfListing &lt; $p5, DateOfListing &gt; $p6 and DateOfListing &lt; $p7, DateOfListing &gt; $p8) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u0017Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\u0017Users&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as &apos;order&apos; select { Employee : load(order.Employee), Company : order.Company } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as &apos;order&apos; select { Employee : load(order.Employee), Company : order.Company } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select key(), count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Employee, Company order by Count as long select key(), count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Precision&apos; where M &gt; $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Precision&apos; where M &gt; $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country select distinct ShipTo.Country " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country select distinct ShipTo.Country " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Name " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate) as __timeSeriesQueryFunction limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate) as __timeSeriesQueryFunction limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Addresses&apos; " name="RavenDB Queries can parse -  from &apos;Addresses&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Category " name="RavenDB Queries can parse -  from &apos;Blogs&apos; order by Category " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ProviderPto2s&apos; where ((AddressesPto[].Address.Zip = $p0 and AddressesPto[].Address.AddressTypePto in ($p1)) or (((((((PracticeOfficesPto[].PrimaryContact.Address.Zip = $p2 and PracticeOfficesPto[].PrimaryContact.Address.AddressTypePto in ($p3)) and PracticeOfficesPto[].EffectiveFrom &lt;= $p4) and (PracticeOfficesPto[].EffectiveThrough = $p5 or (PracticeOfficesPto[].EffectiveThrough &gt;= $p6 and PracticeOfficesPto[].EffectiveThrough != $p7))) and PracticeOfficesPto[].PrimaryContact.ContactEffectiveFrom &lt;= $p8) and (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough = $p9 or (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough &gt;= $p10 and PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough != $p11))) and PracticeOfficesPto[].PrimaryContact.AddressEffectiveFrom &lt;= $p12) and (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough = $p13 or (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough &gt;= $p14 and PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough != $p15)))) or (PayTosPto[].PrimaryContact.Zip = $p16 and PayTosPto[].PrimaryContact.AddressTypePto in ($p17)) " name="RavenDB Queries can parse -  from &apos;ProviderPto2s&apos; where ((AddressesPto[].Address.Zip = $p0 and AddressesPto[].Address.AddressTypePto in ($p1)) or (((((((PracticeOfficesPto[].PrimaryContact.Address.Zip = $p2 and PracticeOfficesPto[].PrimaryContact.Address.AddressTypePto in ($p3)) and PracticeOfficesPto[].EffectiveFrom &lt;= $p4) and (PracticeOfficesPto[].EffectiveThrough = $p5 or (PracticeOfficesPto[].EffectiveThrough &gt;= $p6 and PracticeOfficesPto[].EffectiveThrough != $p7))) and PracticeOfficesPto[].PrimaryContact.ContactEffectiveFrom &lt;= $p8) and (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough = $p9 or (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough &gt;= $p10 and PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough != $p11))) and PracticeOfficesPto[].PrimaryContact.AddressEffectiveFrom &lt;= $p12) and (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough = $p13 or (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough &gt;= $p14 and PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough != $p15)))) or (PayTosPto[].PrimaryContact.Zip = $p16 and PayTosPto[].PrimaryContact.AddressTypePto in ($p17)) " time="0.026">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestBlogs&apos; order by Posts.Count as long " name="RavenDB Queries can parse -  from &apos;TestBlogs&apos; order by Posts.Count as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.ZipCode as long desc " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.ZipCode as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((CaseId != $p0 and OrganizationId = $p1)) or HistoryCode = $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((CaseId != $p0 and OrganizationId = $p1)) or HistoryCode = $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Entity2Index&apos; where (id() != $p0 and id() != $p1) " name="RavenDB Queries can parse -  from index &apos;Entity2Index&apos; where (id() != $p0 and id() != $p1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where TagId = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where TagId = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age between $p0 and $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age between $p0 and $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u) {   	var detailId = &quot;details/&quot;+u.DetailShortId;   	var detail = load(detailId);   	return { Name : u.Name, Detail : detail };   }   from &apos;Users&apos; as u select output(u) " name="RavenDB Queries can parse -  declare function output(u) {   	var detailId = &quot;details/&quot;+u.DetailShortId;   	var detail = load(detailId);   	return { Name : u.Name, Detail : detail };   }   from &apos;Users&apos; as u select output(u) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o) {   	var _function = o.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   	return { Sum : _function };   }   from &apos;Orders&apos; as o select output(o) " name="RavenDB Queries can parse -  declare function output(o) {   	var _function = o.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   	return { Sum : _function };   }   from &apos;Orders&apos; as o select output(o) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Country in ($p0) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Country in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by Name.Last " name="RavenDB Queries can parse -  from &apos;Users&apos; order by Name.Last " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/QuerySyntax&apos; " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/QuerySyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestGrouping4&apos; order by d as long select e, ab, ac, a, d " name="RavenDB Queries can parse -  from index &apos;TestGrouping4&apos; order by d as long select e, ab, ac, a, d " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CompanyByName&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;CompanyByName&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where Name != $p0 order by Name select Name " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where Name != $p0 order by Name select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; select id() as Id, Customer " name="RavenDB Queries can parse -  from index &apos;Index&apos; select id() as Id, Customer " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Albums&apos; where Tags3D = $p0 " name="RavenDB Queries can parse -  from &apos;Albums&apos; where Tags3D = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; select Properties.Vendor limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Products&apos; select Properties.Vendor limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; include Offices " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; include Offices " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &lt; $p0 select id() as Id, AmountLeft " name="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &lt; $p0 select id() as Id, AmountLeft " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Posts&apos; where id() = $p0 select Title " name="RavenDB Queries can parse -  from &apos;Posts&apos; where id() = $p0 select Title " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;Users/ByName&apos; select suggest(Name, $p0, $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, LastName where exact(Name = $p0) select Name, LastName, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, LastName where exact(Name = $p0) select Name, LastName, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;CategoryCounts&apos; " name="RavenDB Queries can parse -  from &apos;CategoryCounts&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where (AuthorId = $p0 and startsWith(Title, $p1)) and Language in ($p2) " name="RavenDB Queries can parse -  from index &apos;Index&apos; where (AuthorId = $p0 and startsWith(Title, $p1)) and Language in ($p2) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ConventionalHyphenIndex&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;ConventionalHyphenIndex&apos; where Name = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedFieldJs&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedFieldJs&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Sections&apos; order by Position as long select Position limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Sections&apos; order by Position as long select Position limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByAddress&apos; where Address = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Users/ByAddress&apos; where Address = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;10 Minutes&apos;  with interpolation(Linear) select sum(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;10 Minutes&apos;  with interpolation(Linear) select sum(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByCity&apos; select Name, City " name="RavenDB Queries can parse -  from index &apos;Companies/ByCity&apos; select Name, City " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Animal.Color = $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Animal.Color = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Name != $p0 order by id() as alphaNumeric " name="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Name != $p0 order by id() as alphaNumeric " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where Birthday = $p0 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where Birthday = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Items[].Key = $p0 and Items[].Value = $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Items[].Key = $p0 and Items[].Value = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/2&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/2&apos; order by Date " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionary/MethodSyntax&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionary/MethodSyntax&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, Age select key(), count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name, Age select key(), count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Locations&apos; where startsWith(Name, $p0) select Name, Properties.Count as Count " name="RavenDB Queries can parse -  from &apos;Locations&apos; where startsWith(Name, $p0) select Name, Properties.Count as Count " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where GroupId = $p0 select id() as Id, FirstName, LastName, GroupId " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where GroupId = $p0 select id() as Id, FirstName, LastName, GroupId " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Quantity in ($p0) " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Quantity in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Address2, $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where search(Address2, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as user select counter(user, Downloads) as Downloads, counter(user, Likes) as Likes " name="RavenDB Queries can parse -  from &apos;Users&apos; as user select counter(user, Downloads) as Downloads, counter(user, Likes) as Likes " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; select id() as Id, Name " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; select id() as Id, Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersAndAccounts&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;UsersAndAccounts&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.ZipCode as long " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.ZipCode as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; order by TransportId, ChildId select ChildId, TransportId, Name " name="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; order by TransportId, ChildId select ChildId, TransportId, Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray all in ($p0) and SomeProperty = $p1 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray all in ($p0) and SomeProperty = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByEmployeeLastName&apos; where LastName = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/ByEmployeeLastName&apos; where LastName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;CalcSystems&apos; " name="RavenDB Queries can parse -  from &apos;CalcSystems&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) as Name1, facet(IsCancelled, avg(Val)) as Name1 " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) as Name1, facet(IsCancelled, avg(Val)) as Name1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Year as long desc " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Year as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by Name.Last select Name.First as FirstName, Name.Last as LastName, id() as UserId " name="RavenDB Queries can parse -  from &apos;Users&apos; order by Name.Last select Name.First as FirstName, Name.Last as LastName, id() as UserId " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; as x select { Round : Math.round(x.Value), Round2 : Math.round(x.Value * Math.pow(10, 2)) / Math.pow(10, 2), Round4 : Math.round(x.Value * Math.pow(10, 4)) / Math.pow(10, 4) } " name="RavenDB Queries can parse -  from &apos;Articles&apos; as x select { Round : Math.round(x.Value), Round2 : Math.round(x.Value * Math.pow(10, 2)) / Math.pow(10, 2), Round4 : Math.round(x.Value * Math.pow(10, 4)) / Math.pow(10, 4) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.HeartRate group by &apos;1 days&apos;  ) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.HeartRate group by &apos;1 days&apos;  ) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where id() = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/NameAndPassportSearching&apos; where startsWith(ReversedName, $p0) " name="RavenDB Queries can parse -  from index &apos;Users/NameAndPassportSearching&apos; where startsWith(ReversedName, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MySearchIndexTask&apos; where MyEnumField = $p0 " name="RavenDB Queries can parse -  from index &apos;MySearchIndexTask&apos; where MyEnumField = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where lucene(Email, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where lucene(Email, $p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name desc " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0)) " name="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where Name in ($p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AttachmentIndex&apos; where AttachmentNames = $p0 " name="RavenDB Queries can parse -  from index &apos;AttachmentIndex&apos; where AttachmentNames = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; " name="RavenDB Queries can parse -  from &apos;Orders&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Images&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Images&apos; where search(Name, $p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsNotAnalyzed&apos; where exact(Name in ($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonsNotAnalyzed&apos; where exact(Name in ($p0)) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x select { HasTags : x.Tags.filter(function(t){return t!=null;}).some(function(t){return t===&quot;tag&quot;;}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x select { HasTags : x.Tags.filter(function(t){return t!=null;}).some(function(t){return t===&quot;tag&quot;;}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Locations&apos; as location select { Id : id(location), Depth : location.LocationParents.length, Depth2 : location.LocationParents.length, Name : location.Name } " name="RavenDB Queries can parse -  from &apos;Locations&apos; as location select { Id : id(location), Depth : location.LocationParents.length, Depth2 : location.LocationParents.length, Name : location.Name } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyDoubleArray = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where TimeSpanMinVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Name " name="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;users/byname&apos; " name="RavenDB Queries can parse -  from index &apos;users/byname&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d order by id() select { SomeProp : null, HasValue : false } " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d order by id() select { SomeProp : null, HasValue : false } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where (Start &lt;= $p0 and Start != $p1) and Until &gt; $p2 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where (Start &lt;= $p0 and Start != $p1) and Until &gt; $p2 limit $p3, $p4 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Fields.&apos;users/1-A&apos; = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Fields.&apos;users/1-A&apos; = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product) order by Count select key() as Products, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product) order by Count select key() as Products, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by NameOfProduct select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by NameOfProduct select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Books&apos; where (Name in ($p0)) and (Posts[].Type in ($p1)) " name="RavenDB Queries can parse -  from &apos;Books&apos; where (Name in ($p0)) and (Posts[].Type in ($p1)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Roots/ByUserId&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Roots/ByUserId&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p1 and $p2 where (Tag == $p0) select percentile(45.504488258391845), min(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate between $p1 and $p2 where (Tag == $p0) select percentile(45.504488258391845), min(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 scale 0.001 offset &apos;01:00:00&apos;) as __timeSeriesQueryFunction limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 scale 0.001 offset &apos;01:00:00&apos;) as __timeSeriesQueryFunction limit $p3, $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName select key() as NameOfProduct, sum(Quantity) as TotalQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName select key() as NameOfProduct, sum(Quantity) as TotalQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ListItemIndex&apos; where AccountId = $p0 " name="RavenDB Queries can parse -  from index &apos;ListItemIndex&apos; where AccountId = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where At = $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where At = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where endsWith(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where endsWith(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index3&apos; as c load c.OrderId as o select o " name="RavenDB Queries can parse -  from index &apos;Index3&apos; as c load c.OrderId as o select o " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.intersects(Coordinates, spatial.wkt($p0), 0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;MySpatialIndex&apos; where spatial.intersects(Coordinates, spatial.wkt($p0), 0) limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;As&apos; where B = $p0 " name="RavenDB Queries can parse -  from &apos;As&apos; where B = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt; $p0 and Sequence &lt; $p1 " name="RavenDB Queries can parse -  from &apos;WithIntegers&apos; where Sequence &gt; $p0 and Sequence &lt; $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { Name : x.Name+&quot; &quot;+x.Name, TotalLikes : counter(x, &quot;Total Likes&quot;) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select { Name : x.Name+&quot; &quot;+x.Name, TotalLikes : counter(x, &quot;Total Likes&quot;) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (Birthday &gt; $p0 and Birthday != $p1) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (Birthday &gt; $p0 and Birthday != $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray in ($p0) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where FirstName = $p0 or LastName = $p1 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where FirstName = $p0 or LastName = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where lucene(Name, $p0) and lucene(Name, $p1) select facet(Admin) " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; where lucene(Name, $p0) and lucene(Name, $p1) select facet(Admin) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name select key() as Name, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name select key() as Name, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; where Number = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Entities&apos; where Number = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex3&apos; where UserName != $p0 select Name, UserSchoolId as SchoolId " name="RavenDB Queries can parse -  from index &apos;UsersIndex3&apos; where UserName != $p0 select Name, UserSchoolId as SchoolId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select { CmpXngValue : cmpxchg(u.Name) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select { CmpXngValue : cmpxchg(u.Name) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;EntitySpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { Average1 : x.Properties.reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1), Average2 : x.Items.map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(x.Items.length||1), Average3 : x.Properties.map(function(a){return a;}).reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1) };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var test = 1;   	return { Average1 : x.Properties.reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1), Average2 : x.Items.map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(x.Items.length||1), Average3 : x.Properties.map(function(a){return a;}).reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1) };   }   from &apos;Articles&apos; as x select output(x) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age) " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Venue, spatial.distance(Coordinates, spatial.point($p3, $p4)) " name="RavenDB Queries can parse -  from index &apos;SpatialIdx&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Venue, spatial.distance(Coordinates, spatial.point($p3, $p4)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Data/Search&apos; where Optional = $p0 " name="RavenDB Queries can parse -  from index &apos;Data/Search&apos; where Optional = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByNameAndPets&apos; where Pets in ($p0) or Name = $p1 " name="RavenDB Queries can parse -  from index &apos;Users/ByNameAndPets&apos; where Pets in ($p0) or Name = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Posts&apos; where exact(id() = $p0) select Title " name="RavenDB Queries can parse -  from &apos;Posts&apos; where exact(id() = $p0) select Title " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, max(Price)) " name="RavenDB Queries can parse -  from index &apos;Cars&apos; where Year = $p0 select facet(Make, max(Price)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where startsWith(f_name, $p0) order by f_License desc, f_totaldownload " name="RavenDB Queries can parse -  from index &apos;test&apos; where startsWith(f_name, $p0) order by f_License desc, f_totaldownload " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex5&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex5&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Proficiencies/ConsultantId&apos; where Consultant_Id = $p0 " name="RavenDB Queries can parse -  from index &apos;Proficiencies/ConsultantId&apos; where Consultant_Id = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; as x select counter(x, &apos;Total Likes&apos;) as TotalLikes " name="RavenDB Queries can parse -  from &apos;Companies&apos; as x select counter(x, &apos;Total Likes&apos;) as TotalLikes " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex16&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex16&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and search(Age, $p1) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and search(Age, $p1) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByFalse&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/GroupByFalse&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and (exists(Name) and not search(Name, $p1) and not search(Name, $p2)) " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where Name != $p0 and (exists(Name) and not search(Name, $p1) and not search(Name, $p2)) " time="0.014">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArrayWithIndexWithCount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(invoice) {   	var vat = invoice.VATTotals;   	return { Id : id(invoice), VATTotals : Object.map(vat, function(v, k){ return {Price:v.Price,Percentage:v.Percentage,VATName:load(v.VATRateId).Name};}) };   }   from &apos;Invoices&apos; as invoice select output(invoice) " name="RavenDB Queries can parse -  declare function output(invoice) {   	var vat = invoice.VATTotals;   	return { Id : id(invoice), VATTotals : Object.map(vat, function(v, k){ return {Price:v.Price,Percentage:v.Percentage,VATName:load(v.VATRateId).Name};}) };   }   from &apos;Invoices&apos; as invoice select output(invoice) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; include Offices " name="RavenDB Queries can parse -  from &apos;People&apos; include Offices " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(ExternalId, $p0) and lucene(Name, $p1) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where lucene(ExternalId, $p0) and lucene(Name, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Name = $p0 and (Name = $p1 or Name = $p2) " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Name = $p0 and (Name = $p1 or Name = $p2) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ArticleIndex&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;ArticleIndex&apos; where moreLikeThis(id() = $p1, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MixedSyntaxIndex&apos; where ProductName = $p0 " name="RavenDB Queries can parse -  from index &apos;MixedSyntaxIndex&apos; where ProductName = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexWithCustomMethod&apos; " name="RavenDB Queries can parse -  from index &apos;IndexWithCustomMethod&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Test between $p0 and $p1 and Test between $p2 and $p3 and exists(Test2) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Test between $p0 and $p1 and Test between $p2 and $p3 and exists(Test2) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select timeseries(   from HeartRateMeasures   group by &apos;5 min&apos;   select last()   ) as __timeSeriesQueryFunction " name="RavenDB Queries can parse -  from &apos;Users&apos; select timeseries(   from HeartRateMeasures   group by &apos;5 min&apos;   select last()   ) as __timeSeriesQueryFunction " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Test&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;Test&apos; select suggest(Name, $p0, $p1) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ContainsFoo = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ContainsFoo = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; order by id() " name="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; order by id() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;JavaScriptIndexWithIdMethod&apos; " name="RavenDB Queries can parse -  from index &apos;JavaScriptIndexWithIdMethod&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Age select key() as Age, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Age select key() as Age, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by &apos;1 Hours&apos;  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CompaniesByEmployees&apos; where Employees = $p0 " name="RavenDB Queries can parse -  from index &apos;CompaniesByEmployees&apos; where Employees = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;CommitByRevision&apos; where Revision &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where lucene(Widgets[].Sprockets[].Name, $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where lucene(Widgets[].Sprockets[].Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestObjs/Summary&apos; select MyId, MyName " name="RavenDB Queries can parse -  from index &apos;TestObjs/Summary&apos; select MyId, MyName " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Minute &lt;= $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Minute &lt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestModels&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestModels&apos; where id() = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ViewModels&apos; where Type = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;ViewModels&apos; where Type = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Name.First as FirstName, Name.Last as LastName, id() as UserId " name="RavenDB Queries can parse -  from &apos;Users&apos; select Name.First as FirstName, Name.Last as LastName, id() as UserId " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(Address, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(Address, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TeemoByDuration&apos; where Duration = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TeemoByDuration&apos; where Duration = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where id() = $p0 select Lines " name="RavenDB Queries can parse -  from &apos;Orders&apos; where id() = $p0 select Lines " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; " name="RavenDB Queries can parse -  from &apos;Companies&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select cmpxchg(&quot;users/1&quot;) as cmpxchg " name="RavenDB Queries can parse -  from &apos;Users&apos; select cmpxchg(&quot;users/1&quot;) as cmpxchg " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Creatives/ClickActions/2&apos; " name="RavenDB Queries can parse -  from index &apos;Creatives/ClickActions/2&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Logfiles&apos; where (StoreId != $p0 and exists(SavedAnalyses)) limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Logfiles&apos; where (StoreId != $p0 and exists(SavedAnalyses)) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;People/ByAge&apos; where Age = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;People/ByAge&apos; where Age = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where true and not exists(Phone) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where true and not exists(Phone) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Regs&apos; select RegisteredAt limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Regs&apos; select RegisteredAt limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FanoutByNumbersWithReduce&apos; where Sum = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;FanoutByNumbersWithReduce&apos; where Sum = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex9&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex9&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(DictField, $p0) " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionaryWithComplexObjects/MethodSyntax&apos; where search(DictField, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; where search(Title, $p0, and) " name="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; where search(Title, $p0, and) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CustomersIndex&apos; where Number = $p0 " name="RavenDB Queries can parse -  from index &apos;CustomersIndex&apos; where Number = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StronglyTypedIndex&apos; " name="RavenDB Queries can parse -  from index &apos;StronglyTypedIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexMultOperation&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;NullDynamicValueIndexMultOperation&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p1)) and (entry.Channel in ($p2)) load $p0 as __load select __load " name="RavenDB Queries can parse -  from &apos;Builds&apos; as entry where (entry.ProductKey in ($p1)) and (entry.Channel in ($p2)) load $p0 as __load select __load " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestItemsIndex&apos; order by EventDate limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TestItemsIndex&apos; order by EventDate limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where id() = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SubClassIndex&apos; where Int = $p0 " name="RavenDB Queries can parse -  from index &apos;SubClassIndex&apos; where Int = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p1 and $p2 load Tag as w where (w.Manufacturer != $p0) group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p1 and $p2 load Tag as w where (w.Manufacturer != $p0) group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Artist as alphaNumeric " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric, Artist as alphaNumeric " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleMinVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select 1 as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; select 1 as Id, Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ImageByName&apos; where search(Name, $p0) order by Name " name="RavenDB Queries can parse -  from index &apos;ImageByName&apos; where search(Name, $p0) order by Name " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product), ShipTo.Country order by Count select Lines[].Product as Products, ShipTo.Country as Country, count() " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Array(Lines[].Product), ShipTo.Country order by Count select Lines[].Product as Products, ShipTo.Country as Country, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndContent&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;Posts/ByTitleAndContent&apos; where moreLikeThis(id() = $p1, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;Heartrate&apos;, last(600, &apos;Second&apos;)) " name="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;Heartrate&apos;, last(600, &apos;Second&apos;)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where SchemaFullName = $p0 and ValueBlobString = $p1 " name="RavenDB Queries can parse -  from &apos;Items&apos; where SchemaFullName = $p0 and ValueBlobString = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by NameOfProduct desc select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by NameOfProduct desc select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] &gt; $p1) and (watch.Accuracy &gt;= $p2) group by &apos;1 Months&apos;   select max(), min(), average(), count()   }   declare function output(person) {   	var customFunc = function(ranges){return {TotalMax:ranges.map(function(range){return range.Max[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),TotalMin:ranges.map(function(range){return range.Min[0];}).reduce(function(a, b) { return Raven_Min(a, b);}),AvgOfAvg:ranges.map(function(range){return range.Average[0];}).reduce(function(a, b) { return a + b; }, 0)/(ranges.length||1),MaxGroupSize:ranges.map(function(r){return r.Count[0];}).reduce(function(a, b) { return Raven_Max(a, b);})};};   	var tsQuery = __timeSeriesQueryFunction0(person, watch);   	return { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from &apos;People&apos; as person where person.Age &gt; $p0 select output(person) limit $p5, $p6 " name="RavenDB Queries can parse -  declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] &gt; $p1) and (watch.Accuracy &gt;= $p2) group by &apos;1 Months&apos;   select max(), min(), average(), count()   }   declare function output(person) {   	var customFunc = function(ranges){return {TotalMax:ranges.map(function(range){return range.Max[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),TotalMin:ranges.map(function(range){return range.Min[0];}).reduce(function(a, b) { return Raven_Min(a, b);}),AvgOfAvg:ranges.map(function(range){return range.Average[0];}).reduce(function(a, b) { return a + b; }, 0)/(ranges.length||1),MaxGroupSize:ranges.map(function(r){return r.Count[0];}).reduce(function(a, b) { return Raven_Max(a, b);})};};   	var tsQuery = __timeSeriesQueryFunction0(person, watch);   	return { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from &apos;People&apos; as person where person.Age &gt; $p0 select output(person) limit $p5, $p6 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(user) {   	var c = counter(user, &quot;Downloads&quot;);   	return { Name : user.Name, Downloads : c };   }   from &apos;Users&apos; as user select output(user) " name="RavenDB Queries can parse -  declare function output(user) {   	var c = counter(user, &quot;Downloads&quot;);   	return { Name : user.Name, Downloads : c };   }   from &apos;Users&apos; as user select output(user) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name desc select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name desc select Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &lt;= $p0 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &lt;= $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { PadLeft : u.Name.padStart(10, &quot;z&quot;), PadRight : u.Name.padEnd(10, &quot;z&quot;), StartsWith : u.Name.startsWith(&quot;J&quot;), EndsWith : u.Name.endsWith(&quot;b&quot;), Substr : u.Name.substr(0, 2), Join : [u.Name,u.LastName,u.IdNumber].join(&quot;, &quot;), ArrayJoin : u.Roles.join(&quot;-&quot;), Trim : u.Name.trim(), ToUpper : u.Name.toUpperCase(), ToLower : u.Name.toLowerCase(), Contains : u.Name.indexOf(&quot;e&quot;) !== -1, Format : &quot;Name: &quot;+u.Name+&quot;, LastName : &quot;+u.LastName, Split : u.Name.split(new RegExp(&quot;r&quot;, &quot;g&quot;)), SplitLimit : u.Name.split(new RegExp(&quot;r&quot;, &quot;g&quot;)), SplitArray : u.Name.split(new RegExp(&quot;r&quot;+&quot;|&quot;+&quot;e&quot;, &quot;g&quot;)), SplitArgument : u.Name.split(new RegExp(u.Roles, &quot;g&quot;)), SplitStringArray : u.Name.split(new RegExp(&quot;er&quot;+&quot;|&quot;+&quot;rr&quot;, &quot;g&quot;)), Replace : u.Name.replace(new RegExp(&quot;r&quot;, &quot;g&quot;), &quot;d&quot;), ReplaceString : u.Name.replace(new RegExp(&quot;Jerry&quot;, &quot;g&quot;), &quot;Charly&quot;), ReplaceArguments : u.Name.replace(new RegExp(u.Name, &quot;g&quot;), u.LastName), ReplaceArgumentsComplex : u.Name.replace(new RegExp((u.Name+&quot;a&quot;), &quot;g&quot;), (u.LastName+&quot;a&quot;)) } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { PadLeft : u.Name.padStart(10, &quot;z&quot;), PadRight : u.Name.padEnd(10, &quot;z&quot;), StartsWith : u.Name.startsWith(&quot;J&quot;), EndsWith : u.Name.endsWith(&quot;b&quot;), Substr : u.Name.substr(0, 2), Join : [u.Name,u.LastName,u.IdNumber].join(&quot;, &quot;), ArrayJoin : u.Roles.join(&quot;-&quot;), Trim : u.Name.trim(), ToUpper : u.Name.toUpperCase(), ToLower : u.Name.toLowerCase(), Contains : u.Name.indexOf(&quot;e&quot;) !== -1, Format : &quot;Name: &quot;+u.Name+&quot;, LastName : &quot;+u.LastName, Split : u.Name.split(new RegExp(&quot;r&quot;, &quot;g&quot;)), SplitLimit : u.Name.split(new RegExp(&quot;r&quot;, &quot;g&quot;)), SplitArray : u.Name.split(new RegExp(&quot;r&quot;+&quot;|&quot;+&quot;e&quot;, &quot;g&quot;)), SplitArgument : u.Name.split(new RegExp(u.Roles, &quot;g&quot;)), SplitStringArray : u.Name.split(new RegExp(&quot;er&quot;+&quot;|&quot;+&quot;rr&quot;, &quot;g&quot;)), Replace : u.Name.replace(new RegExp(&quot;r&quot;, &quot;g&quot;), &quot;d&quot;), ReplaceString : u.Name.replace(new RegExp(&quot;Jerry&quot;, &quot;g&quot;), &quot;Charly&quot;), ReplaceArguments : u.Name.replace(new RegExp(u.Name, &quot;g&quot;), u.LastName), ReplaceArgumentsComplex : u.Name.replace(new RegExp((u.Name+&quot;a&quot;), &quot;g&quot;), (u.LastName+&quot;a&quot;)) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderSubscriptions&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;OrderSubscriptions&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test4&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test4&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Email = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Email = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2.length===0||$p3.indexOf(x.TargetId)&gt;=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2.length===0||$p3.indexOf(x.TargetId)&gt;=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; order by spatial.distance(Coordinates, spatial.point($p1, $p2), $p0) " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; order by spatial.distance(Coordinates, spatial.point($p1, $p2), $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Property&apos; where Bars_Count = $p0 " name="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Property&apos; where Bars_Count = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address2 = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address2 = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; select Alias, Name, Type " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; select Alias, Name, Type " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; select Tags " name="RavenDB Queries can parse -  from &apos;Items&apos; select Tags " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where Freight &gt; $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where Freight &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.HeartRate between $p1 and $p2 group by &apos;500 Milliseconds&apos;   select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where id() = $p0 select timeseries(from u.HeartRate between $p1 and $p2 group by &apos;500 Milliseconds&apos;   select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) and Value = $p1 " name="RavenDB Queries can parse -  from &apos;Items&apos; where Names in ($p0) and Value = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/ByOrderBy/DateTimeOffset&apos; where exact(ShippedAt = $p0) " name="RavenDB Queries can parse -  from index &apos;Orders/ByOrderBy/DateTimeOffset&apos; where exact(ShippedAt = $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; where Name = $p0 select id() as Id " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; where Name = $p0 select id() as Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Profits2/References&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Profits2/References&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderableEntities&apos; where &apos;Order&apos; &gt; $p0 " name="RavenDB Queries can parse -  from &apos;OrderableEntities&apos; where &apos;Order&apos; &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BookingIndex&apos; as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } " name="RavenDB Queries can parse -  from index &apos;BookingIndex&apos; as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyCharArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyCharArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiLocationsCustomFieldName&apos; where spatial.within(someField, spatial.wkt($p0)) " name="RavenDB Queries can parse -  from index &apos;MultiLocationsCustomFieldName&apos; where spatial.within(someField, spatial.wkt($p0)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex&apos; where CompanyName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TimeSeriesIndex&apos; where CompanyName = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/ByName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;Person/ByName&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; where lucene(EmailDomain, $p0) " name="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; where lucene(EmailDomain, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Product&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Product&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; group by DoubleVal order by Count as long select count(), key() as Value " name="RavenDB Queries can parse -  from &apos;Items&apos; group by DoubleVal order by Count as long select count(), key() as Value " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithList&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithList&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &lt;= $p0 and IsVaccinated = $p1 " name="RavenDB Queries can parse -  from index &apos;DogsIndex&apos; where Age &lt;= $p0 and IsVaccinated = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where At &gt; $p0 " name="RavenDB Queries can parse -  from &apos;Items&apos; where At &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;test&apos; select suggest(Name, $p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateTimeOffsetMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateTimeOffsetMinVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; where startsWith(id(), $p0) select id() as Id, Revision limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Employees&apos; where startsWith(id(), $p0) select id() as Id, Revision limit $p1, $p2 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)), facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)), facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(d) {   	var min = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Min(a, b);});   	var max = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Max(a, b);});   	return { DateMin : (min!=null?min:d.Date), DateMax : (max!=null?max:d.Date) };   }   from &apos;Documents&apos; as d select output(d) " name="RavenDB Queries can parse -  declare function output(d) {   	var min = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Min(a, b);});   	var max = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Max(a, b);});   	return { DateMin : (min!=null?min:d.Date), DateMax : (max!=null?max:d.Date) };   }   from &apos;Documents&apos; as d select output(d) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Ent1Index&apos; as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description } " name="RavenDB Queries can parse -  from index &apos;Ent1Index&apos; as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserIndex&apos; select UN, UE limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UserIndex&apos; select UN, UE limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Company = $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and Company = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tests&apos; where StrList = $p0 " name="RavenDB Queries can parse -  from &apos;Tests&apos; where StrList = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; select Values, Strings limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index&apos; select Values, Strings limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; where (MediaSource = $p0) and (Version = $p1) and ((Year = $p2 and Month = $p3) and Day = $p4) limit $p5, $p6 " name="RavenDB Queries can parse -  from index &apos;FormOpenByDateAndMediaSourceAndVersion&apos; where (MediaSource = $p0) and (Version = $p1) and ((Year = $p2 and Month = $p3) and Day = $p4) limit $p5, $p6 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex13&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex13&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; where Name = $p0 include &apos;IncludedId(IncludedDatas/)&apos; limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;SampleData/Index&apos; where Name = $p0 include &apos;IncludedId(IncludedDatas/)&apos; limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Entities&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AnswersActivity/ByMonth&apos; " name="RavenDB Queries can parse -  from index &apos;AnswersActivity/ByMonth&apos; " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;User2s&apos; as __alias0 select __alias0.&apos;Group&apos;.Order as &apos;Order&apos; " name="RavenDB Queries can parse -  from &apos;User2s&apos; as __alias0 select __alias0.&apos;Group&apos;.Order as &apos;Order&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 select Name " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProductIndex&apos; order by id() " name="RavenDB Queries can parse -  from index &apos;ProductIndex&apos; order by id() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by &apos;TixP|N1&apos; as double select SongId, NumericAttributes limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;WithDynamicIndex&apos; order by &apos;TixP|N1&apos; as double select SongId, NumericAttributes limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PlacesByTermsAndLocation&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) and (lucene(Name, $p3) and lucene(Terms, $p4)) limit $p5, $p6 " name="RavenDB Queries can parse -  from index &apos;PlacesByTermsAndLocation&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) and (lucene(Name, $p3) and lucene(Terms, $p4)) limit $p5, $p6 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where id() in ($p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where id() in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as doc select { False : doc.Status!==&quot;Success&quot;, SecondFalse : !(doc.Status===&quot;Success&quot;), True : doc.Status===&quot;Success&quot;, SecondTrue : !(doc.Status!==&quot;Success&quot;) } " name="RavenDB Queries can parse -  from &apos;Documents&apos; as doc select { False : doc.Status!==&quot;Success&quot;, SecondFalse : !(doc.Status===&quot;Success&quot;), True : doc.Status===&quot;Success&quot;, SecondTrue : !(doc.Status!==&quot;Success&quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Search/Whitespace&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Search/Whitespace&apos; where search(Name, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;The/Search&apos; where search(Query, $p0) include highlight(Query,128,1) " name="RavenDB Queries can parse -  from index &apos;The/Search&apos; where search(Query, $p0) include highlight(Query,128,1) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.Test-Property-1 = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.Test-Property-1 = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Roles&apos; select Name " name="RavenDB Queries can parse -  from &apos;Roles&apos; select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) and (Name = $p1) " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) and (Name = $p1) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Dogs/Owners&apos; where Owners = $p0 " name="RavenDB Queries can parse -  from index &apos;Dogs/Owners&apos; where Owners = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyFloatArrayWithIndexWithCount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithISet&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithISet&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiLocations&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;MultiLocations&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Timers&apos; where End = $p0 and User.Id = $p1 select Activity.Id " name="RavenDB Queries can parse -  from &apos;Timers&apos; where End = $p0 and User.Id = $p1 select Activity.Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByNull&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByNull&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products/ByName&apos; where Name != $p0 order by random() limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Products/ByName&apos; where Name != $p0 order by random() limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not exists(StringArray)) and SomeProperty = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not exists(StringArray)) and SomeProperty = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address3 = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/CustomAnalyzers&apos; where Address3 = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestEntities&apos; where IntType &gt; $p0 " name="RavenDB Queries can parse -  from &apos;TestEntities&apos; where IntType &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate between $p0 and $p1) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.Heartrate between $p0 and $p1) as __timeSeriesQueryFunction0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where (Prop1 = $p0) and (Prop2 = $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where (Prop1 = $p0) and (Prop2 = $p1) limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestClasses&apos; where Date &gt;= $p0 order by Date desc " name="RavenDB Queries can parse -  from &apos;TestClasses&apos; where Date &gt;= $p0 order by Date desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Tests&apos; as x select { Value : x.Headers[&quot;ABC.DEF&quot;] } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Tests&apos; as x select { Value : x.Headers[&quot;ABC.DEF&quot;] } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArray = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Testing_Sort&apos; where uid in ($p0) " name="RavenDB Queries can parse -  from index &apos;Testing_Sort&apos; where uid in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;1234&apos; " name="RavenDB Queries can parse -  from &apos;1234&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where search(NameTranslations_en, $p0) " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where search(NameTranslations_en, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name &lt; $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByNameAndIsActive&apos; where Name = $p0 and IsActive = $p1 limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;UsersByNameAndIsActive&apos; where Name = $p0 and IsActive = $p1 limit $p2, $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where true and not exists(SomeField) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where true and not exists(SomeField) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Boats&apos; where Weight = $p0 " name="RavenDB Queries can parse -  from &apos;Boats&apos; where Weight = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArrayWithIndex = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TimeSeries/Index/With/CompareExchange&apos; select City " name="RavenDB Queries can parse -  from index &apos;TimeSeries/Index/With/CompareExchange&apos; select City " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; select ShipTo " name="RavenDB Queries can parse -  from &apos;Orders&apos; select ShipTo " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Clients&apos; where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 " name="RavenDB Queries can parse -  from &apos;Clients&apos; where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name, ExtraField limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; select Name, ExtraField limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ThirdOutput&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;ThirdOutput&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LastAccessPerUserTicksIndex&apos; select Name, LastAccessTicks " name="RavenDB Queries can parse -  from index &apos;LastAccessPerUserTicksIndex&apos; select Name, LastAccessTicks " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Animal/Index&apos; where (Type = $p0 or search(Name, $p1) and search(Name, $p2)) " name="RavenDB Queries can parse -  from index &apos;Animal/Index&apos; where (Type = $p0 or search(Name, $p1) and search(Name, $p2)) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) or Name = $p1 " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Tags, $p0) or Name = $p1 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) select distinct Name limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) select distinct Name limit $p1, $p2 " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products/BySupplier&apos; " name="RavenDB Queries can parse -  from index &apos;Products/BySupplier&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;VersionedDocuments&apos; select Id, Version, Document " name="RavenDB Queries can parse -  from index &apos;VersionedDocuments&apos; select Id, Version, Document " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Name in ($p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 and LastName = $p1) and Age &gt; $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where (Name = $p0 and LastName = $p1) and Age &gt; $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select suggest(Name, $p0) as NewName " name="RavenDB Queries can parse -  from &apos;Users&apos; select suggest(Name, $p0) as NewName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as x select { BirthDay : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getDate():null, BirthMonth : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getMonth()+1:null, BirthYear : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getFullYear():null } " name="RavenDB Queries can parse -  from &apos;People&apos; as x select { BirthDay : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getDate():null, BirthMonth : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getMonth()+1:null, BirthYear : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getFullYear():null } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;KmGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;KmGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags[] order by Count as long select count(), key() as Tag " name="RavenDB Queries can parse -  from &apos;Items&apos; group by Tags[] order by Count as long select count(), key() as Tag " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicIndex&apos; " name="RavenDB Queries can parse -  from index &apos;DynamicIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt &gt; $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; where search(Title, $p0, and) select Title " name="RavenDB Queries can parse -  from index &apos;BlogIndex&apos; where search(Title, $p0, and) select Title " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where search(Name, $p0) order by Name " name="RavenDB Queries can parse -  from index &apos;test&apos; where search(Name, $p0) order by Name " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p0) include explanations() " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p0) include explanations() " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SuggestionIndex&apos; " name="RavenDB Queries can parse -  from index &apos;SuggestionIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AspectsByName&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;AspectsByName&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Description in ($p0) " name="RavenDB Queries can parse -  from &apos;OrderItems&apos; where Description in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where id() = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where id() = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;People/ByName&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;People/ByName&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name != $p0 load u.DetailIds as details[] select { FullName : u.Name+&quot; &quot;+u.LastName, Details : details } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name != $p0 load u.DetailIds as details[] select { FullName : u.Name+&quot; &quot;+u.LastName, Details : details } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; select IdCollection.Length as IdCount " name="RavenDB Queries can parse -  from &apos;Documents&apos; select IdCollection.Length as IdCount " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Books/Search&apos; where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author " name="RavenDB Queries can parse -  from index &apos;Books/Search&apos; where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(o) {   	var TotalSpentOnOrder = function(order){return order.Lines.map(function(l){return l.PricePerUnit*l.Quantity-l.Discount;}).reduce(function(a, b) { return a + b; }, 0);};   	return { OrderId : id(o), TotalMoneySpent : TotalSpentOnOrder(o), CompanyName : load(o.Company).Name };   }   from &apos;Orders&apos; as o select output(o) " name="RavenDB Queries can parse -  declare function output(o) {   	var TotalSpentOnOrder = function(order){return order.Lines.map(function(l){return l.PricePerUnit*l.Quantity-l.Discount;}).reduce(function(a, b) { return a + b; }, 0);};   	return { OrderId : id(o), TotalMoneySpent : TotalSpentOnOrder(o), CompanyName : load(o.Company).Name };   }   from &apos;Orders&apos; as o select output(o) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(endsWith(Name, $p0)) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where exact(endsWith(Name, $p0)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not (SomeProperty != $p0 and SomeProperty != $p1)) limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where (true and not (SomeProperty != $p0 and SomeProperty != $p1)) limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products/ByName&apos; select suggest(Name, $p0, $p1) " name="RavenDB Queries can parse -  from index &apos;Products/ByName&apos; select suggest(Name, $p0, $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where id() = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where id() = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.FirstName, __alias0.&apos;Group&apos;, counter(__alias0, likes) as Likes " name="RavenDB Queries can parse -  from &apos;Users&apos; as __alias0 select __alias0.FirstName, __alias0.&apos;Group&apos;, counter(__alias0, likes) as Likes " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RatingByCategoryIndex&apos; " name="RavenDB Queries can parse -  from index &apos;RatingByCategoryIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(d, $p0, $p1) {   	var temp = d.SubDocuments.find(function(x){return x!=null;});   	return { Id : id(d), TargetId : d.TargetId, Values : d.SubDocuments.filter(function(x){return $p0.length===0||$p1.indexOf(x.TargetId)&gt;=0;}) };   }   from &apos;Documents&apos; as d select output(d, $p0, $p1) " name="RavenDB Queries can parse -  declare function output(d, $p0, $p1) {   	var temp = d.SubDocuments.find(function(x){return x!=null;});   	return { Id : id(d), TargetId : d.TargetId, Values : d.SubDocuments.filter(function(x){return $p0.length===0||$p1.indexOf(x.TargetId)&gt;=0;}) };   }   from &apos;Documents&apos; as d select output(d, $p0, $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric select Title " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric select Title " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SearchableElements&apos; where PermittedUsers in ($p0) " name="RavenDB Queries can parse -  from index &apos;SearchableElements&apos; where PermittedUsers in ($p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PointIndex&apos; where spatial.within(Point, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PointIndex&apos; where spatial.within(Point, spatial.wkt($p0)) limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices group by &apos;3 Hours&apos;   select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select timeseries(from u.StockPrices group by &apos;3 Hours&apos;   select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Document/Index&apos; where List = $p0 " name="RavenDB Queries can parse -  from index &apos;Document/Index&apos; where List = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex1&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex1&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MultiMapIndexTheSameCollection&apos; " name="RavenDB Queries can parse -  from index &apos;MultiMapIndexTheSameCollection&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;The/Search&apos; select suggest(Query, $p0) " name="RavenDB Queries can parse -  from index &apos;The/Search&apos; select suggest(Query, $p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &lt; $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 select Name " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt;= $p0 select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Teams&apos; where OwnerId = $p0 or Developers[].UserId = $p1 include OwnerId " name="RavenDB Queries can parse -  from &apos;Teams&apos; where OwnerId = $p0 or Developers[].UserId = $p1 include OwnerId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) limit $p4, $p5 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) limit $p4, $p5 " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LogEntries/Search&apos; where search(Query, $p0) " name="RavenDB Queries can parse -  from index &apos;LogEntries/Search&apos; where search(Query, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DriversIndex&apos; select PersonId, PersonName, CarRegistration, CarMake " name="RavenDB Queries can parse -  from index &apos;DriversIndex&apos; select PersonId, PersonName, CarRegistration, CarMake " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where search(Name, $p0) select key() as Name, count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Name where search(Name, $p0) select key() as Name, count() " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateMaxPercision = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateMaxPercision = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;ProviderSearchIndex2&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; select facet(Name, sum(Count)) " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; select facet(Name, sum(Count)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionary/QuerySyntax&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexReturningDictionary/QuerySyntax&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ThorIndex&apos; " name="RavenDB Queries can parse -  from index &apos;ThorIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MonthlyInvoices&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MonthlyInvoices&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; select Test, Properties " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; select Test, Properties " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalPricePerUnit as double select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName order by TotalPricePerUnit as double select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Shipments&apos; select id() as Id, Name limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Shipments&apos; select id() as Id, Name limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByPostCategory&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;Posts/ByPostCategory&apos; where moreLikeThis(id() = $p1, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_2229&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_2229&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where id() in ($p0) " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where id() in ($p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CgcAndProductionIndex&apos; where CgcName = $p0 and ProductionName = $p1 " name="RavenDB Queries can parse -  from index &apos;CgcAndProductionIndex&apos; where CgcName = $p0 and ProductionName = $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Month &gt; $p0 and Date.Month &lt;= $p1 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Month &gt; $p0 and Date.Month &lt;= $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; where startsWith(Name, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/SortByName&apos; order by Name " name="RavenDB Queries can parse -  from index &apos;Companies/SortByName&apos; order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Hour &gt;= $p0 " name="RavenDB Queries can parse -  from &apos;PersonAndDates&apos; where Date.Hour &gt;= $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;OrderByCompanyCountryIndex&apos; as o where ShipTo_Country = $p0 select { Order : o, Company : load(o.Company) } " name="RavenDB Queries can parse -  from index &apos;OrderByCompanyCountryIndex&apos; as o where ShipTo_Country = $p0 select { Order : o, Company : load(o.Company) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;StringReverseIndex&apos; " name="RavenDB Queries can parse -  from index &apos;StringReverseIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyIntArrayWithIndexWithCount = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex11&apos; where Friends = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex11&apos; where Friends = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Ent1Index/Dynamic&apos; as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description, DescriptionNoStorage : r.DescriptionNoStorage } " name="RavenDB Queries can parse -  from index &apos;Ent1Index/Dynamic&apos; as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description, DescriptionNoStorage : r.DescriptionNoStorage } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyProfitsReferences&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MyProfitsReferences&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt between $p0 and $p1 " name="RavenDB Queries can parse -  from index &apos;SampleSearchIndex&apos; where NullableInt between $p0 and $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Value = $p0 and StringDict[].Key = $p1 " name="RavenDB Queries can parse -  from &apos;DictItems&apos; where StringDict[].Value = $p0 and StringDict[].Key = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersWithProductsByName&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersWithProductsByName&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; where lucene(ExternalId, $p0) " name="RavenDB Queries can parse -  from index &apos;Index1&apos; where lucene(ExternalId, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &gt; $p0 and Cost &lt; $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &gt; $p0 and Cost &lt; $p1 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name != cmpxchg($p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name != cmpxchg($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateTimeOffsetMaxVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DateTimeOffsetMaxVal = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/MethodSyntax&apos; where Age = $p0 " name="RavenDB Queries can parse -  from index &apos;IndexReturningDictionary/MethodSyntax&apos; where Age = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where startsWith(Bugs, $p0) and endsWith(Bugs, $p1) " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where startsWith(Bugs, $p0) and endsWith(Bugs, $p1) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Test\u0010Users&apos; " name="RavenDB Queries can parse -  from &apos;Test\u0010Users&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Entities&apos; where EntityARef.Id = $p0 " name="RavenDB Queries can parse -  from &apos;Entities&apos; where EntityARef.Id = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooMapReduceIndex&apos; " name="RavenDB Queries can parse -  from index &apos;FooMapReduceIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ObjectWithDates&apos; where LocalDate = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;ObjectWithDates&apos; where LocalDate = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;SampleDatas&apos; where Date.DayOfWeek = $p0 " name="RavenDB Queries can parse -  from &apos;SampleDatas&apos; where Date.DayOfWeek = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; as item load item.User as user, item.Roles as roles[] select { Id : id(user), Name : user.Name, Roles : roles } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index&apos; as item load item.User as user, item.Roles as roles[] select { Id : id(user), Name : user.Name, Roles : roles } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Offers&apos; where TripId = $p0 order by Name select Name as Text, id() as Value " name="RavenDB Queries can parse -  from &apos;Offers&apos; where TripId = $p0 order by Name select Name as Text, id() as Value " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis(id() = $p0) " name="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis(id() = $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UnicodeItems&apos; where Content = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;UnicodeItems&apos; where Content = $p0 limit $p1, $p2 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TasksCount/ForPerson&apos; " name="RavenDB Queries can parse -  from index &apos;TasksCount/ForPerson&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestCommodityGroups&apos; select Name as Value, Name as Text " name="RavenDB Queries can parse -  from &apos;TestCommodityGroups&apos; select Name as Value, Name as Text " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName/Reduce&apos; select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName/Reduce&apos; select Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee, o.Company as company select employee.FirstName " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee, o.Company as company select employee.FirstName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; group by name, Name order by Count as long select name, Name, count() " name="RavenDB Queries can parse -  from &apos;Items&apos; group by name, Name order by Count as long select name, Name, count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1 Hours&apos;  ) as __timeSeriesQueryFunction " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1 Hours&apos;  ) as __timeSeriesQueryFunction " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; where Birthday &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(u, $p0, $p1) {   	var detailId = &quot;d&quot;+u.Name[1]+&quot;ta&quot;+u.LastName[4]+&quot;ls&quot;+$p0+u.DetailShortId+&quot;-&quot;+$p1;   	return { Name : u.Name, DetailId : detailId, Detail : load(detailId) };   }   from &apos;Users&apos; as u select output(u, $p0, $p1) " name="RavenDB Queries can parse -  declare function output(u, $p0, $p1) {   	var detailId = &quot;d&quot;+u.Name[1]+&quot;ta&quot;+u.LastName[4]+&quot;ls&quot;+$p0+u.DetailShortId+&quot;-&quot;+$p1;   	return { Name : u.Name, DetailId : detailId, Detail : load(detailId) };   }   from &apos;Users&apos; as u select output(u, $p0, $p1) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where fuzzy(Name = $p0, 0.99) " name="RavenDB Queries can parse -  from &apos;Companies&apos; where fuzzy(Name = $p0, 0.99) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/BarProjection&apos; where Reminders_ReminderDue = $p0 select AdminUserId, Note, ReminderDue, FirstName, LastName, id() as Id " name="RavenDB Queries can parse -  from index &apos;Foos/BarProjection&apos; where Reminders_ReminderDue = $p0 select AdminUserId, Note, ReminderDue, FirstName, LastName, id() as Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentsIndex&apos; where CompanyName = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;DocumentsIndex&apos; where CompanyName = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos&apos; where spatial.within(Position, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) and lucene(CatId, $p3) and lucene(CatId, $p4) " name="RavenDB Queries can parse -  from index &apos;Foos&apos; where spatial.within(Position, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) and lucene(CatId, $p3) and lucene(CatId, $p4) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City &lt; b.Address.City) ? -1 : (a.Address.City &gt; b.Address.City)? 1 : 0);}) } " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City &lt; b.Address.City) ? -1 : (a.Address.City &gt; b.Address.City)? 1 : 0);}) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AnimalsByName&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;AnimalsByName&apos; where startsWith(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as x select timeseries(from x.HeartRate group by &apos;1 days&apos;  ) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as x select timeseries(from x.HeartRate group by &apos;1 days&apos;  ) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and HistoryCode = $p1) and CaseId != $p2) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where ((OrganizationId = $p0 and HistoryCode = $p1) and CaseId != $p2) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by OrderedAt " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by OrderedAt " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by TestShort as long " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by TestShort as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex4&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex4&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Title as alphaNumeric " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; where Name in ($p0) " name="RavenDB Queries can parse -  from &apos;Documents&apos; where Name in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate select percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where search(Name, $p0) or search(Description, $p1) or spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where search(Name, $p0) or search(Description, $p1) or spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithCountAndCondition&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithCountAndCondition&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicDictionaryIndex&apos; select id() as Id, ContainsKeyResult, AnyResult, AnyWithPredicateResult, LastResult, LastOrDefaultResult, ElementAtResult, ElementAtOrDefaultResult, SkipResult, SkipLastResult, TakeResult, TakeLastResult, UnionResult, IntersectResult, PrependResult, ExceptResult, TryGetValueResult " name="RavenDB Queries can parse -  from index &apos;DynamicDictionaryIndex&apos; select id() as Id, ContainsKeyResult, AnyResult, AnyWithPredicateResult, LastResult, LastOrDefaultResult, ElementAtResult, ElementAtOrDefaultResult, SkipResult, SkipLastResult, TakeResult, TakeLastResult, UnionResult, IntersectResult, PrependResult, ExceptResult, TryGetValueResult " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { Dictionary : (x.Dictionary!=null?x.Dictionary:{}), DicWithInitializer : (x.Dictionary!=null?x.Dictionary:{a:&quot;A&quot;,x:&quot;X&quot;}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { Dictionary : (x.Dictionary!=null?x.Dictionary:{}), DicWithInitializer : (x.Dictionary!=null?x.Dictionary:{a:&quot;A&quot;,x:&quot;X&quot;}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Day &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Day &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by LastName.Length as long " name="RavenDB Queries can parse -  from &apos;Users&apos; order by LastName.Length as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedFieldJs2&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexWithNestedFieldJs2&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleEpsilon = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DoubleEpsilon = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where search(FavoritePrimes, $p0) " name="RavenDB Queries can parse -  from &apos;GeekPeople&apos; where search(FavoritePrimes, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Ticks &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Ticks &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select id() as Id, Latitude, Longitude limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select id() as Id, Latitude, Longitude limit $p3, $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;People&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { ItemsLength : x.Items.length, ItemsCount : x.Items.length, FailedCount : x.Items.filter(function(i){return i.Failed===true;}).length, SuccessCount : x.Items.filter(function(i){return i.Failed===false;}).length, UnknownFailedCount : x.Items.filter(function(i){return i.Failed==null;}).length, NegativeResultCount : x.Items.filter(function(i){return i.Result&lt;0;}).length, PositiveResultCount : x.Items.filter(function(i){return i.Result&gt;0;}).length, UnknownResultCount : x.Items.filter(function(i){return i.Result==null;}).length, ExactResultCount : x.Items.filter(function(i){return i.Result===123;}).length } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Documents&apos; as x where id() = $p0 select { ItemsLength : x.Items.length, ItemsCount : x.Items.length, FailedCount : x.Items.filter(function(i){return i.Failed===true;}).length, SuccessCount : x.Items.filter(function(i){return i.Failed===false;}).length, UnknownFailedCount : x.Items.filter(function(i){return i.Failed==null;}).length, NegativeResultCount : x.Items.filter(function(i){return i.Result&lt;0;}).length, PositiveResultCount : x.Items.filter(function(i){return i.Result&gt;0;}).length, UnknownResultCount : x.Items.filter(function(i){return i.Result==null;}).length, ExactResultCount : x.Items.filter(function(i){return i.Result===123;}).length } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Auto/Users/ByName&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Auto/Users/ByName&apos; limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/ByIntAttribute&apos; where Color &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;Product/ByIntAttribute&apos; where Color &gt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyShortArrayWithIndex = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; " name="RavenDB Queries can parse -  from &apos;Products&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where AName = $p0 " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where AName = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SubClassIndex2&apos; where Int = $p0 " name="RavenDB Queries can parse -  from index &apos;SubClassIndex2&apos; where Int = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; select id() as Id, SubEntities " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; select id() as Id, SubEntities " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance(&apos;spatial.point(Latitude, Longitude)&apos;, spatial.point($p3, $p4)) " name="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance(&apos;spatial.point(Latitude, Longitude)&apos;, spatial.point($p3, $p4)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where search(id(), $p0) " name="RavenDB Queries can parse -  from &apos;Users&apos; where search(id(), $p0) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) " name="RavenDB Queries can parse -  from index &apos;SalesIndex&apos; where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { Id : id(doc)+&quot; test&quot;, Name : doc.Name } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DocumentIndex&apos; as doc select { Id : id(doc)+&quot; test&quot;, Name : doc.Name } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, Lines[].Quantity select count(), Lines[].Product as ProductName, Lines[].Quantity as Quantity " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product, Lines[].Quantity select count(), Lines[].Product as ProductName, Lines[].Quantity as Quantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours offset &apos;01:00:00&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours offset &apos;01:00:00&apos;) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Locations&apos; select id() as Id, LocationParents.Count as Depth, Name " name="RavenDB Queries can parse -  from &apos;Locations&apos; select id() as Id, LocationParents.Count as Depth, Name " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name, Metadata : getMetadata(u), LastModified : getMetadata(u)[&apos;@last-modified&apos;] } " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { Name : u.Name, Metadata : getMetadata(u), LastModified : getMetadata(u)[&apos;@last-modified&apos;] } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByNameAndAnalyzedName&apos; where search(AnalyzedName, $p0) select AnalyzedName limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByNameAndAnalyzedName&apos; where search(AnalyzedName, $p0) select AnalyzedName limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UserTalks&apos; select Name " name="RavenDB Queries can parse -  from &apos;UserTalks&apos; select Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale3&apos; where lucene(Any, $p0) " name="RavenDB Queries can parse -  from index &apos;Product/AvailableForSale3&apos; where lucene(Any, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Fox/Search&apos; where proximity(search(Name, $p0), 2) " name="RavenDB Queries can parse -  from index &apos;Fox/Search&apos; where proximity(search(Name, $p0), 2) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ByVehicle&apos; where Make = $p0 " name="RavenDB Queries can parse -  from index &apos;ByVehicle&apos; where Make = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Navigation/ByNavigationId&apos; where NavigationId = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Navigation/ByNavigationId&apos; where NavigationId = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total), sum(Quantity), avg(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total), sum(Quantity), avg(Total)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;HouseByRent&apos; " name="RavenDB Queries can parse -  from index &apos;HouseByRent&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; " name="RavenDB Queries can parse -  from &apos;Employees&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name select Name limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; order by Name select Name limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;PostComments&apos; as x select { Comments : x.Comments.map(function(comment){return {comment:comment,owner:load(comment.OwnerId)};}).map(function(__rvn0){return {Id:id(__rvn0.comment),Owner:{Id:id(__rvn0.owner)}};}) } " name="RavenDB Queries can parse -  from &apos;PostComments&apos; as x select { Comments : x.Comments.map(function(comment){return {comment:comment,owner:load(comment.OwnerId)};}).map(function(__rvn0){return {Id:id(__rvn0.comment),Owner:{Id:id(__rvn0.owner)}};}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DriversIndex&apos; select PersonId, PersonName, CarRegistration, CarMake limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DriversIndex&apos; select PersonId, PersonName, CarRegistration, CarMake limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TypedThenByIndex&apos; select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate " name="RavenDB Queries can parse -  from index &apos;TypedThenByIndex&apos; select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where lucene(Query, $p0) and exact(Department = $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;Product/Search&apos; where lucene(Query, $p0) and exact(Department = $p1) limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (((CaseId != $p0 and CaseId != $p1)) and CaseId != $p2) " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where (((CaseId != $p0 and CaseId != $p1)) and CaseId != $p2) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Model/Info&apos; select Name, &apos;Group&apos; " name="RavenDB Queries can parse -  from index &apos;Model/Info&apos; select Name, &apos;Group&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Documents&apos; where id() in ($p0) select id() as Id limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Documents&apos; where id() in ($p0) select id() as Id limit $p1, $p2 " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Posts&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Posts&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft = $p0 select id() as Id, AmountLeft " name="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft = $p0 select id() as Id, AmountLeft " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestClasses&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestClasses&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(DateOfListing &lt; &apos;2021-07-11T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-11T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-14T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-14T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-21T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-21T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-28T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-28T00:00:00.0000000&apos;) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where DateOfListing &gt; $p0 select facet(DateOfListing &lt; &apos;2021-07-11T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-11T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-14T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-14T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-21T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-21T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-28T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-28T00:00:00.0000000&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersAndFriends&apos; select distinct * limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;UsersAndFriends&apos; select distinct * limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DummyGuidList&apos; where DummyGuid = $p0 " name="RavenDB Queries can parse -  from index &apos;DummyGuidList&apos; where DummyGuid = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.&apos;Test-Property1&apos; = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where @metadata.&apos;Test-Property1&apos; = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;RecurseIndexWithIList&apos; " name="RavenDB Queries can parse -  from index &apos;RecurseIndexWithIList&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex19&apos; where FriendsCount &gt; $p0 select NewFriends limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex19&apos; where FriendsCount &gt; $p0 select NewFriends limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AccountSearch&apos; where PortalId = $p0 and search(Query, $p1) or search(QueryBoosted, $p2) " name="RavenDB Queries can parse -  from index &apos;AccountSearch&apos; where PortalId = $p0 and search(Query, $p1) or search(QueryBoosted, $p2) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DailyInvoices&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;DailyInvoices&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where RefNameNotNull = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;test&apos; where RefNameNotNull = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Sales/ByDateProduct&apos; " name="RavenDB Queries can parse -  from index &apos;Sales/ByDateProduct&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapReduceIndex&apos; select Id, DictionarySum, DictionarySumAggregate, IdsWithDecimals, IdsWithDecimals2, OrderByDescending, IntIntDic, Items, IntIntDic2, CompleteFt, RemainingFt, TotalFt, RemainingQty, ScheduleState " name="RavenDB Queries can parse -  from index &apos;DynamicDictionaryTestMapReduceIndex&apos; select Id, DictionarySum, DictionarySumAggregate, IdsWithDecimals, IdsWithDecimals2, OrderByDescending, IntIntDic, Items, IntIntDic2, CompleteFt, RemainingFt, TotalFt, RemainingQty, ScheduleState " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Movies&apos; where lucene(Tagline, $p0) " name="RavenDB Queries can parse -  from index &apos;Movies&apos; where lucene(Tagline, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Weight desc " name="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Weight desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from &apos;Items&apos; where search(Name, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Year as long desc, Title as alphaNumeric " name="RavenDB Queries can parse -  from index &apos;TracksIndex&apos; order by Year as long desc, Title as alphaNumeric " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Products/ByCategory&apos; " name="RavenDB Queries can parse -  from index &apos;Products/ByCategory&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Barns&apos; where Households[].Members[].Name = $p0 " name="RavenDB Queries can parse -  from &apos;Barns&apos; where Households[].Members[].Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Total &lt; $p0, Total &gt;= $p1 and Total &lt; $p2, Total &gt;= $p3 and Total &lt; $p4, Total &gt;= $p5, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1h&apos;  ) as __timeSeriesQueryFunction " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by &apos;1h&apos;  ) as __timeSeriesQueryFunction " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) limit $p2, $p3 " name="RavenDB Queries can parse -  from index &apos;User/Entity&apos; where (CreatedDate &gt;= $p0) and (CreatedDate &lt;= $p1) limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Promos/Index&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from index &apos;Promos/Index&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Bar as long desc " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Bar as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City &lt; b.Address.City) ? -1 : (a.Address.City &gt; b.Address.City)? 1 : 0);}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City &lt; b.Address.City) ? -1 : (a.Address.City &gt; b.Address.City)? 1 : 0);}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ExampleIndex&apos; where search(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;ExampleIndex&apos; where search(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexRows&apos; select DataId, LineNumber " name="RavenDB Queries can parse -  from index &apos;IndexRows&apos; select DataId, LineNumber " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArrayWithIndexWithCount = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyShortArrayWithIndexWithCount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;eventsByLatLngWSpecialField&apos; order by spatial.distance(MySpacialField, spatial.point($p0, $p1)) " name="RavenDB Queries can parse -  from index &apos;eventsByLatLngWSpecialField&apos; order by spatial.distance(MySpacialField, spatial.point($p0, $p1)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;PersonIndex&apos; as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByTurnover&apos; " name="RavenDB Queries can parse -  from index &apos;Companies/ByTurnover&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TranTestIndex&apos; where startsWith(Trans_en, $p0) " name="RavenDB Queries can parse -  from index &apos;TranTestIndex&apos; where startsWith(Trans_en, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select distinct Name " name="RavenDB Queries can parse -  from &apos;Users&apos; select distinct Name " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Recurse&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Recurse&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/LastLoggedInAt&apos; " name="RavenDB Queries can parse -  from index &apos;Users/LastLoggedInAt&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where id() = $p0 " name="RavenDB Queries can parse -  from &apos;Orders&apos; where id() = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsNotAnalyzed&apos; where exact(Name in ($p0)) " name="RavenDB Queries can parse -  from index &apos;PersonsNotAnalyzed&apos; where exact(Name in ($p0)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) and boost(Name = $p4, 6) " name="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) and boost(Name = $p4, 6) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Creatives/ClickActions/1&apos; " name="RavenDB Queries can parse -  from index &apos;Creatives/ClickActions/1&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item select { Name : &quot;XYZ: &quot;+item.Name, Key : id(item).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0] } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item select { Name : &quot;XYZ: &quot;+item.Name, Key : id(item).split(new RegExp(&quot;/&quot;, &quot;g&quot;)).slice(-1)[0] } limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bars&apos; where Age &gt;= $w1p0 " name="RavenDB Queries can parse -  from &apos;Bars&apos; where Age &gt;= $w1p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 " name="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TShirtIndex&apos; where intersect((Manufacturer = $p0), (Color = $p1 and Size = $p2), Color = $p3 and Size = $p4)  select id() as Id, Manufacturer, Color, Size " name="RavenDB Queries can parse -  from index &apos;TShirtIndex&apos; where intersect((Manufacturer = $p0), (Color = $p1 and Size = $p2), Color = $p3 and Size = $p4)  select id() as Id, Manufacturer, Color, Size " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DailyActivityIndex&apos; " name="RavenDB Queries can parse -  from index &apos;DailyActivityIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product select count(), key() as ProductName " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Lines[].Product select count(), key() as ProductName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age != $p0 " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where Age != $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &lt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Megapixels &lt; $p0 select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyFloatArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and LastName = $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 and LastName = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; where TotalPrice &gt; $p0 include CustomerId " name="RavenDB Queries can parse -  from &apos;Orders&apos; where TotalPrice &gt; $p0 include CustomerId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where Category = $p0 and Title.Length = $p1 " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where Category = $p0 and Title.Length = $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where ((Bar.SomeDictionary[].Key = $p0 and Bar.SomeDictionary[].Value = $p1) or (Bar.SomeOtherDictionary[].Key = $p2 and Bar.SomeOtherDictionary[].Value = $p3)) or Bar = $p4 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where ((Bar.SomeDictionary[].Key = $p0 and Bar.SomeDictionary[].Value = $p1) or (Bar.SomeOtherDictionary[].Key = $p2 and Bar.SomeOtherDictionary[].Value = $p3)) or Bar = $p4 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, &apos;Miles&apos;)) " name="RavenDB Queries can parse -  from &apos;Points&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, &apos;Miles&apos;)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item select { Name : &quot;XYZ: &quot;+item.Name, Docs : Object.map(item.Docs, function(v, k){ return {Val:v.SomeValue};}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TestDocumentByName&apos; as item select { Name : &quot;XYZ: &quot;+item.Name, Docs : Object.map(item.Docs, function(v, k){ return {Val:v.SomeValue};}) } limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) order by Name, LastName select Name, LastName " name="RavenDB Queries can parse -  from &apos;Users&apos; where startsWith(id(), $p0) order by Name, LastName select Name, LastName " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Weight as double desc limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;TestItemIndex&apos; order by Weight as double desc limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index2&apos; as c load c.OrderId as o select o " name="RavenDB Queries can parse -  from index &apos;Index2&apos; as c load c.OrderId as o select o " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Family/MultiMapReduce&apos; where PersonId = $p0 " name="RavenDB Queries can parse -  from index &apos;Family/MultiMapReduce&apos; where PersonId = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyDoubleArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AllTimeRankingIndex&apos; " name="RavenDB Queries can parse -  from index &apos;AllTimeRankingIndex&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocIndex&apos; where IntVal = $p0 " name="RavenDB Queries can parse -  from index &apos;DocIndex&apos; where IntVal = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyTsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;MyTsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test3&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test3&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; select SortVersion limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test&apos; select SortVersion limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where FirstName in ($p0) or LastName in ($p1) " name="RavenDB Queries can parse -  from index &apos;TestIndex&apos; where FirstName in ($p0) or LastName in ($p1) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Order2s&apos; where TotalPrice &gt; $p0 include Customer2Id " name="RavenDB Queries can parse -  from &apos;Order2s&apos; where TotalPrice &gt; $p0 include Customer2Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexName&apos; " name="RavenDB Queries can parse -  from index &apos;IndexName&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionStaticParameter&apos; " name="RavenDB Queries can parse -  from index &apos;IndexWithArrowFunctionStaticParameter&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) " name="RavenDB Queries can parse -  from index &apos;FindByLatLng&apos; where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, &apos;Miles&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt &lt; b.OrderedAt) ? -1 : (a.OrderedAt &gt; b.OrderedAt)? 1 : 0);}) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt &lt; b.OrderedAt) ? -1 : (a.OrderedAt &gt; b.OrderedAt)? 1 : 0);}) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? -1 : (a.ProductName &gt; b.ProductName)? 1 : 0);}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName &lt; b.ProductName) ? -1 : (a.ProductName &gt; b.ProductName)? 1 : 0);}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select percentile(47.34986612915521)) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select percentile(47.34986612915521)) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 group by &apos;1 Hours&apos; , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MapReduceIndexFailingOn2ndReduce&apos; " name="RavenDB Queries can parse -  from index &apos;MapReduceIndexFailingOn2ndReduce&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_3919&apos;) desc " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_3919&apos;) desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 order by Name " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name != $p0 order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MKSessions&apos; select distinct User.AnonymousId " name="RavenDB Queries can parse -  from &apos;MKSessions&apos; select distinct User.AnonymousId " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where UtcTime &gt;= $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Foos&apos; where UtcTime &gt;= $p0 limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where Active = $p0 select facet(Category) " name="RavenDB Queries can parse -  from index &apos;Index&apos; where Active = $p0 select facet(Category) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Students&apos; where boost(startsWith(FirstName, $p0), 3) or startsWith(LastName, $p1) order by score(), LastName " name="RavenDB Queries can parse -  from &apos;Students&apos; where boost(startsWith(FirstName, $p0), 3) or startsWith(LastName, $p1) order by score(), LastName " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Precision&apos; where M &lt; $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Precision&apos; where M &lt; $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; where Active = $p0 " name="RavenDB Queries can parse -  from index &apos;Users/ByActive&apos; where Active = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where (true and IndexArrayProp != $p0) " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; where (true and IndexArrayProp != $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where BookingRequests_StartDay &gt;= $p0 and BookingRequests_EndDay &lt;= $p1 select facet(id(&apos;facets/PropertySearchingFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;PropertiesSearchIndex&apos; where BookingRequests_StartDay &gt;= $p0 and BookingRequests_EndDay &lt;= $p1 select facet(id(&apos;facets/PropertySearchingFacets&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;JavaScriptIndexWith_getMetadataMethod&apos; select Collection, ChangeVector, id() as Id, LastModified " name="RavenDB Queries can parse -  from index &apos;JavaScriptIndexWith_getMetadataMethod&apos; select Collection, ChangeVector, id() as Id, LastModified " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PostCountsByUser/WithName&apos; where startsWith(UserName, $p0) " name="RavenDB Queries can parse -  from index &apos;PostCountsByUser/WithName&apos; where startsWith(UserName, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } " name="RavenDB Queries can parse -  from &apos;MultiOrders&apos; as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where id() = $p0 select Name limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where id() = $p0 select Name limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where Getter = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;EntityIndex&apos; where Getter = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where id() = $p0 " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where id() = $p0 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where (Active != $p0 and Active = $p1) " name="RavenDB Queries can parse -  from &apos;Items&apos; where (Active != $p0 and Active = $p1) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; group by Company select sum(Lines.Count) as LinesLength " name="RavenDB Queries can parse -  from &apos;Orders&apos; group by Company select sum(Lines.Count) as LinesLength " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;TransportsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as a select { Date : (function (date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());})(new Date()) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as a select { Date : (function (date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());})(new Date()) } " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Students/WithFriends&apos; " name="RavenDB Queries can parse -  from index &apos;Students/WithFriends&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select slope() scale 1000) as __timeSeriesQueryFunction0 limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;People&apos; as p select timeseries(from p.HeartRate group by &apos;1 Hours&apos;   select slope() scale 1000) as __timeSeriesQueryFunction0 limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ItemsOrders/All&apos; where (Items in ($p0)) and (At &gt;= $p1) select facet(At &gt;= $p2, At &gt;= $p3 and At &lt; $p4, At &gt;= $p5 and At &lt; $p6) " name="RavenDB Queries can parse -  from index &apos;ItemsOrders/All&apos; where (Items in ($p0)) and (At &gt;= $p1) select facet(At &gt;= $p2, At &gt;= $p3 and At &lt; $p4, At &gt;= $p5 and At &lt; $p6) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/ByContent&apos; where Text = $p0 " name="RavenDB Queries can parse -  from index &apos;Posts/ByContent&apos; where Text = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test2&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;test2&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &gt;= $p0 select id() as Id, AmountLeft " name="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &gt;= $p0 select id() as Id, AmountLeft " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ItemIndex&apos; order by Val as long select distinct Val limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;ItemIndex&apos; order by Val as long select distinct Val limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MyIndex&apos; " name="RavenDB Queries can parse -  from index &apos;MyIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;HeartRateMeasures&apos;, null,null) " name="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;HeartRateMeasures&apos;, null,null) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 order by Age as long desc " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 order by Age as long desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;Companies&apos; where Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/ByAge&apos; where Age &lt; $p0 " name="RavenDB Queries can parse -  from index &apos;Person/ByAge&apos; where Age &lt; $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select timeseries(from u.Heartrate where (Tag == $p1) group by &apos;1 month&apos;   select average(), sum(), max()) as __timeSeriesQueryFunction0 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Age &gt; $p0 select timeseries(from u.Heartrate where (Tag == $p1) group by &apos;1 month&apos;   select average(), sum(), max()) as __timeSeriesQueryFunction0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LatestBuildsIndex&apos; as entry where (entry.ProductKey in ($p0)) and (entry.Channel in ($p1)) load entry.TeamCityBuildLocalId as __load select __load " name="RavenDB Queries can parse -  from index &apos;LatestBuildsIndex&apos; as entry where (entry.ProductKey in ($p0)) and (entry.Channel in ($p1)) load entry.TeamCityBuildLocalId as __load select __load " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;NestedObjectIndex&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;NestedObjectIndex&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Method&apos; where Bars_Count = $p0 " name="RavenDB Queries can parse -  from index &apos;Foos/ByBarCount/Method&apos; where Bars_Count = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ItemsOrders/All&apos; where (At &gt;= $p0) and (Items in ($p1)) select facet(At &gt;= $p2, At &gt;= $p3 and At &lt; $p4, At &gt;= $p5 and At &lt; $p6) " name="RavenDB Queries can parse -  from index &apos;ItemsOrders/All&apos; where (At &gt;= $p0) and (Items in ($p1)) select facet(At &gt;= $p2, At &gt;= $p3 and At &lt; $p4, At &gt;= $p5 and At &lt; $p6) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(DateOfListing &lt; &apos;2021-07-11T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-11T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-14T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-14T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-21T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-21T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-28T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-28T00:00:00.0000000&apos;) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(DateOfListing &lt; &apos;2021-07-11T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-11T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-14T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-14T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-21T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-21T00:00:00.0000000&apos; AND DateOfListing &lt; &apos;2021-07-28T00:00:00.0000000&apos;, DateOfListing &gt; &apos;2021-07-28T00:00:00.0000000&apos;) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Dummies&apos; " name="RavenDB Queries can parse -  from &apos;Dummies&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DynamicMultiMapDataSetIndex&apos; order by N1_D_Range desc limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;DynamicMultiMapDataSetIndex&apos; order by N1_D_Range desc limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as user select { FullName : user.name+&quot; &quot;+user.lastName } " name="RavenDB Queries can parse -  from &apos;Users&apos; as user select { FullName : user.name+&quot; &quot;+user.lastName } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestDocs&apos; where StringArray = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserToResource/Index&apos; where UserId = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UserToResource/Index&apos; where UserId = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; $p2, DateIn &gt;= $p3 and DateIn &lt; $p4, DateIn &gt;= $p5), facet(DateIn2 &lt; $p6, DateIn2 &gt;= $p7 and DateIn2 &lt; $p8, DateIn2 &gt;= $p9) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; $p2, DateIn &gt;= $p3 and DateIn &lt; $p4, DateIn &gt;= $p5), facet(DateIn2 &lt; $p6, DateIn2 &gt;= $p7 and DateIn2 &lt; $p8, DateIn2 &gt;= $p9) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;test&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(x) {   	var test = x.Value===0;   	return { ShouldBeTrue : test };   }   from &apos;Articles&apos; as x select output(x) " name="RavenDB Queries can parse -  declare function output(x) {   	var test = x.Value===0;   	return { ShouldBeTrue : test };   }   from &apos;Articles&apos; as x select output(x) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; " name="RavenDB Queries can parse -  from index &apos;Students/ByEmailDomain&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(item) {   	var subitems = load(item.data[&quot;subdata&quot;].map((function(c){return c;})));   	return { Id : id(item), data : item.data, values : subitems.reduce(function(a, b) { return a.concat((function(x){return x.data;})(b)); }, []) };   }   from &apos;TestableDTOs&apos; as item select output(item) limit $p0, $p1 " name="RavenDB Queries can parse -  declare function output(item) {   	var subitems = load(item.data[&quot;subdata&quot;].map((function(c){return c;})));   	return { Id : id(item), data : item.data, values : subitems.reduce(function(a, b) { return a.concat((function(x){return x.data;})(b)); }, []) };   }   from &apos;TestableDTOs&apos; as item select output(item) limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where MyNumber = $p0 " name="RavenDB Queries can parse -  from &apos;TestDocuments&apos; where MyNumber = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Events&apos; " name="RavenDB Queries can parse -  from &apos;Events&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProviderAndTaxonomyCodeIndex1&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;ProviderAndTaxonomyCodeIndex1&apos; where Name = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ItemsBySetIdIndex&apos; where SetId = $p0 and SoundCode = $p1 select SongId, Title, Interpret, Year, Attributes, SID, SetId, NumberOfTests, LastTestDate, LastTestId, Date " name="RavenDB Queries can parse -  from index &apos;ItemsBySetIdIndex&apos; where SetId = $p0 and SoundCode = $p1 select SongId, Title, Interpret, Year, Attributes, SID, SetId, NumberOfTests, LastTestDate, LastTestId, Date " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByNumber&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByNumber&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestObjs&apos; as t select { res : Object.keys(t.Dict).map(function(a){return{Key: a,Value:t.Dict[a]};}).reduce(function(_obj, _cur) {_obj[(function(x){return x.Key;})(_cur)] = (function(x){return x.Value[&quot;b&quot;];})(_cur);return _obj;}, {}) } " name="RavenDB Queries can parse -  from &apos;TestObjs&apos; as t select { res : Object.keys(t.Dict).map(function(a){return{Key: a,Value:t.Dict[a]};}).reduce(function(_obj, _cur) {_obj[(function(x){return x.Key;})(_cur)] = (function(x){return x.Value[&quot;b&quot;];})(_cur);return _obj;}, {}) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogPosts/ForSearch&apos; where search(SearchText, $p0) select id() as Id, SearchText include highlight(SearchText,128,10) " name="RavenDB Queries can parse -  from index &apos;BlogPosts/ForSearch&apos; where search(SearchText, $p0) select id() as Id, SearchText include highlight(SearchText,128,10) " time="0.006">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestModels&apos; " name="RavenDB Queries can parse -  from &apos;TestModels&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by id() " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by id() " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProjectsIndex&apos; order by PortfolioIndex " name="RavenDB Queries can parse -  from index &apos;ProjectsIndex&apos; order by PortfolioIndex " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where IndexOfOfMyStringArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;LastAccessPerName&apos; where LastAccess = $p0 " name="RavenDB Queries can parse -  from index &apos;LastAccessPerName&apos; where LastAccess = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Articles&apos; where (search(Title, $p0) or search(Description, $p1)) and IsDeleted = $p2 " name="RavenDB Queries can parse -  from &apos;Articles&apos; where (search(Title, $p0) or search(Description, $p1)) and IsDeleted = $p2 " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FloatIndex&apos; select id() as Id, FloatValue " name="RavenDB Queries can parse -  from index &apos;FloatIndex&apos; select id() as Id, FloatValue " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Items[].3 = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Items[].3 = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Employees&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Employees&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex6&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex6&apos; limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Outers&apos; where Examples = $p0 " name="RavenDB Queries can parse -  from &apos;Outers&apos; where Examples = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where NameOfProduct = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " name="RavenDB Queries can parse -  from &apos;OrderLines&apos; group by ProductName where NameOfProduct = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; select facet(&apos;Group&apos;) " name="RavenDB Queries can parse -  from index &apos;UsersIndex&apos; select facet(&apos;Group&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index2&apos; " name="RavenDB Queries can parse -  from index &apos;Index2&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; group by Country where City = $p0 select count() " name="RavenDB Queries can parse -  from &apos;Users&apos; group by Country where City = $p0 select count() " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Money&apos; where Amount = $p0 " name="RavenDB Queries can parse -  from &apos;Money&apos; where Amount = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestableDTOs&apos; as item load $p0 as subitem select { Id : id(item), data : item.data, values : subitem } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;TestableDTOs&apos; as item load $p0 as subitem select { Id : id(item), data : item.data, values : subitem } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(Spouse_BirthDate &gt;= $p1 and Spouse_BirthDate &lt; $p2, Spouse_BirthDate &gt;= $p3 and Spouse_BirthDate &lt; $p4, $p0) " name="RavenDB Queries can parse -  from index &apos;PersonDOBIndex&apos; select facet(Spouse_BirthDate &gt;= $p1 and Spouse_BirthDate &lt; $p2, Spouse_BirthDate &gt;= $p3 and Spouse_BirthDate &lt; $p4, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index&apos; where CustomerId = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Index&apos; where CustomerId = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where NestedItems.Key = $p0 and NestedItems.Value.Value &gt; $p1 " name="RavenDB Queries can parse -  from &apos;UserWithIDictionaries&apos; where NestedItems.Key = $p0 and NestedItems.Value.Value &gt; $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Products&apos; group by null select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " name="RavenDB Queries can parse -  from &apos;Products&apos; group by null select sum(PricePerUnit) as TotalPrice, count() as ProductsCount " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where startsWith(Name, $p0) " name="RavenDB Queries can parse -  from &apos;IndexedUsers&apos; where startsWith(Name, $p0) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;SpatialIndex&apos; where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &gt; $p0 select id() as Id, AmountLeft " name="RavenDB Queries can parse -  from index &apos;PaymentAll&apos; where AmountLeft &gt; $p0 select id() as Id, AmountLeft " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;speed&apos;, &apos;0001-01-01T00:00:00.0000000&apos;, &apos;9999-12-31T23:59:59.9999999&apos;) " name="RavenDB Queries can parse -  from &apos;Users&apos; include timeseries(&apos;speed&apos;, &apos;0001-01-01T00:00:00.0000000&apos;, &apos;9999-12-31T23:59:59.9999999&apos;) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Docs&apos; where search(StrVal1, $p0) and boost(search(StrVal2, $p1) or search(StrVal3, $p2), $p3) " name="RavenDB Queries can parse -  from &apos;Docs&apos; where search(StrVal1, $p0) and boost(search(StrVal2, $p1) or search(StrVal3, $p2), $p3) " time="0.01">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;App/WaiverWaitlistItemSearch&apos; select Id, ScreeningDate, ClientId, LastName, GroupNumber " name="RavenDB Queries can parse -  from index &apos;App/WaiverWaitlistItemSearch&apos; select Id, ScreeningDate, ClientId, LastName, GroupNumber " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/1&apos; order by Date " name="RavenDB Queries can parse -  from index &apos;Client/ImportSummaryByDate/1&apos; order by Date " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u select { CmpXngValue : cmpxchg(u.Name) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u select { CmpXngValue : cmpxchg(u.Name) } limit $p0, $p1 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;MilesGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " name="RavenDB Queries can parse -  from index &apos;MilesGeoIndex&apos; where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Foos/TestIndex&apos; where Read = $p0 " name="RavenDB Queries can parse -  from index &apos;Foos/TestIndex&apos; where Read = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArrayWithIndex = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyIntArrayWithIndex = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where id() in ($p0) select Name " name="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where id() in ($p0) select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where CreationTime = $p0 " name="RavenDB Queries can parse -  from &apos;EventsWithDates&apos; where CreationTime = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Movies&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;Movies&apos; where lucene(Name, $p0) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Cars&apos; where Color = $p0 " name="RavenDB Queries can parse -  from &apos;Cars&apos; where Color = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;CatsAndDogs&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;@all_docs&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;@all_docs&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByPhones&apos; where Phone = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByPhones&apos; where Phone = $p0 limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(id(&apos;facets/CameraFacets&apos;)) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; select facet(id(&apos;facets/CameraFacets&apos;)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; select Name, Address as OtherThanName, Address as OtherThanName2, Name as AnotherOtherThanName limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Customers/ByName&apos; select Name, Address as OtherThanName, Address as OtherThanName2, Name as AnotherOtherThanName limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) " name="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) select Name " name="RavenDB Queries can parse -  from &apos;Companies&apos; where startsWith(Name, $p0) select Name " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BlogPostWithAverageRatingAll&apos; " name="RavenDB Queries can parse -  from index &apos;BlogPostWithAverageRatingAll&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PeopleIndex21&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;PeopleIndex21&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Aspects&apos; " name="RavenDB Queries can parse -  from &apos;Aspects&apos; " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/PermissionsByUser&apos; " name="RavenDB Queries can parse -  from index &apos;Users/PermissionsByUser&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;, &quot;en-US&quot;) } " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;, &quot;en-US&quot;) } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;JsIndex&apos; " name="RavenDB Queries can parse -  from index &apos;JsIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;AverageHeartRate&apos; " name="RavenDB Queries can parse -  from index &apos;AverageHeartRate&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select Name " name="RavenDB Queries can parse -  from &apos;Users&apos; where Age &gt; $p0 select Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ThingIndex2&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;ThingIndex2&apos; where Name = $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;ModelWithEnums&apos; where NullableCategory = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;ModelWithEnums&apos; where NullableCategory = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DistinctSelectOrderBySumMapReduceIndex&apos; select Id, SelectSum, OrderBySum, IdsWithDecimals, OrderByDescending, Items " name="RavenDB Queries can parse -  from index &apos;DistinctSelectOrderBySumMapReduceIndex&apos; select Id, SelectSum, OrderBySum, IdsWithDecimals, OrderByDescending, Items " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select employee.FirstName " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.Employee as employee select employee.FirstName " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay &gt; $p0 " name="RavenDB Queries can parse -  from index &apos;DateTime&apos; where TimeOfDay &gt; $p0 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;IdentityUsers&apos; limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;IdentityUsers&apos; limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis(id() = $p1, $p0) " name="RavenDB Queries can parse -  from index &apos;DataIndex&apos; where moreLikeThis(id() = $p1, $p0) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(d, $p1, $p2) {   	var doc = d.SubDocuments.find(function(x){return id(x)===&quot;testing&quot;;});   	return { Id : id(d), Deleted : d.Deleted, SubTestId : doc!=null?id(doc):null, Values : d.SubDocuments.filter(function(x){return $p1.length===0||$p2.indexOf(x.TargetId)&gt;=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue,SubDocuments:x.SubDocuments.filter(function(s){return s!=null;}).map(function(s){return {TargetId:s.TargetId,TargetValue:s.TargetValue};})};}) };   }   from &apos;Documents&apos; as d where id() = $p0 select output(d, $p1, $p2) " name="RavenDB Queries can parse -  declare function output(d, $p1, $p2) {   	var doc = d.SubDocuments.find(function(x){return id(x)===&quot;testing&quot;;});   	return { Id : id(d), Deleted : d.Deleted, SubTestId : doc!=null?id(doc):null, Values : d.SubDocuments.filter(function(x){return $p1.length===0||$p2.indexOf(x.TargetId)&gt;=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue,SubDocuments:x.SubDocuments.filter(function(s){return s!=null;}).map(function(s){return {TargetId:s.TargetId,TargetValue:s.TargetValue};})};}) };   }   from &apos;Documents&apos; as d where id() = $p0 select output(d, $p1, $p2) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; " name="RavenDB Queries can parse -  from &apos;People&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country " name="RavenDB Queries can parse -  from &apos;Orders&apos; order by ShipTo.Country " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  declare function output(membership) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	var userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   	return { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index &apos;MembershipIndex&apos; as membership select output(membership) " name="RavenDB Queries can parse -  declare function output(membership) {   	var organizationId = &quot;organizations/1&quot;;   	var organization = load(organizationId);   	var userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   	return { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index &apos;MembershipIndex&apos; as membership select output(membership) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; where ExpirationTime = $p0 or (ExpirationTime &gt; $p1 and ExpirationTime != $p2) " name="RavenDB Queries can parse -  from &apos;Foos&apos; where ExpirationTime = $p0 or (ExpirationTime &gt; $p1 and ExpirationTime != $p2) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;, &quot;en-US&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, &quot;dd.MM.yyyy&quot;, &quot;en-US&quot;) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Itineraries/ByAll&apos; where ((DepartureAirportCode = $p0 and ArrivalAirportCode = $p1) and TotalDistance &gt;= $p2) and TotalDistance &lt;= $p3 select facet(DepartureAirportCode, avg(TotalDistance)) " name="RavenDB Queries can parse -  from index &apos;Itineraries/ByAll&apos; where ((DepartureAirportCode = $p0 and ArrivalAirportCode = $p1) and TotalDistance &gt;= $p2) and TotalDistance &lt;= $p3 select facet(DepartureAirportCode, avg(TotalDistance)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  match (Person as f)-[Relationships as r select r.TargetId]-&gt;(Person as t) " name="RavenDB Queries can parse -  match (Person as f)-[Relationships as r select r.TargetId]-&gt;(Person as t) " time="0">
      <skipped/>
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.disjoint(Shape, spatial.wkt($p0)) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;BBoxIndex&apos; where spatial.disjoint(Shape, spatial.wkt($p0)) limit $p1, $p2 " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/Id/Index&apos; select id() as Id, UserId, Family_Dad_Id " name="RavenDB Queries can parse -  from index &apos;Person/Id/Index&apos; select id() as Id, UserId, Family_Dad_Id " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours where (Tag == $p1) group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours where (Tag == $p1) group by &apos;1 Hours&apos;   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Integer as long " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Integer as long " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Shapes/SpatialIndex&apos; where spatial.within(Bbox, spatial.wkt($p0)) " name="RavenDB Queries can parse -  from index &apos;Shapes/SpatialIndex&apos; where spatial.within(Bbox, spatial.wkt($p0)) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; $p2, DateIn &gt;= $p3 and DateIn &lt; $p4, DateIn &gt;= $p5) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; where (DateIn != $p0 and Age &lt; $p1) select facet(DateIn &lt; $p2, DateIn &gt;= $p3 and DateIn &lt; $p4, DateIn &gt;= $p5) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;As&apos; include Bs " name="RavenDB Queries can parse -  from &apos;As&apos; include Bs " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p1) include explanations($p0) " name="RavenDB Queries can parse -  from index &apos;DocsIndex&apos; where search(StrVal, $p1) include explanations($p0) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d select { HasValue : d.NullableInt&gt;0||d.NullableInt===0 } " name="RavenDB Queries can parse -  from &apos;MyDocs&apos; as d select { HasValue : d.NullableInt&gt;0||d.NullableInt===0 } " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;DataContractClasses&apos; where n = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;DataContractClasses&apos; where n = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Total), min(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, max(Total), min(Total)) " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(Manufacturer), facet(Cost &lt;= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost &gt;= $p9), facet(Megapixels &lt;= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels &gt;= $p15) " name="RavenDB Queries can parse -  from index &apos;CameraCost&apos; where Cost between $p0 and $p1 select facet(Manufacturer), facet(Cost &lt;= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost &gt;= $p9), facet(Megapixels &lt;= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels &gt;= $p15) " time="0.013">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UserToResource/Index&apos; where Name = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UserToResource/Index&apos; where Name = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DocIndex&apos; where (StrVal = $p0 or StrVal = $p1) or StrVal = $p2 " name="RavenDB Queries can parse -  from index &apos;DocIndex&apos; where (StrVal = $p0 or StrVal = $p1) or StrVal = $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ContentSearchIndex&apos; where boost(search(Title, $p2), 12) or search(Content, $p3) include highlight(Title,128,2,$p0),highlight(Content,128,2,$p1) " name="RavenDB Queries can parse -  from index &apos;ContentSearchIndex&apos; where boost(search(Title, $p2), 12) or search(Content, $p3) include highlight(Title,128,2,$p0),highlight(Content,128,2,$p1) " time="0.008">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;BarSearchIndex&apos; where Number between $p0 and $p1 select FooName, Number " name="RavenDB Queries can parse -  from index &apos;BarSearchIndex&apos; where Number between $p0 and $p1 select FooName, Number " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; include cmpxchg(&apos;ExternalId&apos;) " name="RavenDB Queries can parse -  from index &apos;Companies/ByName&apos; include cmpxchg(&apos;ExternalId&apos;) " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)), facet(Currency, sum(Total)) " name="RavenDB Queries can parse -  from index &apos;Orders/All&apos; select facet(Product, sum(Total)), facet(Currency, sum(Total)) " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;) } limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; select Name, &quot;bob&quot; as Friend, 65 as Age " name="RavenDB Queries can parse -  from &apos;Users&apos; select Name, &quot;bob&quot; as Friend, 65 as Age " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyStringArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysContainsAndIndexOf&apos; where ContainsOfMyStringArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Person/Id/Index&apos; where search(Family_Dad_Id, $p0) " name="RavenDB Queries can parse -  from index &apos;Person/Id/Index&apos; where search(Family_Dad_Id, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByTrue&apos; " name="RavenDB Queries can parse -  from index &apos;Posts/Statistics/QuerySyntax/GroupByTrue&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; select After, Before " name="RavenDB Queries can parse -  from &apos;Items&apos; select After, Before " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Post/ByTag&apos; where Tag = $p0 order by Title limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Post/ByTag&apos; where Tag = $p0 order by Title limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;, &quot;en-US&quot;) } limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Bookings&apos; as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, &quot;000&quot;, &quot;en-US&quot;) } limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index/test2&apos; " name="RavenDB Queries can parse -  from index &apos;Index/test2&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Foos&apos; order by Start as long " name="RavenDB Queries can parse -  from &apos;Foos&apos; order by Start as long " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Blogs&apos; where search(Title, $p2) or search(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) " name="RavenDB Queries can parse -  from &apos;Blogs&apos; where search(Title, $p2) or search(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) " time="0.007">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;DeviceInfoIndexMapReduce&apos; " name="RavenDB Queries can parse -  from index &apos;DeviceInfoIndexMapReduce&apos; " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArray = $p0 " name="RavenDB Queries can parse -  from index &apos;TestIndexArraysLastIndexOf&apos; where LastIndexOfOfMyStringArray = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings all in ($p0) " name="RavenDB Queries can parse -  from &apos;EntityWithArrays&apos; where Strings all in ($p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; select Name, Latitude, Longitude " name="RavenDB Queries can parse -  from index &apos;Events/SpatialIndex&apos; select Name, Latitude, Longitude " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;TShirtNested&apos; where intersect(Name = $p0, Types_Color = $p1 and Types_Size = $p2, Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber limit $p5, $p6 " name="RavenDB Queries can parse -  from index &apos;TShirtNested&apos; where intersect(Name = $p0, Types_Color = $p1 and Types_Size = $p2, Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber limit $p5, $p6 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; where lucene(Name, $p0) " name="RavenDB Queries can parse -  from index &apos;ProfileByName&apos; where lucene(Name, $p0) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; select ShipTo as Address " name="RavenDB Queries can parse -  from &apos;Orders&apos; select ShipTo as Address " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where Tags = $p0 " name="RavenDB Queries can parse -  from &apos;BlogPosts&apos; where Tags = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Profits/Monthly/Loading/MyProfitsReferences&apos; order by ProfitValue as double " name="RavenDB Queries can parse -  from index &apos;Profits/Monthly/Loading/MyProfitsReferences&apos; order by ProfitValue as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_Faulty_3017&apos;) " name="RavenDB Queries can parse -  from &apos;Companies&apos; order by custom(Name, &apos;CanUseCustomSorter_Restart_Faulty_3017&apos;) " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Providers&apos; where Name = $p0 " name="RavenDB Queries can parse -  from &apos;Providers&apos; where Name = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; select SomeDate limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index1&apos; select SomeDate limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { emptyList : (x.Children!=null?x.Children:[]) } limit $p0, $p1 " name="RavenDB Queries can parse -  from &apos;TestView2s&apos; as x select { emptyList : (x.Children!=null?x.Children:[]) } limit $p0, $p1 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Place/ByLocationAndCategoryId&apos; where Categories_Id = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;Place/ByLocationAndCategoryId&apos; where Categories_Id = $p0 limit $p1, $p2 " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) " name="RavenDB Queries can parse -  from &apos;Users&apos; where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; select Cno, DetailsId, Grade, id() as Id " name="RavenDB Queries can parse -  from index &apos;Contract/ToContractListViewModel&apos; select Cno, DetailsId, Grade, id() as Id " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.CategoryListId as categoryList select { Id : id(o), Items : o.OrderItems.map(function(i){return {i:i,cat:categoryList.Categories};}).map(function(__rvn0){return {__rvn0:__rvn0,id:__rvn0.i.CategoryId};}).map(function(__rvn1){return {__rvn1:__rvn1,first:__rvn1.__rvn0.cat.find(function(x){return id(x)===__rvn1.id;})};}).map(function(__rvn2){return {__rvn2:__rvn2,name:__rvn2.first.Name};}).map(function(__rvn3){return {CategoryName:__rvn3.name};}) } " name="RavenDB Queries can parse -  from &apos;Orders&apos; as o load o.CategoryListId as categoryList select { Id : id(o), Items : o.OrderItems.map(function(i){return {i:i,cat:categoryList.Categories};}).map(function(__rvn0){return {__rvn0:__rvn0,id:__rvn0.i.CategoryId};}).map(function(__rvn1){return {__rvn1:__rvn1,first:__rvn1.__rvn0.cat.find(function(x){return id(x)===__rvn1.id;})};}).map(function(__rvn2){return {__rvn2:__rvn2,name:__rvn2.first.Name};}).map(function(__rvn3){return {CategoryName:__rvn3.name};}) } " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Prizes  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " name="RavenDB Queries can parse -  from &apos;People&apos; as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by &apos;1 Months&apos; , w.Prizes  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ByLineCost&apos; where Cost &gt; $p0 select Cost " name="RavenDB Queries can parse -  from index &apos;ByLineCost&apos; where Cost &gt; $p0 select Cost " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; order by Name " name="RavenDB Queries can parse -  from &apos;Users&apos; order by Name " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;StrategyIndividuals&apos; where Statistcs.4 = $p0 order by Statistcs.4 as double " name="RavenDB Queries can parse -  from &apos;StrategyIndividuals&apos; where Statistcs.4 = $p0 order by Statistcs.4 as double " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;FooIndex&apos; select facet(Age &lt; $p0, Age &gt;= $p1), facet(Long &gt; $p2 and Long &lt; $p3, Long &gt;= $p4), facet(Float &gt; $p5 and Float &lt; $p6, Float &gt;= $p7), facet(Double &gt; $p8 and Double &lt; $p9, Double &gt;= $p10), facet(Decimal &lt; $p11, Decimal &gt;= $p12 and Decimal &lt; $p13) " name="RavenDB Queries can parse -  from index &apos;FooIndex&apos; select facet(Age &lt; $p0, Age &gt;= $p1), facet(Long &gt; $p2 and Long &lt; $p3, Long &gt;= $p4), facet(Float &gt; $p5 and Float &lt; $p6, Float &gt;= $p7), facet(Double &gt; $p8 and Double &lt; $p9, Double &gt;= $p10), facet(Decimal &lt; $p11, Decimal &gt;= $p12 and Decimal &lt; $p13) " time="0.009">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; order by NameForSorting desc " name="RavenDB Queries can parse -  from index &apos;Buyers/Search&apos; order by NameForSorting desc " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Users&apos; where Logins[].OpenIdIdentifier = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;Users&apos; where Logins[].OpenIdIdentifier = $p0 limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Second = $p0 " name="RavenDB Queries can parse -  from index &apos;PersonByDate&apos; where Date_Second = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age1), facet(Age2), facet(Age3), facet(Age4), facet(Age5), facet(Age6), facet(Age7), facet(Age8), facet(Age9), facet(Age10), facet(Age11), facet(Age12), facet(Age13), facet(Age14), facet(Age15), facet(Age16), facet(Age17), facet(Age18), facet(Age19), facet(Age20), facet(Age21), facet(Age22), facet(Age23), facet(Age24), facet(Age25), facet(Age26), facet(Age27), facet(Age28), facet(Age29), facet(Age30), facet(Age31), facet(Age32), facet(Age33), facet(Age34), facet(Age35), facet(Age36), facet(Age37), facet(Age38), facet(Age39), facet(Age40), facet(Age41), facet(Age42), facet(Age43), facet(Age44), facet(Age45), facet(Age46), facet(Age47), facet(Age48), facet(Age49), facet(Age50), facet(Age51), facet(Age52), facet(Age53), facet(Age54), facet(Age55), facet(Age56), facet(Age57), facet(Age58), facet(Age59), facet(Age60), facet(Age61), facet(Age62), facet(Age63), facet(Age64), facet(Age65), facet(Age66), facet(Age67), facet(Age68), facet(Age69), facet(Age70), facet(Age71), facet(Age72), facet(Age73), facet(Age74), facet(Age75), facet(Age76), facet(Age77), facet(Age78), facet(Age79), facet(Age80), facet(Age81), facet(Age82), facet(Age83), facet(Age84), facet(Age85), facet(Age86), facet(Age87), facet(Age88), facet(Age89), facet(Age90), facet(Age91), facet(Age92), facet(Age93), facet(Age94), facet(Age95), facet(Age96), facet(Age97), facet(Age98), facet(Age99), facet(Age100), facet(Age101), facet(Age102), facet(Age103), facet(Age104), facet(Age105), facet(Age106), facet(Age107), facet(Age108), facet(Age109), facet(Age110), facet(Age111), facet(Age112), facet(Age113), facet(Age114), facet(Age115), facet(Age116), facet(Age117), facet(Age118), facet(Age119), facet(Age120), facet(Age121), facet(Age122), facet(Age123), facet(Age124), facet(Age125), facet(Age126), facet(Age127), facet(Age128), facet(Age129), facet(Age130), facet(Age131), facet(Age132), facet(Age133), facet(Age134), facet(Age135), facet(Age136), facet(Age137), facet(Age138), facet(Age139), facet(Age140), facet(Age141), facet(Age142), facet(Age143), facet(Age144), facet(Age145), facet(Age146), facet(Age147), facet(Age148), facet(Age149), facet(Age150), facet(Age151), facet(Age152), facet(Age153), facet(Age154), facet(Age155), facet(Age156), facet(Age157), facet(Age158), facet(Age159), facet(Age160), facet(Age161), facet(Age162), facet(Age163), facet(Age164), facet(Age165), facet(Age166), facet(Age167), facet(Age168), facet(Age169), facet(Age170), facet(Age171), facet(Age172), facet(Age173), facet(Age174), facet(Age175), facet(Age176), facet(Age177), facet(Age178), facet(Age179), facet(Age180), facet(Age181), facet(Age182), facet(Age183), facet(Age184), facet(Age185), facet(Age186), facet(Age187), facet(Age188), facet(Age189), facet(Age190), facet(Age191), facet(Age192), facet(Age193), facet(Age194), facet(Age195), facet(Age196), facet(Age197), facet(Age198), facet(Age199), facet(Age200) " name="RavenDB Queries can parse -  from index &apos;PersonsIndex&apos; where Name = $p0 select facet(Age1), facet(Age2), facet(Age3), facet(Age4), facet(Age5), facet(Age6), facet(Age7), facet(Age8), facet(Age9), facet(Age10), facet(Age11), facet(Age12), facet(Age13), facet(Age14), facet(Age15), facet(Age16), facet(Age17), facet(Age18), facet(Age19), facet(Age20), facet(Age21), facet(Age22), facet(Age23), facet(Age24), facet(Age25), facet(Age26), facet(Age27), facet(Age28), facet(Age29), facet(Age30), facet(Age31), facet(Age32), facet(Age33), facet(Age34), facet(Age35), facet(Age36), facet(Age37), facet(Age38), facet(Age39), facet(Age40), facet(Age41), facet(Age42), facet(Age43), facet(Age44), facet(Age45), facet(Age46), facet(Age47), facet(Age48), facet(Age49), facet(Age50), facet(Age51), facet(Age52), facet(Age53), facet(Age54), facet(Age55), facet(Age56), facet(Age57), facet(Age58), facet(Age59), facet(Age60), facet(Age61), facet(Age62), facet(Age63), facet(Age64), facet(Age65), facet(Age66), facet(Age67), facet(Age68), facet(Age69), facet(Age70), facet(Age71), facet(Age72), facet(Age73), facet(Age74), facet(Age75), facet(Age76), facet(Age77), facet(Age78), facet(Age79), facet(Age80), facet(Age81), facet(Age82), facet(Age83), facet(Age84), facet(Age85), facet(Age86), facet(Age87), facet(Age88), facet(Age89), facet(Age90), facet(Age91), facet(Age92), facet(Age93), facet(Age94), facet(Age95), facet(Age96), facet(Age97), facet(Age98), facet(Age99), facet(Age100), facet(Age101), facet(Age102), facet(Age103), facet(Age104), facet(Age105), facet(Age106), facet(Age107), facet(Age108), facet(Age109), facet(Age110), facet(Age111), facet(Age112), facet(Age113), facet(Age114), facet(Age115), facet(Age116), facet(Age117), facet(Age118), facet(Age119), facet(Age120), facet(Age121), facet(Age122), facet(Age123), facet(Age124), facet(Age125), facet(Age126), facet(Age127), facet(Age128), facet(Age129), facet(Age130), facet(Age131), facet(Age132), facet(Age133), facet(Age134), facet(Age135), facet(Age136), facet(Age137), facet(Age138), facet(Age139), facet(Age140), facet(Age141), facet(Age142), facet(Age143), facet(Age144), facet(Age145), facet(Age146), facet(Age147), facet(Age148), facet(Age149), facet(Age150), facet(Age151), facet(Age152), facet(Age153), facet(Age154), facet(Age155), facet(Age156), facet(Age157), facet(Age158), facet(Age159), facet(Age160), facet(Age161), facet(Age162), facet(Age163), facet(Age164), facet(Age165), facet(Age166), facet(Age167), facet(Age168), facet(Age169), facet(Age170), facet(Age171), facet(Age172), facet(Age173), facet(Age174), facet(Age175), facet(Age176), facet(Age177), facet(Age178), facet(Age179), facet(Age180), facet(Age181), facet(Age182), facet(Age183), facet(Age184), facet(Age185), facet(Age186), facet(Age187), facet(Age188), facet(Age189), facet(Age190), facet(Age191), facet(Age192), facet(Age193), facet(Age194), facet(Age195), facet(Age196), facet(Age197), facet(Age198), facet(Age199), facet(Age200) " time="0.124">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DecimalMinVal = $p0 " name="RavenDB Queries can parse -  from &apos;EdgeCaseValues&apos; where DecimalMinVal = $p0 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Services/QueryIndex&apos; " name="RavenDB Queries can parse -  from index &apos;Services/QueryIndex&apos; " time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;MyEntities&apos; where StringData = $p0 limit $p1, $p2 " name="RavenDB Queries can parse -  from &apos;MyEntities&apos; where StringData = $p0 limit $p1, $p2 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Companies/ByUnknown/WithIndexMissingFieldsAsNull&apos; where Unknown = $p0 " name="RavenDB Queries can parse -  from index &apos;Companies/ByUnknown/WithIndexMissingFieldsAsNull&apos; where Unknown = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Index1&apos; as c load c.OrderId as o select o limit $p0, $p1 " name="RavenDB Queries can parse -  from index &apos;Index1&apos; as c load c.OrderId as o select o limit $p0, $p1 " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  with {from &apos;Friends&apos;} as F1   with {from &apos;Friends&apos;} as F2   with edges(Friends) {where FriendsSince &gt;= &apos;2020-08-10T12:42:55.4827944Z&apos; select FriendId}  as L1   match (F1)-[L1]-&gt;(F2) " name="RavenDB Queries can parse -  with {from &apos;Friends&apos;} as F1   with {from &apos;Friends&apos;} as F2   with edges(Friends) {where FriendsSince &gt;= &apos;2020-08-10T12:42:55.4827944Z&apos; select FriendId}  as L1   match (F1)-[L1]-&gt;(F2) " time="0">
      <skipped/>
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) " name="RavenDB Queries can parse -  from &apos;Items&apos; where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) " time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;Users/ByDisplayNameReversed&apos; where startsWith(DisplayNameReversed, $p0) " name="RavenDB Queries can parse -  from index &apos;Users/ByDisplayNameReversed&apos; where startsWith(DisplayNameReversed, $p0) " time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from &apos;RavenDocuments&apos; as d where id() = $p0 select { SubDocResults : d.SubDocs.sort(function (a, b){ return b.Value - a.Value;}).filter(function(s){return s.Value&gt;1;}).map(function(s){return {Val:s.Value,Date:s.Date};}) } " name="RavenDB Queries can parse -  from &apos;RavenDocuments&apos; as d where id() = $p0 select { SubDocResults : d.SubDocs.sort(function (a, b){ return b.Value - a.Value;}).filter(function(s){return s.Value&gt;1;}).map(function(s){return {Val:s.Value,Date:s.Date};}) } " time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;test&apos; where (exists(Tags) and not search(Tags, $p0)) or Name = $p1 " name="RavenDB Queries can parse -  from index &apos;test&apos; where (exists(Tags) and not search(Tags, $p0)) or Name = $p1 " time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = cmpxchg($p0) limit $p1, $p2 " name="RavenDB Queries can parse -  from index &apos;UsersByName&apos; where Name = cmpxchg($p0) limit $p1, $p2 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from index &apos;ThingIndex&apos; where Name = $p0 " name="RavenDB Queries can parse -  from index &apos;ThingIndex&apos; where Name = $p0 " time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse -  from Employees filter Name = &apos;Jane&apos;" name="RavenDB Queries can parse -  from Employees filter Name = &apos;Jane&apos;" time="0.005">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees filter Active = false" name="RavenDB Queries can parse - from Employees filter Active = false" time="0.004">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees filter Active = true filter_limit 1" name="RavenDB Queries can parse - from Employees filter Active = true filter_limit 1" time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse - $name=&apos;matt&apos; from Employees filter Name = $name" name="RavenDB Queries can parse - $name=&apos;matt&apos; from Employees filter Name = $name" time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees as e filter e.Name = $name" name="RavenDB Queries can parse - from Employees as e filter e.Name = $name" time="0.003">
    </testcase>
    <testcase classname="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == &apos;J&apos;} from Employees as e filter check(e)" name="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == &apos;J&apos;} from Employees as e filter check(e)" time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == $prefix} from Employees as e filter check(e)" name="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == $prefix} from Employees as e filter check(e)" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - declare function check(r, prefix) { return r.Name[0] == prefix} from Employees as e filter check(e, $prefix)" name="RavenDB Queries can parse - declare function check(r, prefix) { return r.Name[0] == prefix} from Employees as e filter check(e, $prefix)" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager" name="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager select e.Name, m.Name as ManagerName" name="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager select e.Name, m.Name as ManagerName" time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager select { Name: e.Name, ManagerName: m.Name}" name="RavenDB Queries can parse - from Employees as e load e.Manager as m filter e.Name = $name and m.Name = $manager select { Name: e.Name, ManagerName: m.Name}" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees where Active = true filter Name = &apos;Jane&apos;" name="RavenDB Queries can parse - from Employees where Active = true filter Name = &apos;Jane&apos;" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees order by Name filter Active = false" name="RavenDB Queries can parse - from Employees order by Name filter Active = false" time="0">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees order by Name desc filter Active = true filter_limit 1" name="RavenDB Queries can parse - from Employees order by Name desc filter Active = true filter_limit 1" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees where Active = $active filter Name = $name" name="RavenDB Queries can parse - from Employees where Active = $active filter Name = $name" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == &apos;J&apos;} from Employees as e where e.Active = true filter check(e)" name="RavenDB Queries can parse - declare function check(r) { return r.Name[0] == &apos;J&apos;} from Employees as e where e.Active = true filter check(e)" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees as e where e.Active = $active  load e.Manager as m filter e.Name = $name and m.Name = $manager" name="RavenDB Queries can parse - from Employees as e where e.Active = $active  load e.Manager as m filter e.Name = $name and m.Name = $manager" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees where spatial.within(spatial.point(Location.Latitude, Location.Longitude), spatial.wkt($wkt)) filter Name = &apos;Frank&apos;" name="RavenDB Queries can parse - from Employees where spatial.within(spatial.point(Location.Latitude, Location.Longitude), spatial.wkt($wkt)) filter Name = &apos;Frank&apos;" time="0.002">
    </testcase>
    <testcase classname="RavenDB Queries can parse - from Employees group by Manager filter Count == 2 select count(), Manager" name="RavenDB Queries can parse - from Employees group by Manager filter Count == 2 select count(), Manager" time="0.001">
    </testcase>
    <testcase classname="RavenDB Queries can parse - declare function check(r, prefix) { return r.Name[0] == prefix} from Employees as e where e.Active = true filter check(e, $prefix) include timings()" name="RavenDB Queries can parse - declare function check(r, prefix) { return r.Name[0] == prefix} from Employees as e where e.Active = true filter check(e, $prefix) include timings()" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BackupsPage" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="9.739" tests="3">
    <testcase classname="BackupsPage can render empty view" name="BackupsPage can render empty view" time="0.065">
    </testcase>
    <testcase classname="BackupsPage can render full view" name="BackupsPage can render full view" time="0.09">
    </testcase>
    <testcase classname="BackupsPage Periodic Backup can render enabled" name="BackupsPage Periodic Backup can render enabled" time="0.076">
    </testcase>
  </testsuite>
  <testsuite name="IndexesPage" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="10.174" tests="5">
    <testcase classname="IndexesPage can render empty view" name="IndexesPage can render empty view" time="0.043">
    </testcase>
    <testcase classname="IndexesPage can render" name="IndexesPage can render" time="0.293">
    </testcase>
    <testcase classname="IndexesPage can show search engine - corax" name="IndexesPage can show search engine - corax" time="0.195">
    </testcase>
    <testcase classname="IndexesPage can open faulty index - sharded" name="IndexesPage can open faulty index - sharded" time="0.055">
    </testcase>
    <testcase classname="IndexesPage can open faulty index - single node" name="IndexesPage can open faulty index - single node" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="StatisticsPage" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="11.622" tests="5">
    <testcase classname="StatisticsPage can render stats w/o details" name="StatisticsPage can render stats w/o details" time="0.063">
    </testcase>
    <testcase classname="StatisticsPage can render stats w/ details" name="StatisticsPage can render stats w/ details" time="0.597">
    </testcase>
    <testcase classname="StatisticsPage can render index map stats" name="StatisticsPage can render index map stats" time="0.248">
    </testcase>
    <testcase classname="StatisticsPage can render index map stats" name="StatisticsPage can render index map stats" time="0.218">
    </testcase>
    <testcase classname="StatisticsPage can handle no indexes case" name="StatisticsPage can handle no indexes case" time="0.134">
    </testcase>
  </testsuite>
  <testsuite name="OngoingTasksPage" errors="0" failures="0" skipped="0" timestamp="2022-09-02T10:34:16" time="20.935" tests="33">
    <testcase classname="OngoingTasksPage can render empty view" name="OngoingTasksPage can render empty view" time="0.054">
    </testcase>
    <testcase classname="OngoingTasksPage can render full view" name="OngoingTasksPage can render full view" time="0.076">
    </testcase>
    <testcase classname="OngoingTasksPage RavenETL can render disabled and not completed" name="OngoingTasksPage RavenETL can render disabled and not completed" time="0.057">
    </testcase>
    <testcase classname="OngoingTasksPage RavenETL can render completed" name="OngoingTasksPage RavenETL can render completed" time="0.58">
    </testcase>
    <testcase classname="OngoingTasksPage RavenETL can render enabled and not completed" name="OngoingTasksPage RavenETL can render enabled and not completed" time="0.565">
    </testcase>
    <testcase classname="OngoingTasksPage RavenETL can notify about empty script" name="OngoingTasksPage RavenETL can notify about empty script" time="0.555">
    </testcase>
    <testcase classname="OngoingTasksPage SQL can render disabled and not completed" name="OngoingTasksPage SQL can render disabled and not completed" time="0.02">
    </testcase>
    <testcase classname="OngoingTasksPage SQL can render completed" name="OngoingTasksPage SQL can render completed" time="0.542">
    </testcase>
    <testcase classname="OngoingTasksPage SQL can render enabled and not completed" name="OngoingTasksPage SQL can render enabled and not completed" time="0.542">
    </testcase>
    <testcase classname="OngoingTasksPage SQL can notify about empty script" name="OngoingTasksPage SQL can notify about empty script" time="0.548">
    </testcase>
    <testcase classname="OngoingTasksPage OLAP can render disabled and not completed" name="OngoingTasksPage OLAP can render disabled and not completed" time="0.024">
    </testcase>
    <testcase classname="OngoingTasksPage OLAP can render completed" name="OngoingTasksPage OLAP can render completed" time="0.534">
    </testcase>
    <testcase classname="OngoingTasksPage OLAP can render enabled and not completed" name="OngoingTasksPage OLAP can render enabled and not completed" time="0.55">
    </testcase>
    <testcase classname="OngoingTasksPage OLAP can notify about empty script" name="OngoingTasksPage OLAP can notify about empty script" time="0.539">
    </testcase>
    <testcase classname="OngoingTasksPage Kafka can render disabled and not completed" name="OngoingTasksPage Kafka can render disabled and not completed" time="0.021">
    </testcase>
    <testcase classname="OngoingTasksPage Kafka can render completed" name="OngoingTasksPage Kafka can render completed" time="0.533">
    </testcase>
    <testcase classname="OngoingTasksPage Kafka can render enabled and not completed" name="OngoingTasksPage Kafka can render enabled and not completed" time="0.539">
    </testcase>
    <testcase classname="OngoingTasksPage Kafka can notify about empty script" name="OngoingTasksPage Kafka can notify about empty script" time="0.533">
    </testcase>
    <testcase classname="OngoingTasksPage RabbitMQ can render disabled and not completed" name="OngoingTasksPage RabbitMQ can render disabled and not completed" time="0.017">
    </testcase>
    <testcase classname="OngoingTasksPage RabbitMQ can render completed" name="OngoingTasksPage RabbitMQ can render completed" time="0.53">
    </testcase>
    <testcase classname="OngoingTasksPage RabbitMQ can render enabled and not completed" name="OngoingTasksPage RabbitMQ can render enabled and not completed" time="0.54">
    </testcase>
    <testcase classname="OngoingTasksPage RabbitMQ can notify about empty script" name="OngoingTasksPage RabbitMQ can notify about empty script" time="0.537">
    </testcase>
    <testcase classname="OngoingTasksPage ElasticSearch can render disabled and not completed" name="OngoingTasksPage ElasticSearch can render disabled and not completed" time="0.017">
    </testcase>
    <testcase classname="OngoingTasksPage ElasticSearch can render completed" name="OngoingTasksPage ElasticSearch can render completed" time="0.532">
    </testcase>
    <testcase classname="OngoingTasksPage ElasticSearch can render enabled and not completed" name="OngoingTasksPage ElasticSearch can render enabled and not completed" time="0.537">
    </testcase>
    <testcase classname="OngoingTasksPage ElasticSearch can notify about empty script" name="OngoingTasksPage ElasticSearch can notify about empty script" time="0.529">
    </testcase>
    <testcase classname="OngoingTasksPage Replication Sink can render enabled" name="OngoingTasksPage Replication Sink can render enabled" time="0.013">
    </testcase>
    <testcase classname="OngoingTasksPage Replication Hub can render hub w/o connections" name="OngoingTasksPage Replication Hub can render hub w/o connections" time="0.014">
    </testcase>
    <testcase classname="OngoingTasksPage Replication Hub can render hub w/ connections" name="OngoingTasksPage Replication Hub can render hub w/ connections" time="0.013">
    </testcase>
    <testcase classname="OngoingTasksPage Periodic Backup can render enabled" name="OngoingTasksPage Periodic Backup can render enabled" time="0.017">
    </testcase>
    <testcase classname="OngoingTasksPage External Replication can render enabled" name="OngoingTasksPage External Replication can render enabled" time="0.016">
    </testcase>
    <testcase classname="OngoingTasksPage External Replication can render server wide" name="OngoingTasksPage External Replication can render server wide" time="0.009">
    </testcase>
    <testcase classname="OngoingTasksPage Subscription can render enabled" name="OngoingTasksPage Subscription can render enabled" time="0.017">
    </testcase>
  </testsuite>
</testsuites>